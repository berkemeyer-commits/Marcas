// Archivo : C:\Dev\Berke.Libs\Berke.Libs.Base\Helpers\DBTabs.cs
// Generado: mi√©rcoles, 28 de agosto de 2019 18:38 Por: gagaleanod


using System;
using System.Data;
using Berke.Libs.Base;
using Berke.Libs.Base.Helpers;
using Berke.Libs.Base.DSHelpers;
using Berke.DG.Adapters;


#region Tablas

#region ac_areacontabilidad
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ac_areacontabilidadRow 
		{
			private  DSTab _dst;
			
			public Int_Field ac_areacontabilidadid;	
			public String_Field ac_descripcionarea;	
			public Int_Field ac_areamarcasid;	
			public Int_Field ac_unidadnegocioid;	

			public ac_areacontabilidadRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ac_areacontabilidadid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ac_descripcionarea		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ac_areamarcasid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ac_unidadnegocioid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ac_areacontabilidadRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ac_areacontabilidad : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ac_areacontabilidad";
	
		
		public ac_areacontabilidadRow Dat;
		public ac_areacontabilidadRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ac_areacontabilidad( DataTable tab ) : base() 
		{
			_dbTableName = "ac_areacontabilidad";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ac_areacontabilidadRow( _dst, false );
			Old = new ac_areacontabilidadRow( _dst , true );
		}
		
		
		public ac_areacontabilidad( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ac_areacontabilidad";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ac_areacontabilidadRow( _dst, false );
			Old = new ac_areacontabilidadRow( _dst , true );
		}
				
		public ac_areacontabilidad( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ac_areacontabilidad() : base() 
		{
			Init();
		}
		
		public ac_areacontabilidad( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ac_areacontabilidad";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ac_areacontabilidadid", typeof( int ) );  
			_dt.Columns.Add( "ac_descripcionarea", typeof( String ) );  
			_dt.Columns.Add( "ac_areamarcasid", typeof( int ) );  
			_dt.Columns.Add( "ac_unidadnegocioid", typeof( int ) );  
			
			

			
			_dt.Columns["ac_areacontabilidadid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ac_areacontabilidad",_dt.Columns["ac_areacontabilidadid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ac_areacontabilidadRow( _dst, false );
			Old = new ac_areacontabilidadRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ac_areacontabilidad

#region ad_autorizaciondocumento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ad_autorizaciondocumentoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ad_autorizacioncabid;	
			public Int_Field ad_tipodocumentoautid;	
			public Int_Field ad_documentoid;	
			public Int_Field ad_usuarioautorizador;	
			public Int_Field ad_usuarioautorizado;	
			public String_Field ad_motivo;	
			public DateTime_Field ad_fechadesde;	
			public DateTime_Field ad_fechahasta;	
			public Boolean_Field ad_utilizado;	

			public ad_autorizaciondocumentoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ad_autorizacioncabid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ad_tipodocumentoautid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ad_documentoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ad_usuarioautorizador		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ad_usuarioautorizado		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ad_motivo		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ad_fechadesde		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				ad_fechahasta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				ad_utilizado		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class ad_autorizaciondocumentoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ad_autorizaciondocumento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ad_autorizaciondocumento";
	
		
		public ad_autorizaciondocumentoRow Dat;
		public ad_autorizaciondocumentoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ad_autorizaciondocumento( DataTable tab ) : base() 
		{
			_dbTableName = "ad_autorizaciondocumento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ad_autorizaciondocumentoRow( _dst, false );
			Old = new ad_autorizaciondocumentoRow( _dst , true );
		}
		
		
		public ad_autorizaciondocumento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ad_autorizaciondocumento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ad_autorizaciondocumentoRow( _dst, false );
			Old = new ad_autorizaciondocumentoRow( _dst , true );
		}
				
		public ad_autorizaciondocumento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ad_autorizaciondocumento() : base() 
		{
			Init();
		}
		
		public ad_autorizaciondocumento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ad_autorizaciondocumento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ad_autorizacioncabid", typeof( int ) );  
			_dt.Columns.Add( "ad_tipodocumentoautid", typeof( int ) );  
			_dt.Columns.Add( "ad_documentoid", typeof( int ) );  
			_dt.Columns.Add( "ad_usuarioautorizador", typeof( int ) );  
			_dt.Columns.Add( "ad_usuarioautorizado", typeof( int ) );  
			_dt.Columns.Add( "ad_motivo", typeof( String ) );  
			_dt.Columns.Add( "ad_fechadesde", typeof( DateTime ) );  
			_dt.Columns.Add( "ad_fechahasta", typeof( DateTime ) );  
			_dt.Columns.Add( "ad_utilizado", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ad_autorizacioncabid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ad_autorizaciondocumento",_dt.Columns["ad_autorizacioncabid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ad_autorizaciondocumentoRow( _dst, false );
			Old = new ad_autorizaciondocumentoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ad_autorizaciondocumento

#region AjustePago
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AjustePagoRow 
		{
			private  DSTab _dst;
			
			public Int_Field SolicitudCabID;	
			public String_Field Origen;	
			public Int_Field ProveedorID;	
			public String_Field NroFactura;	
			public DateTime_Field FechaFactura;	
			public Int_Field MonedaID;	
			public Int_Field FormaPagoID;	
			public DateTime_Field FechaPago;	
			public String_Field NroCheque;	
			public DateTime_Field FechaCheque;	
			public Int_Field BancoChequeID;	
			public Int_Field CtaChequeID;	
			public Decimal_Field MontoPago;	
			public String_Field Referencia;	

			public AjustePagoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				SolicitudCabID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Origen		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ProveedorID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				NroFactura		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FechaFactura		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				MonedaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				FormaPagoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FechaPago		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				NroCheque		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				FechaCheque		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				BancoChequeID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				CtaChequeID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				MontoPago		= new Decimal_Field(	_dst, 12, IsOldDataVersion  );	
				Referencia		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class AjustePagoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AjustePago : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AjustePago";
	
		
		public AjustePagoRow Dat;
		public AjustePagoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AjustePago( DataTable tab ) : base() 
		{
			_dbTableName = "AjustePago";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AjustePagoRow( _dst, false );
			Old = new AjustePagoRow( _dst , true );
		}
		
		
		public AjustePago( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AjustePago";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AjustePagoRow( _dst, false );
			Old = new AjustePagoRow( _dst , true );
		}
				
		public AjustePago( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AjustePago() : base() 
		{
			Init();
		}
		
		public AjustePago( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AjustePago";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "SolicitudCabID", typeof( int ) );  
			_dt.Columns.Add( "Origen", typeof( String ) );  
			_dt.Columns.Add( "ProveedorID", typeof( int ) );  
			_dt.Columns.Add( "NroFactura", typeof( String ) );  
			_dt.Columns.Add( "FechaFactura", typeof( DateTime ) );  
			_dt.Columns.Add( "MonedaID", typeof( int ) );  
			_dt.Columns.Add( "FormaPagoID", typeof( int ) );  
			_dt.Columns.Add( "FechaPago", typeof( DateTime ) );  
			_dt.Columns.Add( "NroCheque", typeof( String ) );  
			_dt.Columns.Add( "FechaCheque", typeof( DateTime ) );  
			_dt.Columns.Add( "BancoChequeID", typeof( int ) );  
			_dt.Columns.Add( "CtaChequeID", typeof( int ) );  
			_dt.Columns.Add( "MontoPago", typeof( Decimal ) );  
			_dt.Columns.Add( "Referencia", typeof( String ) );  
			
			

			
			_dt.Columns["SolicitudCabID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AjustePago",_dt.Columns["SolicitudCabID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AjustePagoRow( _dst, false );
			Old = new AjustePagoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AjustePago

#region al_alerta
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class al_alertaRow 
		{
			private  DSTab _dst;
			
			public Int_Field al_alertaid;	
			public String_Field al_descripcion;	
			public String_Field al_textomensaje;	

			public al_alertaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				al_alertaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				al_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				al_textomensaje		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class al_alertaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class al_alerta : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "al_alerta";
	
		
		public al_alertaRow Dat;
		public al_alertaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public al_alerta( DataTable tab ) : base() 
		{
			_dbTableName = "al_alerta";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new al_alertaRow( _dst, false );
			Old = new al_alertaRow( _dst , true );
		}
		
		
		public al_alerta( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "al_alerta";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new al_alertaRow( _dst, false );
			Old = new al_alertaRow( _dst , true );
		}
				
		public al_alerta( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public al_alerta() : base() 
		{
			Init();
		}
		
		public al_alerta( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "al_alerta";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "al_alertaid", typeof( int ) );  
			_dt.Columns.Add( "al_descripcion", typeof( String ) );  
			_dt.Columns.Add( "al_textomensaje", typeof( String ) );  
			
			

			
			_dt.Columns["al_alertaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_al_alerta",_dt.Columns["al_alertaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new al_alertaRow( _dst, false );
			Old = new al_alertaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion al_alerta

#region AlertaVigilancia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AlertaVigilanciaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaAlerta;	
			public String_Field Asunto;	
			public Int_Field Remitente;	
			public Int_Field Destinatario;	
			public String_Field Indicaciones;	
			public Int_Field Prioridad;	
			public Boolean_Field Leido;	

			public AlertaVigilanciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				FechaAlerta		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				Asunto		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Remitente		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Destinatario		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Indicaciones		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Prioridad		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Leido		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class AlertaVigilanciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AlertaVigilancia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AlertaVigilancia";
	
		
		public AlertaVigilanciaRow Dat;
		public AlertaVigilanciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AlertaVigilancia( DataTable tab ) : base() 
		{
			_dbTableName = "AlertaVigilancia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AlertaVigilanciaRow( _dst, false );
			Old = new AlertaVigilanciaRow( _dst , true );
		}
		
		
		public AlertaVigilancia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AlertaVigilancia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AlertaVigilanciaRow( _dst, false );
			Old = new AlertaVigilanciaRow( _dst , true );
		}
				
		public AlertaVigilancia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AlertaVigilancia() : base() 
		{
			Init();
		}
		
		public AlertaVigilancia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AlertaVigilancia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaAlerta", typeof( DateTime ) );  
			_dt.Columns.Add( "Asunto", typeof( String ) );  
			_dt.Columns.Add( "Remitente", typeof( int ) );  
			_dt.Columns.Add( "Destinatario", typeof( int ) );  
			_dt.Columns.Add( "Indicaciones", typeof( String ) );  
			_dt.Columns.Add( "Prioridad", typeof( int ) );  
			_dt.Columns.Add( "Leido", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AlertaVigilancia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AlertaVigilanciaRow( _dst, false );
			Old = new AlertaVigilanciaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AlertaVigilancia

#region Antecedente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AntecedenteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field TipoAntecedenteID;	
			public String_Field Obs;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	

			public AntecedenteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TipoAntecedenteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class AntecedenteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Antecedente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Antecedente";
	
		
		public AntecedenteRow Dat;
		public AntecedenteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Antecedente( DataTable tab ) : base() 
		{
			_dbTableName = "Antecedente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AntecedenteRow( _dst, false );
			Old = new AntecedenteRow( _dst , true );
		}
		
		
		public Antecedente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Antecedente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AntecedenteRow( _dst, false );
			Old = new AntecedenteRow( _dst , true );
		}
				
		public Antecedente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Antecedente() : base() 
		{
			Init();
		}
		
		public Antecedente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Antecedente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "TipoAntecedenteID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Antecedente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AntecedenteRow( _dst, false );
			Old = new AntecedenteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Antecedente

#region anxe_anotxexpe
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class anxe_anotxexpeRow 
		{
			private  DSTab _dst;
			
			public Int_Field anxe_anotxexpeid;	
			public Int_Field anxe_expedienteoposicionid;	
			public Int_Field anxe_tipoanotacionid;	
			public String_Field anxe_observacion;	
			public Int_Field anxe_gestorid;	
			public DateTime_Field anxe_fecha;	

			public anxe_anotxexpeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				anxe_anotxexpeid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				anxe_expedienteoposicionid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anxe_tipoanotacionid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				anxe_observacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				anxe_gestorid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				anxe_fecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class anxe_anotxexpeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class anxe_anotxexpe : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "anxe_anotxexpe";
	
		
		public anxe_anotxexpeRow Dat;
		public anxe_anotxexpeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public anxe_anotxexpe( DataTable tab ) : base() 
		{
			_dbTableName = "anxe_anotxexpe";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new anxe_anotxexpeRow( _dst, false );
			Old = new anxe_anotxexpeRow( _dst , true );
		}
		
		
		public anxe_anotxexpe( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "anxe_anotxexpe";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new anxe_anotxexpeRow( _dst, false );
			Old = new anxe_anotxexpeRow( _dst , true );
		}
				
		public anxe_anotxexpe( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public anxe_anotxexpe() : base() 
		{
			Init();
		}
		
		public anxe_anotxexpe( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "anxe_anotxexpe";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "anxe_anotxexpeid", typeof( int ) );  
			_dt.Columns.Add( "anxe_expedienteoposicionid", typeof( int ) );  
			_dt.Columns.Add( "anxe_tipoanotacionid", typeof( int ) );  
			_dt.Columns.Add( "anxe_observacion", typeof( String ) );  
			_dt.Columns.Add( "anxe_gestorid", typeof( int ) );  
			_dt.Columns.Add( "anxe_fecha", typeof( DateTime ) );  
			
			

			
			_dt.Columns["anxe_anotxexpeid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_anxe_anotxexpe",_dt.Columns["anxe_anotxexpeid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new anxe_anotxexpeRow( _dst, false );
			Old = new anxe_anotxexpeRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion anxe_anotxexpe

#region Area
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AreaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	

			public AreaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class AreaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Area : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Area";
	
		
		public AreaRow Dat;
		public AreaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Area( DataTable tab ) : base() 
		{
			_dbTableName = "Area";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AreaRow( _dst, false );
			Old = new AreaRow( _dst , true );
		}
		
		
		public Area( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Area";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AreaRow( _dst, false );
			Old = new AreaRow( _dst , true );
		}
				
		public Area( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Area() : base() 
		{
			Init();
		}
		
		public Area( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Area";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Area",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AreaRow( _dst, false );
			Old = new AreaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Area

#region Atencion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AtencionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Obs;	
			public Int_Field ClienteID;	
			public Int_Field AreaID;	
			public Int_Field TarjetaID;	

			public AtencionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				TarjetaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class AtencionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Atencion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Atencion";
	
		
		public AtencionRow Dat;
		public AtencionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Atencion( DataTable tab ) : base() 
		{
			_dbTableName = "Atencion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionRow( _dst, false );
			Old = new AtencionRow( _dst , true );
		}
		
		
		public Atencion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Atencion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionRow( _dst, false );
			Old = new AtencionRow( _dst , true );
		}
				
		public Atencion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Atencion() : base() 
		{
			Init();
		}
		
		public Atencion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Atencion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "TarjetaID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Atencion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionRow( _dst, false );
			Old = new AtencionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Atencion

#region AtencionesParaReclamos
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AtencionesParaReclamosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ClienteID;	
			public String_Field NombreCliente;	
			public String_Field Email;	
			public Boolean_Field Procesado;	

			public AtencionesParaReclamosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ClienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				NombreCliente		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Email		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Procesado		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class AtencionesParaReclamosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AtencionesParaReclamos : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AtencionesParaReclamos";
	
		
		public AtencionesParaReclamosRow Dat;
		public AtencionesParaReclamosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AtencionesParaReclamos( DataTable tab ) : base() 
		{
			_dbTableName = "AtencionesParaReclamos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionesParaReclamosRow( _dst, false );
			Old = new AtencionesParaReclamosRow( _dst , true );
		}
		
		
		public AtencionesParaReclamos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AtencionesParaReclamos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionesParaReclamosRow( _dst, false );
			Old = new AtencionesParaReclamosRow( _dst , true );
		}
				
		public AtencionesParaReclamos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AtencionesParaReclamos() : base() 
		{
			Init();
		}
		
		public AtencionesParaReclamos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AtencionesParaReclamos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "NombreCliente", typeof( String ) );  
			_dt.Columns.Add( "Email", typeof( String ) );  
			_dt.Columns.Add( "Procesado", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ClienteID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AtencionesParaReclamos",_dt.Columns["ClienteID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionesParaReclamosRow( _dst, false );
			Old = new AtencionesParaReclamosRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AtencionesParaReclamos

#region AtencionxMarca
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AtencionxMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaID;	
			public Int_Field AtencionID;	

			public AtencionxMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class AtencionxMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AtencionxMarca : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AtencionxMarca";
	
		
		public AtencionxMarcaRow Dat;
		public AtencionxMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AtencionxMarca( DataTable tab ) : base() 
		{
			_dbTableName = "AtencionxMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionxMarcaRow( _dst, false );
			Old = new AtencionxMarcaRow( _dst , true );
		}
		
		
		public AtencionxMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AtencionxMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionxMarcaRow( _dst, false );
			Old = new AtencionxMarcaRow( _dst , true );
		}
				
		public AtencionxMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AtencionxMarca() : base() 
		{
			Init();
		}
		
		public AtencionxMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AtencionxMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AtencionxMarca",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionxMarcaRow( _dst, false );
			Old = new AtencionxMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AtencionxMarca

#region AtencionXVia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AtencionXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AtencionID;	
			public Int_Field ViaID;	
			public String_Field Descrip;	

			public AtencionXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class AtencionXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AtencionXVia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AtencionXVia";
	
		
		public AtencionXViaRow Dat;
		public AtencionXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AtencionXVia( DataTable tab ) : base() 
		{
			_dbTableName = "AtencionXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionXViaRow( _dst, false );
			Old = new AtencionXViaRow( _dst , true );
		}
		
		
		public AtencionXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AtencionXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionXViaRow( _dst, false );
			Old = new AtencionXViaRow( _dst , true );
		}
				
		public AtencionXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AtencionXVia() : base() 
		{
			Init();
		}
		
		public AtencionXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AtencionXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AtencionXVia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AtencionXViaRow( _dst, false );
			Old = new AtencionXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AtencionXVia

#region Aviso
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AvisoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaAviso;	
			public Boolean_Field Pendiente;	
			public String_Field Asunto;	
			public String_Field Contenido;	
			public Int_Field Remitente;	
			public Int_Field Destinatario;	
			public String_Field Indicaciones;	
			public Boolean_Field Leido;	
			public Int_Field PrioridadID;	

			public AvisoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				FechaAviso		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				Pendiente		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				Asunto		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Contenido		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Remitente		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Destinatario		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Indicaciones		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Leido		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				PrioridadID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class AvisoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Aviso : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Aviso";
	
		
		public AvisoRow Dat;
		public AvisoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Aviso( DataTable tab ) : base() 
		{
			_dbTableName = "Aviso";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoRow( _dst, false );
			Old = new AvisoRow( _dst , true );
		}
		
		
		public Aviso( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Aviso";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoRow( _dst, false );
			Old = new AvisoRow( _dst , true );
		}
				
		public Aviso( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Aviso() : base() 
		{
			Init();
		}
		
		public Aviso( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Aviso";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaAviso", typeof( DateTime ) );  
			_dt.Columns.Add( "Pendiente", typeof( Boolean ) );  
			_dt.Columns.Add( "Asunto", typeof( String ) );  
			_dt.Columns.Add( "Contenido", typeof( String ) );  
			_dt.Columns.Add( "Remitente", typeof( int ) );  
			_dt.Columns.Add( "Destinatario", typeof( int ) );  
			_dt.Columns.Add( "Indicaciones", typeof( String ) );  
			_dt.Columns.Add( "Leido", typeof( Boolean ) );  
			_dt.Columns.Add( "PrioridadID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Aviso",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoRow( _dst, false );
			Old = new AvisoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Aviso

#region AvisoInstruccion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AvisoInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field InstruccionTipoID;	
			public String_Field Obs;	
			public DateTime_Field FecAlta;	
			public Int_Field CorrespondenciaID;	
			public Int_Field FuncionarioRegID;	
			public Int_Field FuncionarioRecID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	

			public AvisoInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FuncionarioRecID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class AvisoInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AvisoInstruccion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AvisoInstruccion";
	
		
		public AvisoInstruccionRow Dat;
		public AvisoInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AvisoInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "AvisoInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoInstruccionRow( _dst, false );
			Old = new AvisoInstruccionRow( _dst , true );
		}
		
		
		public AvisoInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AvisoInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoInstruccionRow( _dst, false );
			Old = new AvisoInstruccionRow( _dst , true );
		}
				
		public AvisoInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AvisoInstruccion() : base() 
		{
			Init();
		}
		
		public AvisoInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AvisoInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRecID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AvisoInstruccion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoInstruccionRow( _dst, false );
			Old = new AvisoInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AvisoInstruccion

#region AvisoOpoCab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AvisoOpoCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field VigilanciaDocID;	
			public Int_Field ModoEnvioID;	
			public Int_Field TipoAvisoID;	
			public Int_Field MarcaExtBaseID;	
			public Int_Field MarcaBaseID;	
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public DateTime_Field FecVencReal;	
			public DateTime_Field FecVenFict;	
			public DateTime_Field FecGen;	
			public DateTime_Field FecEnvio;	
			public Int_Field FuncionarioGenID;	
			public Int_Field FuncionarioEnvioID;	
			public String_Field Fax;	
			public String_Field MailTo;	
			public String_Field MailOrigen;	
			public String_Field Correo;	
			public String_Field Atencion;	
			public Int_Field IdiomaID;	
			public Int_Field BusOpoCabID;	
			public Int_Field AvisoOpoCabID;	
			public String_Field Estado;	
			public String_Field Propietario;	

			public AvisoOpoCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				VigilanciaDocID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaExtBaseID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				FecVencReal		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FecVenFict		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				FecGen		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioGenID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				FuncionarioEnvioID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				MailTo		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				Atencion		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BusOpoCabID		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				AvisoOpoCabID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class AvisoOpoCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AvisoOpoCab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AvisoOpoCab";
	
		
		public AvisoOpoCabRow Dat;
		public AvisoOpoCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AvisoOpoCab( DataTable tab ) : base() 
		{
			_dbTableName = "AvisoOpoCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoOpoCabRow( _dst, false );
			Old = new AvisoOpoCabRow( _dst , true );
		}
		
		
		public AvisoOpoCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AvisoOpoCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoOpoCabRow( _dst, false );
			Old = new AvisoOpoCabRow( _dst , true );
		}
				
		public AvisoOpoCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AvisoOpoCab() : base() 
		{
			Init();
		}
		
		public AvisoOpoCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AvisoOpoCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "VigilanciaDocID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaExtBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "FecVencReal", typeof( DateTime ) );  
			_dt.Columns.Add( "FecVenFict", typeof( DateTime ) );  
			_dt.Columns.Add( "FecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "MailTo", typeof( String ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Atencion", typeof( String ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AvisoOpoCab",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoOpoCabRow( _dst, false );
			Old = new AvisoOpoCabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AvisoOpoCab

#region AvisoOpoDet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class AvisoOpoDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	
			public Int_Field AvisoOpoCabID;	
			public Int_Field Chance;	
			public Int_Field MarcaSolID;	
			public Int_Field MarcaSolHistID;	
			public Int_Field MarcaBaseHistID;	

			public AvisoOpoDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AvisoOpoCabID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Chance		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MarcaSolID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaSolHistID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				MarcaBaseHistID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class AvisoOpoDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class AvisoOpoDet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "AvisoOpoDet";
	
		
		public AvisoOpoDetRow Dat;
		public AvisoOpoDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public AvisoOpoDet( DataTable tab ) : base() 
		{
			_dbTableName = "AvisoOpoDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoOpoDetRow( _dst, false );
			Old = new AvisoOpoDetRow( _dst , true );
		}
		
		
		public AvisoOpoDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "AvisoOpoDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoOpoDetRow( _dst, false );
			Old = new AvisoOpoDetRow( _dst , true );
		}
				
		public AvisoOpoDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public AvisoOpoDet() : base() 
		{
			Init();
		}
		
		public AvisoOpoDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "AvisoOpoDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "Chance", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_AvisoOpoDet",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new AvisoOpoDetRow( _dst, false );
			Old = new AvisoOpoDetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion AvisoOpoDet

#region axe_actuacionxexpe
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class axe_actuacionxexpeRow 
		{
			private  DSTab _dst;
			
			public Int_Field axe_actuacionxexpeid;	
			public Int_Field axe_expedienteoposicionid;	
			public Int_Field axe_tipoactuacionid;	
			public String_Field axe_observacion;	
			public Int_Field axe_gestorid;	
			public DateTime_Field axe_fecha;	
			public DateTime_Field axe_fecvencim;	

			public axe_actuacionxexpeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				axe_actuacionxexpeid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				axe_expedienteoposicionid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				axe_tipoactuacionid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				axe_observacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				axe_gestorid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				axe_fecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				axe_fecvencim		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class axe_actuacionxexpeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class axe_actuacionxexpe : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "axe_actuacionxexpe";
	
		
		public axe_actuacionxexpeRow Dat;
		public axe_actuacionxexpeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public axe_actuacionxexpe( DataTable tab ) : base() 
		{
			_dbTableName = "axe_actuacionxexpe";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new axe_actuacionxexpeRow( _dst, false );
			Old = new axe_actuacionxexpeRow( _dst , true );
		}
		
		
		public axe_actuacionxexpe( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "axe_actuacionxexpe";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new axe_actuacionxexpeRow( _dst, false );
			Old = new axe_actuacionxexpeRow( _dst , true );
		}
				
		public axe_actuacionxexpe( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public axe_actuacionxexpe() : base() 
		{
			Init();
		}
		
		public axe_actuacionxexpe( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "axe_actuacionxexpe";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "axe_actuacionxexpeid", typeof( int ) );  
			_dt.Columns.Add( "axe_expedienteoposicionid", typeof( int ) );  
			_dt.Columns.Add( "axe_tipoactuacionid", typeof( int ) );  
			_dt.Columns.Add( "axe_observacion", typeof( String ) );  
			_dt.Columns.Add( "axe_gestorid", typeof( int ) );  
			_dt.Columns.Add( "axe_fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "axe_fecvencim", typeof( DateTime ) );  
			
			

			
			_dt.Columns["axe_actuacionxexpeid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_axe_actuacionxexpe",_dt.Columns["axe_actuacionxexpeid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new axe_actuacionxexpeRow( _dst, false );
			Old = new axe_actuacionxexpeRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion axe_actuacionxexpe

#region ba_banco
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ba_bancoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ba_bancoid;	
			public String_Field ba_descripcion;	
			public Int_Field ba_paisid;	
			public Int_Field ba_ciudadid;	

			public ba_bancoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ba_bancoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ba_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ba_paisid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ba_ciudadid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ba_bancoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ba_banco : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ba_banco";
	
		
		public ba_bancoRow Dat;
		public ba_bancoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ba_banco( DataTable tab ) : base() 
		{
			_dbTableName = "ba_banco";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ba_bancoRow( _dst, false );
			Old = new ba_bancoRow( _dst , true );
		}
		
		
		public ba_banco( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ba_banco";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ba_bancoRow( _dst, false );
			Old = new ba_bancoRow( _dst , true );
		}
				
		public ba_banco( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ba_banco() : base() 
		{
			Init();
		}
		
		public ba_banco( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ba_banco";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ba_bancoid", typeof( int ) );  
			_dt.Columns.Add( "ba_descripcion", typeof( String ) );  
			_dt.Columns.Add( "ba_paisid", typeof( int ) );  
			_dt.Columns.Add( "ba_ciudadid", typeof( int ) );  
			
			

			
			_dt.Columns["ba_bancoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ba_banco",_dt.Columns["ba_bancoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ba_bancoRow( _dst, false );
			Old = new ba_bancoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ba_banco

#region Boletin
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BoletinRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public String_Field Complemento;	
			public DateTime_Field Fecha;	
			public String_Field Boletin;	

			public BoletinRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Complemento		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Boletin		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class BoletinRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Boletin : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Boletin";
	
		
		public BoletinRow Dat;
		public BoletinRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Boletin( DataTable tab ) : base() 
		{
			_dbTableName = "Boletin";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinRow( _dst, false );
			Old = new BoletinRow( _dst , true );
		}
		
		
		public Boletin( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Boletin";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinRow( _dst, false );
			Old = new BoletinRow( _dst , true );
		}
				
		public Boletin( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Boletin() : base() 
		{
			Init();
		}
		
		public Boletin( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Boletin";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Complemento", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Boletin", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Boletin",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinRow( _dst, false );
			Old = new BoletinRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Boletin

#region BoletinDet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BoletinDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field BoletinID;	
			public DateTime_Field SolicitudFecha;	
			public Int_Field ExpNro;	
			public Int_Field ExpAnio;	
			public String_Field Clase;	
			public String_Field MarcaTipo;	
			public String_Field Tramite;	
			public String_Field Denominacion;	
			public String_Field Propietario;	
			public String_Field Pais;	
			public String_Field AgenteLocal;	
			public Int_Field RefNro;	
			public Int_Field RefAnio;	
			public Int_Field RefRegNro;	
			public Int_Field RefRegAnio;	
			public String_Field Obs;	
			public Boolean_Field Enlazado;	
			public Boolean_Field Incorporado;	
			public Int_Field ExpedienteID;	
			public Int_Field BolAnio;	
			public Int_Field BolNro;	
			public Boolean_Field Importado;	
			public Boolean_Field Completo;	

			public BoletinDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BoletinID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SolicitudFecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				ExpNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Pais		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				AgenteLocal		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				RefNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				RefAnio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				RefRegNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RefRegAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Enlazado		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Incorporado		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Importado		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				Completo		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class BoletinDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class BoletinDet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "BoletinDet";
	
		
		public BoletinDetRow Dat;
		public BoletinDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public BoletinDet( DataTable tab ) : base() 
		{
			_dbTableName = "BoletinDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinDetRow( _dst, false );
			Old = new BoletinDetRow( _dst , true );
		}
		
		
		public BoletinDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "BoletinDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinDetRow( _dst, false );
			Old = new BoletinDetRow( _dst , true );
		}
				
		public BoletinDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public BoletinDet() : base() 
		{
			Init();
		}
		
		public BoletinDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "BoletinDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "BoletinID", typeof( int ) );  
			_dt.Columns.Add( "SolicitudFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ExpNro", typeof( int ) );  
			_dt.Columns.Add( "ExpAnio", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Pais", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocal", typeof( String ) );  
			_dt.Columns.Add( "RefNro", typeof( int ) );  
			_dt.Columns.Add( "RefAnio", typeof( int ) );  
			_dt.Columns.Add( "RefRegNro", typeof( int ) );  
			_dt.Columns.Add( "RefRegAnio", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Enlazado", typeof( Boolean ) );  
			_dt.Columns.Add( "Incorporado", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "Importado", typeof( Boolean ) );  
			_dt.Columns.Add( "Completo", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_BoletinDet",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinDetRow( _dst, false );
			Old = new BoletinDetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion BoletinDet

#region BoletinLog
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BoletinLogRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field operacion;	
			public DateTime_Field fecha;	
			public Int_Field funcionarioID;	
			public Int_Field nproc;	
			public Int_Field nexclude;	
			public Int_Field nskip;	
			public String_Field obs;	
			public String_Field estado;	
			public String_Field filter;	

			public BoletinLogRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				operacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				funcionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				nproc		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				nexclude		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				nskip		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				estado		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				filter		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class BoletinLogRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class BoletinLog : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "BoletinLog";
	
		
		public BoletinLogRow Dat;
		public BoletinLogRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public BoletinLog( DataTable tab ) : base() 
		{
			_dbTableName = "BoletinLog";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinLogRow( _dst, false );
			Old = new BoletinLogRow( _dst , true );
		}
		
		
		public BoletinLog( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "BoletinLog";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinLogRow( _dst, false );
			Old = new BoletinLogRow( _dst , true );
		}
				
		public BoletinLog( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public BoletinLog() : base() 
		{
			Init();
		}
		
		public BoletinLog( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "BoletinLog";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "operacion", typeof( String ) );  
			_dt.Columns.Add( "fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioID", typeof( int ) );  
			_dt.Columns.Add( "nproc", typeof( int ) );  
			_dt.Columns.Add( "nexclude", typeof( int ) );  
			_dt.Columns.Add( "nskip", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "estado", typeof( String ) );  
			_dt.Columns.Add( "filter", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_BoletinLog",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BoletinLogRow( _dst, false );
			Old = new BoletinLogRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion BoletinLog

#region BusOpoCab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BusOpoCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public Int_Field BolCarpeta;	
			public String_Field Tipo;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecFin;	
			public String_Field Estado;	
			public Boolean_Field BusClaseRel;	
			public Int_Field BusPuntMin;	
			public String_Field Texto;	
			public Boolean_Field SepPatron;	
			public Int_Field Nivel;	
			public Boolean_Field BusClaseNoRel;	
			public Boolean_Field ExcluirAgenteNulo;	

			public BusOpoCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				BolCarpeta		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FecFin		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				BusClaseRel		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				BusPuntMin		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Texto		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				SepPatron		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Nivel		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				BusClaseNoRel		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				ExcluirAgenteNulo		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class BusOpoCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class BusOpoCab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "BusOpoCab";
	
		
		public BusOpoCabRow Dat;
		public BusOpoCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public BusOpoCab( DataTable tab ) : base() 
		{
			_dbTableName = "BusOpoCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoCabRow( _dst, false );
			Old = new BusOpoCabRow( _dst , true );
		}
		
		
		public BusOpoCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "BusOpoCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoCabRow( _dst, false );
			Old = new BusOpoCabRow( _dst , true );
		}
				
		public BusOpoCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public BusOpoCab() : base() 
		{
			Init();
		}
		
		public BusOpoCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "BusOpoCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolCarpeta", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecFin", typeof( DateTime ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "BusClaseRel", typeof( Boolean ) );  
			_dt.Columns.Add( "BusPuntMin", typeof( int ) );  
			_dt.Columns.Add( "Texto", typeof( String ) );  
			_dt.Columns.Add( "SepPatron", typeof( Boolean ) );  
			_dt.Columns.Add( "Nivel", typeof( int ) );  
			_dt.Columns.Add( "BusClaseNoRel", typeof( Boolean ) );  
			_dt.Columns.Add( "ExcluirAgenteNulo", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_BusOpoCab",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoCabRow( _dst, false );
			Old = new BusOpoCabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion BusOpoCab

#region BusOpoDet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BusOpoDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field BusOpoCabID;	
			public Int_Field BoletinDetID;	
			public String_Field Denominacion;	
			public Int_Field ClaseNro;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public DateTime_Field FecSol;	
			public String_Field Patrones;	
			public String_Field ClaseOpc;	
			public String_Field PatroFonetizado;	

			public BusOpoDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BusOpoCabID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				BoletinDetID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FecSol		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				Patrones		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ClaseOpc		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				PatroFonetizado		= new String_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class BusOpoDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class BusOpoDet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "BusOpoDet";
	
		
		public BusOpoDetRow Dat;
		public BusOpoDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public BusOpoDet( DataTable tab ) : base() 
		{
			_dbTableName = "BusOpoDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoDetRow( _dst, false );
			Old = new BusOpoDetRow( _dst , true );
		}
		
		
		public BusOpoDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "BusOpoDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoDetRow( _dst, false );
			Old = new BusOpoDetRow( _dst , true );
		}
				
		public BusOpoDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public BusOpoDet() : base() 
		{
			Init();
		}
		
		public BusOpoDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "BusOpoDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "BoletinDetID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "FecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "Patrones", typeof( String ) );  
			_dt.Columns.Add( "ClaseOpc", typeof( String ) );  
			_dt.Columns.Add( "PatroFonetizado", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_BusOpoDet",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoDetRow( _dst, false );
			Old = new BusOpoDetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion BusOpoDet

#region BusOpoRes
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BusOpoResRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field BusOpoDetID;	
			public Int_Field ExpedienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field ClaseNro;	
			public String_Field PatronFonetizado;	
			public String_Field SemejanzaDescrip;	
			public Int_Field Puntaje;	
			public String_Field PatronSerializado;	
			public String_Field PalabraFonetizada;	
			public String_Field PalabraSerializada;	
			public Int_Field MarcaExtID;	
			public Boolean_Field Seleccionado;	

			public BusOpoResRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BusOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				PatronFonetizado		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				SemejanzaDescrip		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Puntaje		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PatronSerializado		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				PalabraFonetizada		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				PalabraSerializada		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				MarcaExtID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Seleccionado		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class BusOpoResRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class BusOpoRes : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "BusOpoRes";
	
		
		public BusOpoResRow Dat;
		public BusOpoResRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public BusOpoRes( DataTable tab ) : base() 
		{
			_dbTableName = "BusOpoRes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoResRow( _dst, false );
			Old = new BusOpoResRow( _dst , true );
		}
		
		
		public BusOpoRes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "BusOpoRes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoResRow( _dst, false );
			Old = new BusOpoResRow( _dst , true );
		}
				
		public BusOpoRes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public BusOpoRes() : base() 
		{
			Init();
		}
		
		public BusOpoRes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "BusOpoRes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "PatronFonetizado", typeof( String ) );  
			_dt.Columns.Add( "SemejanzaDescrip", typeof( String ) );  
			_dt.Columns.Add( "Puntaje", typeof( int ) );  
			_dt.Columns.Add( "PatronSerializado", typeof( String ) );  
			_dt.Columns.Add( "PalabraFonetizada", typeof( String ) );  
			_dt.Columns.Add( "PalabraSerializada", typeof( String ) );  
			_dt.Columns.Add( "MarcaExtID", typeof( int ) );  
			_dt.Columns.Add( "Seleccionado", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_BusOpoRes",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BusOpoResRow( _dst, false );
			Old = new BusOpoResRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion BusOpoRes

#region BussinessUnit
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class BussinessUnitRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descripcion;	
			public Int_Field AtencionID;	
			public Int_Field ClienteID;	

			public BussinessUnitRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class BussinessUnitRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class BussinessUnit : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "BussinessUnit";
	
		
		public BussinessUnitRow Dat;
		public BussinessUnitRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public BussinessUnit( DataTable tab ) : base() 
		{
			_dbTableName = "BussinessUnit";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BussinessUnitRow( _dst, false );
			Old = new BussinessUnitRow( _dst , true );
		}
		
		
		public BussinessUnit( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "BussinessUnit";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BussinessUnitRow( _dst, false );
			Old = new BussinessUnitRow( _dst , true );
		}
				
		public BussinessUnit( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public BussinessUnit() : base() 
		{
			Init();
		}
		
		public BussinessUnit( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "BussinessUnit";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_BussinessUnit",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new BussinessUnitRow( _dst, false );
			Old = new BussinessUnitRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion BussinessUnit

#region ca_clienteantecedente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ca_clienteantecedenteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ca_clienteantecedentid;	
			public Int_Field ca_clienteid;	
			public Int_Field ca_tipoantecedenteid;	
			public Int_Field ca_tarifarioid;	
			public String_Field ca_observacion;	
			public String_Field ca_tipoantecedente;	
			public Int_Field ca_enviadopor;	
			public Int_Field ca_autorizadopor;	
			public DateTime_Field ca_fechaantecedente;	
			public Int_Field ca_cotizacioncabid;	
			public Int_Field ca_tramiteid;	
			public Int_Field ca_actaanio;	
			public Int_Field ca_actanro;	
			public Int_Field ca_registronro;	

			public ca_clienteantecedenteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ca_clienteantecedentid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ca_clienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ca_tipoantecedenteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ca_tarifarioid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ca_observacion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ca_tipoantecedente		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ca_enviadopor		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ca_autorizadopor		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ca_fechaantecedente		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				ca_cotizacioncabid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				ca_tramiteid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				ca_actaanio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ca_actanro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ca_registronro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class ca_clienteantecedenteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ca_clienteantecedente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ca_clienteantecedente";
	
		
		public ca_clienteantecedenteRow Dat;
		public ca_clienteantecedenteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ca_clienteantecedente( DataTable tab ) : base() 
		{
			_dbTableName = "ca_clienteantecedente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ca_clienteantecedenteRow( _dst, false );
			Old = new ca_clienteantecedenteRow( _dst , true );
		}
		
		
		public ca_clienteantecedente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ca_clienteantecedente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ca_clienteantecedenteRow( _dst, false );
			Old = new ca_clienteantecedenteRow( _dst , true );
		}
				
		public ca_clienteantecedente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ca_clienteantecedente() : base() 
		{
			Init();
		}
		
		public ca_clienteantecedente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ca_clienteantecedente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ca_clienteantecedentid", typeof( int ) );  
			_dt.Columns.Add( "ca_clienteid", typeof( int ) );  
			_dt.Columns.Add( "ca_tipoantecedenteid", typeof( int ) );  
			_dt.Columns.Add( "ca_tarifarioid", typeof( int ) );  
			_dt.Columns.Add( "ca_observacion", typeof( String ) );  
			_dt.Columns.Add( "ca_tipoantecedente", typeof( String ) );  
			_dt.Columns.Add( "ca_enviadopor", typeof( int ) );  
			_dt.Columns.Add( "ca_autorizadopor", typeof( int ) );  
			_dt.Columns.Add( "ca_fechaantecedente", typeof( DateTime ) );  
			_dt.Columns.Add( "ca_cotizacioncabid", typeof( int ) );  
			_dt.Columns.Add( "ca_tramiteid", typeof( int ) );  
			_dt.Columns.Add( "ca_actaanio", typeof( int ) );  
			_dt.Columns.Add( "ca_actanro", typeof( int ) );  
			_dt.Columns.Add( "ca_registronro", typeof( int ) );  
			
			

			
			_dt.Columns["ca_clienteantecedentid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ca_clienteantecedente",_dt.Columns["ca_clienteantecedentid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ca_clienteantecedenteRow( _dst, false );
			Old = new ca_clienteantecedenteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ca_clienteantecedente

#region CAgenteLocal
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CAgenteLocalRow 
		{
			private  DSTab _dst;
			
			public Int_Field idagloc;	
			public Int_Field identidad;	
			public Int_Field idestado;	
			public Int_Field nromatricula;	
			public String_Field obs;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public Int_Field GrupoID;	
			public Boolean_Field Nuestro;	
			public String_Field Iniciales;	

			public CAgenteLocalRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idagloc		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				identidad		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				idestado		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nromatricula		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				GrupoID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Nuestro		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				Iniciales		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class CAgenteLocalRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CAgenteLocal : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CAgenteLocal";
	
		
		public CAgenteLocalRow Dat;
		public CAgenteLocalRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CAgenteLocal( DataTable tab ) : base() 
		{
			_dbTableName = "CAgenteLocal";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAgenteLocalRow( _dst, false );
			Old = new CAgenteLocalRow( _dst , true );
		}
		
		
		public CAgenteLocal( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CAgenteLocal";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAgenteLocalRow( _dst, false );
			Old = new CAgenteLocalRow( _dst , true );
		}
				
		public CAgenteLocal( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CAgenteLocal() : base() 
		{
			Init();
		}
		
		public CAgenteLocal( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CAgenteLocal";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idagloc", typeof( int ) );  
			_dt.Columns.Add( "identidad", typeof( int ) );  
			_dt.Columns.Add( "idestado", typeof( int ) );  
			_dt.Columns.Add( "nromatricula", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "GrupoID", typeof( int ) );  
			_dt.Columns.Add( "Nuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "Iniciales", typeof( String ) );  
			
			

			
			_dt.Columns["idagloc"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CAgenteLocal",_dt.Columns["idagloc"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAgenteLocalRow( _dst, false );
			Old = new CAgenteLocalRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CAgenteLocal

#region CAgenteLocalXVia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CAgenteLocalXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field IDAgLoc;	
			public Int_Field ViaID;	
			public String_Field Descrip;	

			public CAgenteLocalXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				IDAgLoc		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class CAgenteLocalXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CAgenteLocalXVia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CAgenteLocalXVia";
	
		
		public CAgenteLocalXViaRow Dat;
		public CAgenteLocalXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CAgenteLocalXVia( DataTable tab ) : base() 
		{
			_dbTableName = "CAgenteLocalXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAgenteLocalXViaRow( _dst, false );
			Old = new CAgenteLocalXViaRow( _dst , true );
		}
		
		
		public CAgenteLocalXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CAgenteLocalXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAgenteLocalXViaRow( _dst, false );
			Old = new CAgenteLocalXViaRow( _dst , true );
		}
				
		public CAgenteLocalXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CAgenteLocalXVia() : base() 
		{
			Init();
		}
		
		public CAgenteLocalXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CAgenteLocalXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "IDAgLoc", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CAgenteLocalXVia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAgenteLocalXViaRow( _dst, false );
			Old = new CAgenteLocalXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CAgenteLocalXVia

#region CArea
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CAreaRow 
		{
			private  DSTab _dst;
			
			public Int_Field idarea;	
			public Int_Field idestado;	
			public String_Field descrip;	
			public String_Field abrev;	
			public Boolean_Field nuestra;	
			public String_Field patharea;	
			public String_Field portal;	
			public String_Field emaildistrib;	

			public CAreaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idarea		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				idestado		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				nuestra		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				patharea		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				portal		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				emaildistrib		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class CAreaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CArea : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CArea";
	
		
		public CAreaRow Dat;
		public CAreaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CArea( DataTable tab ) : base() 
		{
			_dbTableName = "CArea";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAreaRow( _dst, false );
			Old = new CAreaRow( _dst , true );
		}
		
		
		public CArea( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CArea";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAreaRow( _dst, false );
			Old = new CAreaRow( _dst , true );
		}
				
		public CArea( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CArea() : base() 
		{
			Init();
		}
		
		public CArea( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CArea";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idarea", typeof( int ) );  
			_dt.Columns.Add( "idestado", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "patharea", typeof( String ) );  
			_dt.Columns.Add( "portal", typeof( String ) );  
			_dt.Columns.Add( "emaildistrib", typeof( String ) );  
			
			

			
			_dt.Columns["idarea"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CArea",_dt.Columns["idarea"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CAreaRow( _dst, false );
			Old = new CAreaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CArea

#region CategoriaFig
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CategoriaFigRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Categoria;	
			public String_Field Descripcion;	
			public String_Field Clave;	
			public String_Field Incluye;	
			public String_Field NoIncluye;	
			public String_Field Nota;	
			public Int_Field Nivel;	
			public Int_Field Orden;	
			public Int_Field CategoriaID;	

			public CategoriaFigRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Categoria		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Clave		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Incluye		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				NoIncluye		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Nota		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Nivel		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Orden		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				CategoriaID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class CategoriaFigRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CategoriaFig : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CategoriaFig";
	
		
		public CategoriaFigRow Dat;
		public CategoriaFigRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CategoriaFig( DataTable tab ) : base() 
		{
			_dbTableName = "CategoriaFig";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CategoriaFigRow( _dst, false );
			Old = new CategoriaFigRow( _dst , true );
		}
		
		
		public CategoriaFig( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CategoriaFig";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CategoriaFigRow( _dst, false );
			Old = new CategoriaFigRow( _dst , true );
		}
				
		public CategoriaFig( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CategoriaFig() : base() 
		{
			Init();
		}
		
		public CategoriaFig( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CategoriaFig";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Categoria", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "Clave", typeof( String ) );  
			_dt.Columns.Add( "Incluye", typeof( String ) );  
			_dt.Columns.Add( "NoIncluye", typeof( String ) );  
			_dt.Columns.Add( "Nota", typeof( String ) );  
			_dt.Columns.Add( "Nivel", typeof( int ) );  
			_dt.Columns.Add( "Orden", typeof( int ) );  
			_dt.Columns.Add( "CategoriaID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CategoriaFig",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CategoriaFigRow( _dst, false );
			Old = new CategoriaFigRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CategoriaFig

#region cb_cuentabanco
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cb_cuentabancoRow 
		{
			private  DSTab _dst;
			
			public Int_Field cb_cuentabancoid;	
			public Int_Field cb_bancoid;	
			public String_Field cb_nrocuenta;	
			public Int_Field cb_monedaid;	
			public String_Field cb_descripcion;	
			public Decimal_Field cb_saldo;	
			public Boolean_Field cb_escuentapago;	
			public String_Field cb_sello;	
			public String_Field cb_color;	

			public cb_cuentabancoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cb_cuentabancoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cb_bancoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cb_nrocuenta		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				cb_monedaid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				cb_descripcion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				cb_saldo		= new Decimal_Field(	_dst, 5, IsOldDataVersion  );	
				cb_escuentapago		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				cb_sello		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				cb_color		= new String_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class cb_cuentabancoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cb_cuentabanco : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cb_cuentabanco";
	
		
		public cb_cuentabancoRow Dat;
		public cb_cuentabancoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cb_cuentabanco( DataTable tab ) : base() 
		{
			_dbTableName = "cb_cuentabanco";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cb_cuentabancoRow( _dst, false );
			Old = new cb_cuentabancoRow( _dst , true );
		}
		
		
		public cb_cuentabanco( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cb_cuentabanco";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cb_cuentabancoRow( _dst, false );
			Old = new cb_cuentabancoRow( _dst , true );
		}
				
		public cb_cuentabanco( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cb_cuentabanco() : base() 
		{
			Init();
		}
		
		public cb_cuentabanco( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cb_cuentabanco";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cb_cuentabancoid", typeof( int ) );  
			_dt.Columns.Add( "cb_bancoid", typeof( int ) );  
			_dt.Columns.Add( "cb_nrocuenta", typeof( String ) );  
			_dt.Columns.Add( "cb_monedaid", typeof( int ) );  
			_dt.Columns.Add( "cb_descripcion", typeof( String ) );  
			_dt.Columns.Add( "cb_saldo", typeof( Decimal ) );  
			_dt.Columns.Add( "cb_escuentapago", typeof( Boolean ) );  
			_dt.Columns.Add( "cb_sello", typeof( String ) );  
			_dt.Columns.Add( "cb_color", typeof( String ) );  
			
			

			
			_dt.Columns["cb_cuentabancoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cb_cuentabanco",_dt.Columns["cb_cuentabancoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cb_cuentabancoRow( _dst, false );
			Old = new cb_cuentabancoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cb_cuentabanco

#region cc_cotizacioncab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cc_cotizacioncabRow 
		{
			private  DSTab _dst;
			
			public Int_Field cc_cotizacioncabid;	
			public Int_Field cc_expedienteid;	
			public DateTime_Field cc_fecha;	
			public Int_Field cc_aprobadopor;	
			public Int_Field cc_solicitadopor;	
			public Boolean_Field cc_confirmado;	
			public String_Field cc_observacion;	
			public Boolean_Field cc_esduplicado;	
			public Int_Field cc_recargoatmonedaid;	
			public Decimal_Field cc_recargoatmonto;	

			public cc_cotizacioncabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cc_cotizacioncabid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cc_expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cc_fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				cc_aprobadopor		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				cc_solicitadopor		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				cc_confirmado		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				cc_observacion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				cc_esduplicado		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				cc_recargoatmonedaid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				cc_recargoatmonto		= new Decimal_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class cc_cotizacioncabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cc_cotizacioncab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cc_cotizacioncab";
	
		
		public cc_cotizacioncabRow Dat;
		public cc_cotizacioncabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cc_cotizacioncab( DataTable tab ) : base() 
		{
			_dbTableName = "cc_cotizacioncab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cc_cotizacioncabRow( _dst, false );
			Old = new cc_cotizacioncabRow( _dst , true );
		}
		
		
		public cc_cotizacioncab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cc_cotizacioncab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cc_cotizacioncabRow( _dst, false );
			Old = new cc_cotizacioncabRow( _dst , true );
		}
				
		public cc_cotizacioncab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cc_cotizacioncab() : base() 
		{
			Init();
		}
		
		public cc_cotizacioncab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cc_cotizacioncab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cc_cotizacioncabid", typeof( int ) );  
			_dt.Columns.Add( "cc_expedienteid", typeof( int ) );  
			_dt.Columns.Add( "cc_fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "cc_aprobadopor", typeof( int ) );  
			_dt.Columns.Add( "cc_solicitadopor", typeof( int ) );  
			_dt.Columns.Add( "cc_confirmado", typeof( Boolean ) );  
			_dt.Columns.Add( "cc_observacion", typeof( String ) );  
			_dt.Columns.Add( "cc_esduplicado", typeof( Boolean ) );  
			_dt.Columns.Add( "cc_recargoatmonedaid", typeof( int ) );  
			_dt.Columns.Add( "cc_recargoatmonto", typeof( Decimal ) );  
			
			

			
			_dt.Columns["cc_cotizacioncabid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cc_cotizacioncab",_dt.Columns["cc_cotizacioncabid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cc_cotizacioncabRow( _dst, false );
			Old = new cc_cotizacioncabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cc_cotizacioncab

#region CCiudad
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CCiudadRow 
		{
			private  DSTab _dst;
			
			public Int_Field idciudad;	
			public String_Field nombreve;	
			public String_Field nomciudad;	
			public Int_Field codciudad;	
			public Int_Field idpais;	

			public CCiudadRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idciudad		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nombreve		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				nomciudad		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				codciudad		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				idpais		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class CCiudadRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CCiudad : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CCiudad";
	
		
		public CCiudadRow Dat;
		public CCiudadRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CCiudad( DataTable tab ) : base() 
		{
			_dbTableName = "CCiudad";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CCiudadRow( _dst, false );
			Old = new CCiudadRow( _dst , true );
		}
		
		
		public CCiudad( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CCiudad";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CCiudadRow( _dst, false );
			Old = new CCiudadRow( _dst , true );
		}
				
		public CCiudad( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CCiudad() : base() 
		{
			Init();
		}
		
		public CCiudad( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CCiudad";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idciudad", typeof( int ) );  
			_dt.Columns.Add( "nombreve", typeof( String ) );  
			_dt.Columns.Add( "nomciudad", typeof( String ) );  
			_dt.Columns.Add( "codciudad", typeof( int ) );  
			_dt.Columns.Add( "idpais", typeof( int ) );  
			
			

			
			_dt.Columns["idciudad"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CCiudad",_dt.Columns["idciudad"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CCiudadRow( _dst, false );
			Old = new CCiudadRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CCiudad

#region ccm_conclictamoneda
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ccm_conclictamonedaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ccm_conclictamonedaid;	
			public String_Field ccm_tiporelacion;	
			public Int_Field ccm_monedaid;	
			public Int_Field ccm_concliid;	
			public Int_Field ccm_cuentabancoid;	

			public ccm_conclictamonedaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ccm_conclictamonedaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ccm_tiporelacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ccm_monedaid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ccm_concliid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ccm_cuentabancoid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class ccm_conclictamonedaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ccm_conclictamoneda : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ccm_conclictamoneda";
	
		
		public ccm_conclictamonedaRow Dat;
		public ccm_conclictamonedaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ccm_conclictamoneda( DataTable tab ) : base() 
		{
			_dbTableName = "ccm_conclictamoneda";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ccm_conclictamonedaRow( _dst, false );
			Old = new ccm_conclictamonedaRow( _dst , true );
		}
		
		
		public ccm_conclictamoneda( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ccm_conclictamoneda";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ccm_conclictamonedaRow( _dst, false );
			Old = new ccm_conclictamonedaRow( _dst , true );
		}
				
		public ccm_conclictamoneda( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ccm_conclictamoneda() : base() 
		{
			Init();
		}
		
		public ccm_conclictamoneda( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ccm_conclictamoneda";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ccm_conclictamonedaid", typeof( int ) );  
			_dt.Columns.Add( "ccm_tiporelacion", typeof( String ) );  
			_dt.Columns.Add( "ccm_monedaid", typeof( int ) );  
			_dt.Columns.Add( "ccm_concliid", typeof( int ) );  
			_dt.Columns.Add( "ccm_cuentabancoid", typeof( int ) );  
			
			

			
			_dt.Columns["ccm_conclictamonedaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ccm_conclictamoneda",_dt.Columns["ccm_conclictamonedaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ccm_conclictamonedaRow( _dst, false );
			Old = new ccm_conclictamonedaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ccm_conclictamoneda

#region cct_cierrecuenta
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cct_cierrecuentaRow 
		{
			private  DSTab _dst;
			
			public Int_Field cct_cierrecuentaid;	
			public Int_Field cct_cuentabancoid;	
			public Int_Field cct_cierremovimientoid;	
			public Decimal_Field cct_saldo;	

			public cct_cierrecuentaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cct_cierrecuentaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cct_cuentabancoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cct_cierremovimientoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				cct_saldo		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class cct_cierrecuentaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cct_cierrecuenta : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cct_cierrecuenta";
	
		
		public cct_cierrecuentaRow Dat;
		public cct_cierrecuentaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cct_cierrecuenta( DataTable tab ) : base() 
		{
			_dbTableName = "cct_cierrecuenta";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cct_cierrecuentaRow( _dst, false );
			Old = new cct_cierrecuentaRow( _dst , true );
		}
		
		
		public cct_cierrecuenta( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cct_cierrecuenta";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cct_cierrecuentaRow( _dst, false );
			Old = new cct_cierrecuentaRow( _dst , true );
		}
				
		public cct_cierrecuenta( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cct_cierrecuenta() : base() 
		{
			Init();
		}
		
		public cct_cierrecuenta( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cct_cierrecuenta";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cct_cierrecuentaid", typeof( int ) );  
			_dt.Columns.Add( "cct_cuentabancoid", typeof( int ) );  
			_dt.Columns.Add( "cct_cierremovimientoid", typeof( int ) );  
			_dt.Columns.Add( "cct_saldo", typeof( Decimal ) );  
			
			

			
			_dt.Columns["cct_cierrecuentaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cct_cierrecuenta",_dt.Columns["cct_cierrecuentaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cct_cierrecuentaRow( _dst, false );
			Old = new cct_cierrecuentaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cct_cierrecuenta

#region CEstado
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CEstadoRow 
		{
			private  DSTab _dst;
			
			public Int_Field idestado;	
			public String_Field descrip;	

			public CEstadoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idestado		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class CEstadoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CEstado : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CEstado";
	
		
		public CEstadoRow Dat;
		public CEstadoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CEstado( DataTable tab ) : base() 
		{
			_dbTableName = "CEstado";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CEstadoRow( _dst, false );
			Old = new CEstadoRow( _dst , true );
		}
		
		
		public CEstado( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CEstado";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CEstadoRow( _dst, false );
			Old = new CEstadoRow( _dst , true );
		}
				
		public CEstado( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CEstado() : base() 
		{
			Init();
		}
		
		public CEstado( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CEstado";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idestado", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			
			

			
			_dt.Columns["idestado"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CEstado",_dt.Columns["idestado"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CEstadoRow( _dst, false );
			Old = new CEstadoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CEstado

#region ch_clientehistorico
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ch_clientehistoricoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ch_clientehistoricoid;	
			public Int_Field ch_clientenuevoid;	
			public Int_Field ch_clientedataflexid;	
			public String_Field ch_tarifashistoricas;	

			public ch_clientehistoricoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ch_clientehistoricoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ch_clientenuevoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ch_clientedataflexid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ch_tarifashistoricas		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ch_clientehistoricoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ch_clientehistorico : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ch_clientehistorico";
	
		
		public ch_clientehistoricoRow Dat;
		public ch_clientehistoricoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ch_clientehistorico( DataTable tab ) : base() 
		{
			_dbTableName = "ch_clientehistorico";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ch_clientehistoricoRow( _dst, false );
			Old = new ch_clientehistoricoRow( _dst , true );
		}
		
		
		public ch_clientehistorico( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ch_clientehistorico";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ch_clientehistoricoRow( _dst, false );
			Old = new ch_clientehistoricoRow( _dst , true );
		}
				
		public ch_clientehistorico( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ch_clientehistorico() : base() 
		{
			Init();
		}
		
		public ch_clientehistorico( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ch_clientehistorico";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ch_clientehistoricoid", typeof( int ) );  
			_dt.Columns.Add( "ch_clientenuevoid", typeof( int ) );  
			_dt.Columns.Add( "ch_clientedataflexid", typeof( int ) );  
			_dt.Columns.Add( "ch_tarifashistoricas", typeof( String ) );  
			
			

			
			_dt.Columns["ch_clientehistoricoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ch_clientehistorico",_dt.Columns["ch_clientehistoricoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ch_clientehistoricoRow( _dst, false );
			Old = new ch_clientehistoricoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ch_clientehistorico

#region CIdioma
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CIdiomaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ididioma;	
			public String_Field descrip;	
			public String_Field abrev;	

			public CIdiomaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ididioma		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class CIdiomaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CIdioma : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CIdioma";
	
		
		public CIdiomaRow Dat;
		public CIdiomaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CIdioma( DataTable tab ) : base() 
		{
			_dbTableName = "CIdioma";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CIdiomaRow( _dst, false );
			Old = new CIdiomaRow( _dst , true );
		}
		
		
		public CIdioma( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CIdioma";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CIdiomaRow( _dst, false );
			Old = new CIdiomaRow( _dst , true );
		}
				
		public CIdioma( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CIdioma() : base() 
		{
			Init();
		}
		
		public CIdioma( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CIdioma";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ididioma", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ididioma"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CIdioma",_dt.Columns["ididioma"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CIdiomaRow( _dst, false );
			Old = new CIdiomaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CIdioma



#region Clase
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClaseRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field NizaEdicionID;	
			public Int_Field ClaseTipoID;	
			public String_Field Descrip;	
			public String_Field DescripBreve;	
			public DateTime_Field lastUpdated;	

			public ClaseRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class ClaseRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Clase : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Clase";
	
		
		public ClaseRow Dat;
		public ClaseRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Clase( DataTable tab ) : base() 
		{
			_dbTableName = "Clase";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClaseRow( _dst, false );
			Old = new ClaseRow( _dst , true );
		}
		
		
		public Clase( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Clase";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClaseRow( _dst, false );
			Old = new ClaseRow( _dst , true );
		}
				
		public Clase( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Clase() : base() 
		{
			Init();
		}
		
		public Clase( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Clase";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "ClaseTipoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Clase",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClaseRow( _dst, false );
			Old = new ClaseRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Clase

#region Clase_Clase
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Clase_ClaseRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClaseID;	
			public Int_Field ClaseRelacID;	
			public Boolean_Field Ancestro;	
			public Boolean_Field Vigilancia;	

			public Clase_ClaseRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseRelacID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Ancestro		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				Vigilancia		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class Clase_ClaseRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Clase_Clase : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Clase_Clase";
	
		
		public Clase_ClaseRow Dat;
		public Clase_ClaseRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Clase_Clase( DataTable tab ) : base() 
		{
			_dbTableName = "Clase_Clase";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Clase_ClaseRow( _dst, false );
			Old = new Clase_ClaseRow( _dst , true );
		}
		
		
		public Clase_Clase( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Clase_Clase";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Clase_ClaseRow( _dst, false );
			Old = new Clase_ClaseRow( _dst , true );
		}
				
		public Clase_Clase( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Clase_Clase() : base() 
		{
			Init();
		}
		
		public Clase_Clase( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Clase_Clase";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseRelacID", typeof( int ) );  
			_dt.Columns.Add( "Ancestro", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilancia", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Clase_Clase",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Clase_ClaseRow( _dst, false );
			Old = new Clase_ClaseRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Clase_Clase

#region Clase_Idioma
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Clase_IdiomaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClaseID;	
			public Int_Field IdiomaID;	
			public String_Field Descrip;	
			public String_Field DescripBreve;	

			public Clase_IdiomaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class Clase_IdiomaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Clase_Idioma : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Clase_Idioma";
	
		
		public Clase_IdiomaRow Dat;
		public Clase_IdiomaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Clase_Idioma( DataTable tab ) : base() 
		{
			_dbTableName = "Clase_Idioma";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Clase_IdiomaRow( _dst, false );
			Old = new Clase_IdiomaRow( _dst , true );
		}
		
		
		public Clase_Idioma( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Clase_Idioma";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Clase_IdiomaRow( _dst, false );
			Old = new Clase_IdiomaRow( _dst , true );
		}
				
		public Clase_Idioma( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Clase_Idioma() : base() 
		{
			Init();
		}
		
		public Clase_Idioma( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Clase_Idioma";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Clase_Idioma",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Clase_IdiomaRow( _dst, false );
			Old = new Clase_IdiomaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Clase_Idioma

#region ClaseTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClaseTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public ClaseTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class ClaseTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ClaseTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ClaseTipo";
	
		
		public ClaseTipoRow Dat;
		public ClaseTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ClaseTipo( DataTable tab ) : base() 
		{
			_dbTableName = "ClaseTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClaseTipoRow( _dst, false );
			Old = new ClaseTipoRow( _dst , true );
		}
		
		
		public ClaseTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ClaseTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClaseTipoRow( _dst, false );
			Old = new ClaseTipoRow( _dst , true );
		}
				
		public ClaseTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ClaseTipo() : base() 
		{
			Init();
		}
		
		public ClaseTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ClaseTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ClaseTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClaseTipoRow( _dst, false );
			Old = new ClaseTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ClaseTipo

#region Cliente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Correo;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Boolean_Field Multiple;	
			public Int_Field GrupoEmpresarialID;	
			public Boolean_Field Activo;	
			public Boolean_Field TraduccionAuto;	
			public Int_Field CiudadID;	
			public Boolean_Field Inubicable;	
			public Int_Field Ddi;	
			public Boolean_Field PGeneral;	
			public Boolean_Field PIntelectual;	
			public Boolean_Field Distribuidor;	
			public Boolean_Field FacturaLocal;	
			public Int_Field TipoSistElectronicoID;	
			public DateTime_Field lastUpdated;	
			public Int_Field BancoID;	

			public ClienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Multiple		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				TraduccionAuto		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Inubicable		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Ddi		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PGeneral		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				PIntelectual		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				Distribuidor		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				FacturaLocal		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				TipoSistElectronicoID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 24, IsOldDataVersion  );	
				BancoID		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
			}
		} // end class ClienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Cliente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Cliente";
	
		
		public ClienteRow Dat;
		public ClienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Cliente( DataTable tab ) : base() 
		{
			_dbTableName = "Cliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteRow( _dst, false );
			Old = new ClienteRow( _dst , true );
		}
		
		
		public Cliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Cliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteRow( _dst, false );
			Old = new ClienteRow( _dst , true );
		}
				
		public Cliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Cliente() : base() 
		{
			Init();
		}
		
		public Cliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Cliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "TraduccionAuto", typeof( Boolean ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			_dt.Columns.Add( "Inubicable", typeof( Boolean ) );  
			_dt.Columns.Add( "Ddi", typeof( int ) );  
			_dt.Columns.Add( "PGeneral", typeof( Boolean ) );  
			_dt.Columns.Add( "PIntelectual", typeof( Boolean ) );  
			_dt.Columns.Add( "Distribuidor", typeof( Boolean ) );  
			_dt.Columns.Add( "FacturaLocal", typeof( Boolean ) );  
			_dt.Columns.Add( "TipoSistElectronicoID", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			_dt.Columns.Add( "BancoID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Cliente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteRow( _dst, false );
			Old = new ClienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Cliente

#region ClienteObs
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClienteObsRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field AreaID;	
			public String_Field Obs;	

			public ClienteObsRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ClienteObsRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ClienteObs : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ClienteObs";
	
		
		public ClienteObsRow Dat;
		public ClienteObsRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ClienteObs( DataTable tab ) : base() 
		{
			_dbTableName = "ClienteObs";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteObsRow( _dst, false );
			Old = new ClienteObsRow( _dst , true );
		}
		
		
		public ClienteObs( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ClienteObs";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteObsRow( _dst, false );
			Old = new ClienteObsRow( _dst , true );
		}
				
		public ClienteObs( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ClienteObs() : base() 
		{
			Init();
		}
		
		public ClienteObs( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ClienteObs";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ClienteObs",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteObsRow( _dst, false );
			Old = new ClienteObsRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ClienteObs

#region ClienteXTramite
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClienteXTramiteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field TramiteID;	
			public Int_Field ClienteMultipleID;	

			public ClienteXTramiteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteMultipleID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ClienteXTramiteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ClienteXTramite : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ClienteXTramite";
	
		
		public ClienteXTramiteRow Dat;
		public ClienteXTramiteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ClienteXTramite( DataTable tab ) : base() 
		{
			_dbTableName = "ClienteXTramite";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXTramiteRow( _dst, false );
			Old = new ClienteXTramiteRow( _dst , true );
		}
		
		
		public ClienteXTramite( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ClienteXTramite";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXTramiteRow( _dst, false );
			Old = new ClienteXTramiteRow( _dst , true );
		}
				
		public ClienteXTramite( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ClienteXTramite() : base() 
		{
			Init();
		}
		
		public ClienteXTramite( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ClienteXTramite";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteMultipleID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ClienteXTramite",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXTramiteRow( _dst, false );
			Old = new ClienteXTramiteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ClienteXTramite

#region ClienteXUsuario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClienteXUsuarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field UsuarioID;	

			public ClienteXUsuarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				UsuarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class ClienteXUsuarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ClienteXUsuario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ClienteXUsuario";
	
		
		public ClienteXUsuarioRow Dat;
		public ClienteXUsuarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ClienteXUsuario( DataTable tab ) : base() 
		{
			_dbTableName = "ClienteXUsuario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXUsuarioRow( _dst, false );
			Old = new ClienteXUsuarioRow( _dst , true );
		}
		
		
		public ClienteXUsuario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ClienteXUsuario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXUsuarioRow( _dst, false );
			Old = new ClienteXUsuarioRow( _dst , true );
		}
				
		public ClienteXUsuario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ClienteXUsuario() : base() 
		{
			Init();
		}
		
		public ClienteXUsuario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ClienteXUsuario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "UsuarioID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ClienteXUsuario",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXUsuarioRow( _dst, false );
			Old = new ClienteXUsuarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ClienteXUsuario

#region ClienteXVia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ClienteXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field ViaID;	
			public String_Field Descrip;	

			public ClienteXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ClienteXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ClienteXVia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ClienteXVia";
	
		
		public ClienteXViaRow Dat;
		public ClienteXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ClienteXVia( DataTable tab ) : base() 
		{
			_dbTableName = "ClienteXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXViaRow( _dst, false );
			Old = new ClienteXViaRow( _dst , true );
		}
		
		
		public ClienteXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ClienteXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXViaRow( _dst, false );
			Old = new ClienteXViaRow( _dst , true );
		}
				
		public ClienteXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ClienteXVia() : base() 
		{
			Init();
		}
		
		public ClienteXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ClienteXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ClienteXVia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ClienteXViaRow( _dst, false );
			Old = new ClienteXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ClienteXVia

#region cm_cierremovimiento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cm_cierremovimientoRow 
		{
			private  DSTab _dst;
			
			public Int_Field cm_cierremovid;	
			public Int_Field cm_mescierre;	
			public Int_Field cm_anhocierre;	
			public DateTime_Field cm_fechacierre;	

			public cm_cierremovimientoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cm_cierremovid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cm_mescierre		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cm_anhocierre		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				cm_fechacierre		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class cm_cierremovimientoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cm_cierremovimiento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cm_cierremovimiento";
	
		
		public cm_cierremovimientoRow Dat;
		public cm_cierremovimientoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cm_cierremovimiento( DataTable tab ) : base() 
		{
			_dbTableName = "cm_cierremovimiento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cm_cierremovimientoRow( _dst, false );
			Old = new cm_cierremovimientoRow( _dst , true );
		}
		
		
		public cm_cierremovimiento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cm_cierremovimiento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cm_cierremovimientoRow( _dst, false );
			Old = new cm_cierremovimientoRow( _dst , true );
		}
				
		public cm_cierremovimiento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cm_cierremovimiento() : base() 
		{
			Init();
		}
		
		public cm_cierremovimiento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cm_cierremovimiento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cm_cierremovid", typeof( int ) );  
			_dt.Columns.Add( "cm_mescierre", typeof( int ) );  
			_dt.Columns.Add( "cm_anhocierre", typeof( int ) );  
			_dt.Columns.Add( "cm_fechacierre", typeof( DateTime ) );  
			
			

			
			_dt.Columns["cm_cierremovid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cm_cierremovimiento",_dt.Columns["cm_cierremovid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cm_cierremovimientoRow( _dst, false );
			Old = new cm_cierremovimientoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cm_cierremovimiento

#region cm_cotizacionmoneda
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cm_cotizacionmonedaRow 
		{
			private  DSTab _dst;
			
			public Int_Field cm_cotizacionmonedaid;	
			public Int_Field cm_monedaid;	
			public DateTime_Field cm_fechacotizacion;	
			public Double_Field cm_relaciondolar;	
			public Decimal_Field cm_tipocambio;	

			public cm_cotizacionmonedaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cm_cotizacionmonedaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cm_monedaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cm_fechacotizacion		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				cm_relaciondolar		= new Double_Field(	_dst, 3, IsOldDataVersion  );	
				cm_tipocambio		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class cm_cotizacionmonedaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cm_cotizacionmoneda : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cm_cotizacionmoneda";
	
		
		public cm_cotizacionmonedaRow Dat;
		public cm_cotizacionmonedaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cm_cotizacionmoneda( DataTable tab ) : base() 
		{
			_dbTableName = "cm_cotizacionmoneda";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cm_cotizacionmonedaRow( _dst, false );
			Old = new cm_cotizacionmonedaRow( _dst , true );
		}
		
		
		public cm_cotizacionmoneda( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cm_cotizacionmoneda";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cm_cotizacionmonedaRow( _dst, false );
			Old = new cm_cotizacionmonedaRow( _dst , true );
		}
				
		public cm_cotizacionmoneda( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cm_cotizacionmoneda() : base() 
		{
			Init();
		}
		
		public cm_cotizacionmoneda( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cm_cotizacionmoneda";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cm_cotizacionmonedaid", typeof( int ) );  
			_dt.Columns.Add( "cm_monedaid", typeof( int ) );  
			_dt.Columns.Add( "cm_fechacotizacion", typeof( DateTime ) );  
			_dt.Columns.Add( "cm_relaciondolar", typeof( Double ) );  
			_dt.Columns.Add( "cm_tipocambio", typeof( Decimal ) );  
			
			

			
			_dt.Columns["cm_cotizacionmonedaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cm_cotizacionmoneda",_dt.Columns["cm_cotizacionmonedaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cm_cotizacionmonedaRow( _dst, false );
			Old = new cm_cotizacionmonedaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cm_cotizacionmoneda

#region cnd_controlnumdoc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cnd_controlnumdocRow 
		{
			private  DSTab _dst;
			
			public Int_Field cnd_controlnumdocid;	
			public Int_Field cnd_tipodocumentoid;	
			public Boolean_Field cnd_vigente;	
			public String_Field cnd_serie;	
			public Int_Field cnd_ultnro;	
			public String_Field cnd_timbrado;	
			public DateTime_Field cnd_fechavigdesde;	
			public DateTime_Field cnd_fechavighasta;	

			public cnd_controlnumdocRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cnd_controlnumdocid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cnd_tipodocumentoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cnd_vigente		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				cnd_serie		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				cnd_ultnro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				cnd_timbrado		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				cnd_fechavigdesde		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				cnd_fechavighasta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class cnd_controlnumdocRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cnd_controlnumdoc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cnd_controlnumdoc";
	
		
		public cnd_controlnumdocRow Dat;
		public cnd_controlnumdocRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cnd_controlnumdoc( DataTable tab ) : base() 
		{
			_dbTableName = "cnd_controlnumdoc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cnd_controlnumdocRow( _dst, false );
			Old = new cnd_controlnumdocRow( _dst , true );
		}
		
		
		public cnd_controlnumdoc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cnd_controlnumdoc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cnd_controlnumdocRow( _dst, false );
			Old = new cnd_controlnumdocRow( _dst , true );
		}
				
		public cnd_controlnumdoc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cnd_controlnumdoc() : base() 
		{
			Init();
		}
		
		public cnd_controlnumdoc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cnd_controlnumdoc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cnd_controlnumdocid", typeof( int ) );  
			_dt.Columns.Add( "cnd_tipodocumentoid", typeof( int ) );  
			_dt.Columns.Add( "cnd_vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "cnd_serie", typeof( String ) );  
			_dt.Columns.Add( "cnd_ultnro", typeof( int ) );  
			_dt.Columns.Add( "cnd_timbrado", typeof( String ) );  
			_dt.Columns.Add( "cnd_fechavigdesde", typeof( DateTime ) );  
			_dt.Columns.Add( "cnd_fechavighasta", typeof( DateTime ) );  
			
			

			
			_dt.Columns["cnd_controlnumdocid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cnd_controlnumdoc",_dt.Columns["cnd_controlnumdocid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cnd_controlnumdocRow( _dst, false );
			Old = new cnd_controlnumdocRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cnd_controlnumdoc

#region co_continente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class co_continenteRow 
		{
			private  DSTab _dst;
			
			public Int_Field co_continenteid;	
			public String_Field co_descripcion;	
			public Int_Field co_bancoid;	

			public co_continenteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				co_continenteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				co_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				co_bancoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class co_continenteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class co_continente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "co_continente";
	
		
		public co_continenteRow Dat;
		public co_continenteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public co_continente( DataTable tab ) : base() 
		{
			_dbTableName = "co_continente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new co_continenteRow( _dst, false );
			Old = new co_continenteRow( _dst , true );
		}
		
		
		public co_continente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "co_continente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new co_continenteRow( _dst, false );
			Old = new co_continenteRow( _dst , true );
		}
				
		public co_continente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public co_continente() : base() 
		{
			Init();
		}
		
		public co_continente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "co_continente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "co_continenteid", typeof( int ) );  
			_dt.Columns.Add( "co_descripcion", typeof( String ) );  
			_dt.Columns.Add( "co_bancoid", typeof( int ) );  
			
			

			
			_dt.Columns["co_continenteid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_co_continente",_dt.Columns["co_continenteid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new co_continenteRow( _dst, false );
			Old = new co_continenteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion co_continente

#region ConfigPresup
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ConfigPresupRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Anio;	
			public String_Field Serie;	
			public Int_Field Numero;	
			public Boolean_Field Vigente;	

			public ConfigPresupRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Serie		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Numero		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class ConfigPresupRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ConfigPresup : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ConfigPresup";
	
		
		public ConfigPresupRow Dat;
		public ConfigPresupRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ConfigPresup( DataTable tab ) : base() 
		{
			_dbTableName = "ConfigPresup";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ConfigPresupRow( _dst, false );
			Old = new ConfigPresupRow( _dst , true );
		}
		
		
		public ConfigPresup( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ConfigPresup";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ConfigPresupRow( _dst, false );
			Old = new ConfigPresupRow( _dst , true );
		}
				
		public ConfigPresup( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ConfigPresup() : base() 
		{
			Init();
		}
		
		public ConfigPresup( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ConfigPresup";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Serie", typeof( String ) );  
			_dt.Columns.Add( "Numero", typeof( int ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ConfigPresup",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ConfigPresupRow( _dst, false );
			Old = new ConfigPresupRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ConfigPresup

#region Congresos
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CongresosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descripcion;	

			public CongresosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class CongresosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Congresos : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Congresos";
	
		
		public CongresosRow Dat;
		public CongresosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Congresos( DataTable tab ) : base() 
		{
			_dbTableName = "Congresos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CongresosRow( _dst, false );
			Old = new CongresosRow( _dst , true );
		}
		
		
		public Congresos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Congresos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CongresosRow( _dst, false );
			Old = new CongresosRow( _dst , true );
		}
				
		public Congresos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Congresos() : base() 
		{
			Init();
		}
		
		public Congresos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Congresos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Congresos",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CongresosRow( _dst, false );
			Old = new CongresosRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Congresos

#region ControlReplicacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ControlReplicacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field NombreTabla;	
			public DateTime_Field FecUltAct;	

			public ControlReplicacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				NombreTabla		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FecUltAct		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class ControlReplicacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ControlReplicacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ControlReplicacion";
	
		
		public ControlReplicacionRow Dat;
		public ControlReplicacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ControlReplicacion( DataTable tab ) : base() 
		{
			_dbTableName = "ControlReplicacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ControlReplicacionRow( _dst, false );
			Old = new ControlReplicacionRow( _dst , true );
		}
		
		
		public ControlReplicacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ControlReplicacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ControlReplicacionRow( _dst, false );
			Old = new ControlReplicacionRow( _dst , true );
		}
				
		public ControlReplicacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ControlReplicacion() : base() 
		{
			Init();
		}
		
		public ControlReplicacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ControlReplicacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "NombreTabla", typeof( String ) );  
			_dt.Columns.Add( "FecUltAct", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ControlReplicacion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ControlReplicacionRow( _dst, false );
			Old = new ControlReplicacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ControlReplicacion

#region CorrespNro
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CorrespNroRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field nrodesde;	
			public Int_Field nrohasta;	
			public Boolean_Field vigente;	
			public DateTime_Field fechains;	
			public Int_Field funcionarioID;	
			public Int_Field IDArea;	

			public CorrespNroRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nrodesde		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				nrohasta		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				vigente		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				fechains		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				funcionarioID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				IDArea		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class CorrespNroRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CorrespNro : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CorrespNro";
	
		
		public CorrespNroRow Dat;
		public CorrespNroRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CorrespNro( DataTable tab ) : base() 
		{
			_dbTableName = "CorrespNro";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespNroRow( _dst, false );
			Old = new CorrespNroRow( _dst , true );
		}
		
		
		public CorrespNro( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CorrespNro";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespNroRow( _dst, false );
			Old = new CorrespNroRow( _dst , true );
		}
				
		public CorrespNro( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CorrespNro() : base() 
		{
			Init();
		}
		
		public CorrespNro( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CorrespNro";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "nrodesde", typeof( int ) );  
			_dt.Columns.Add( "nrohasta", typeof( int ) );  
			_dt.Columns.Add( "vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "fechains", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioID", typeof( int ) );  
			_dt.Columns.Add( "IDArea", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CorrespNro",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespNroRow( _dst, false );
			Old = new CorrespNroRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CorrespNro

#region Correspondencia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CorrespondenciaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Boolean_Field Entrante;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaCorresp;	
			public String_Field RefCorresp;	
			public Int_Field Identidad;	
			public Int_Field IdiniRecep;	
			public Int_Field Idvia;	
			public String_Field RefCliente;	
			public Int_Field PrioridadID;	
			public String_Field Obs;	
			public Int_Field ClienteID;	
			public Int_Field FuncionarioID;	
			public Boolean_Field Estado;	
			public Boolean_Field Facturable;	
			public Boolean_Field Acusado;	
			public Int_Field idarea;	
			public Boolean_Field documento;	
			public Boolean_Field renovacion;	

			public CorrespondenciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Entrante		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FechaCorresp		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				RefCorresp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Identidad		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				IdiniRecep		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Idvia		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				RefCliente		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				PrioridadID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Estado		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				Facturable		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Acusado		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				idarea		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				documento		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				renovacion		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
			}
		} // end class CorrespondenciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Correspondencia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Correspondencia";
	
		
		public CorrespondenciaRow Dat;
		public CorrespondenciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Correspondencia( DataTable tab ) : base() 
		{
			_dbTableName = "Correspondencia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespondenciaRow( _dst, false );
			Old = new CorrespondenciaRow( _dst , true );
		}
		
		
		public Correspondencia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Correspondencia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespondenciaRow( _dst, false );
			Old = new CorrespondenciaRow( _dst , true );
		}
				
		public Correspondencia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Correspondencia() : base() 
		{
			Init();
		}
		
		public Correspondencia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Correspondencia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Entrante", typeof( Boolean ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaCorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "RefCorresp", typeof( String ) );  
			_dt.Columns.Add( "Identidad", typeof( int ) );  
			_dt.Columns.Add( "IdiniRecep", typeof( int ) );  
			_dt.Columns.Add( "Idvia", typeof( int ) );  
			_dt.Columns.Add( "RefCliente", typeof( String ) );  
			_dt.Columns.Add( "PrioridadID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( Boolean ) );  
			_dt.Columns.Add( "Facturable", typeof( Boolean ) );  
			_dt.Columns.Add( "Acusado", typeof( Boolean ) );  
			_dt.Columns.Add( "idarea", typeof( int ) );  
			_dt.Columns.Add( "documento", typeof( Boolean ) );  
			_dt.Columns.Add( "renovacion", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Correspondencia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespondenciaRow( _dst, false );
			Old = new CorrespondenciaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Correspondencia

#region CorrespondenciaMov
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CorrespondenciaMovRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field CorrespondenciaID;	
			public Int_Field TrabajoTipoID;	
			public String_Field TrabajoTipo;	
			public DateTime_Field FechaAltaMov;	
			public Int_Field Idarea;	
			public Int_Field CodArea;	
			public Int_Field IdiniDistrib;	
			public Int_Field IdiniRespons;	
			public Int_Field IdiniProceso;	
			public DateTime_Field FechaAcuse;	
			public DateTime_Field FechaProceso;	
			public String_Field Obs;	

			public CorrespondenciaMovRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TrabajoTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TrabajoTipo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FechaAltaMov		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Idarea		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				CodArea		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				IdiniDistrib		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				IdiniRespons		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				IdiniProceso		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				FechaAcuse		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				FechaProceso		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class CorrespondenciaMovRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CorrespondenciaMov : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CorrespondenciaMov";
	
		
		public CorrespondenciaMovRow Dat;
		public CorrespondenciaMovRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CorrespondenciaMov( DataTable tab ) : base() 
		{
			_dbTableName = "CorrespondenciaMov";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespondenciaMovRow( _dst, false );
			Old = new CorrespondenciaMovRow( _dst , true );
		}
		
		
		public CorrespondenciaMov( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CorrespondenciaMov";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespondenciaMovRow( _dst, false );
			Old = new CorrespondenciaMovRow( _dst , true );
		}
				
		public CorrespondenciaMov( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CorrespondenciaMov() : base() 
		{
			Init();
		}
		
		public CorrespondenciaMov( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CorrespondenciaMov";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "TrabajoTipoID", typeof( int ) );  
			_dt.Columns.Add( "TrabajoTipo", typeof( String ) );  
			_dt.Columns.Add( "FechaAltaMov", typeof( DateTime ) );  
			_dt.Columns.Add( "Idarea", typeof( int ) );  
			_dt.Columns.Add( "CodArea", typeof( int ) );  
			_dt.Columns.Add( "IdiniDistrib", typeof( int ) );  
			_dt.Columns.Add( "IdiniRespons", typeof( int ) );  
			_dt.Columns.Add( "IdiniProceso", typeof( int ) );  
			_dt.Columns.Add( "FechaAcuse", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaProceso", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CorrespondenciaMov",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CorrespondenciaMovRow( _dst, false );
			Old = new CorrespondenciaMovRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CorrespondenciaMov

#region cp_cotizacionesxpresup
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cp_cotizacionesxpresupRow 
		{
			private  DSTab _dst;
			
			public Int_Field cp_cotipresupid;	
			public Int_Field cp_presupuestocabid;	
			public Int_Field cp_cotizacionid;	

			public cp_cotizacionesxpresupRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cp_cotipresupid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cp_presupuestocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cp_cotizacionid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class cp_cotizacionesxpresupRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cp_cotizacionesxpresup : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cp_cotizacionesxpresup";
	
		
		public cp_cotizacionesxpresupRow Dat;
		public cp_cotizacionesxpresupRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cp_cotizacionesxpresup( DataTable tab ) : base() 
		{
			_dbTableName = "cp_cotizacionesxpresup";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cp_cotizacionesxpresupRow( _dst, false );
			Old = new cp_cotizacionesxpresupRow( _dst , true );
		}
		
		
		public cp_cotizacionesxpresup( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cp_cotizacionesxpresup";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cp_cotizacionesxpresupRow( _dst, false );
			Old = new cp_cotizacionesxpresupRow( _dst , true );
		}
				
		public cp_cotizacionesxpresup( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cp_cotizacionesxpresup() : base() 
		{
			Init();
		}
		
		public cp_cotizacionesxpresup( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cp_cotizacionesxpresup";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cp_cotipresupid", typeof( int ) );  
			_dt.Columns.Add( "cp_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "cp_cotizacionid", typeof( int ) );  
			
			

			
			_dt.Columns["cp_cotipresupid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cp_cotizacionesxpresup",_dt.Columns["cp_cotipresupid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cp_cotizacionesxpresupRow( _dst, false );
			Old = new cp_cotizacionesxpresupRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cp_cotizacionesxpresup

#region CPais
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CPaisRow 
		{
			private  DSTab _dst;
			
			public Int_Field idpais;	
			public String_Field paisalfa;	
			public String_Field descrip;	
			public String_Field paistel;	
			public String_Field idbanco;	
			public String_Field abrev;	
			public Int_Field continenteid;	

			public CPaisRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idpais		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				paisalfa		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				paistel		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				idbanco		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				continenteid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class CPaisRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CPais : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CPais";
	
		
		public CPaisRow Dat;
		public CPaisRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CPais( DataTable tab ) : base() 
		{
			_dbTableName = "CPais";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CPaisRow( _dst, false );
			Old = new CPaisRow( _dst , true );
		}
		
		
		public CPais( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CPais";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CPaisRow( _dst, false );
			Old = new CPaisRow( _dst , true );
		}
				
		public CPais( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CPais() : base() 
		{
			Init();
		}
		
		public CPais( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CPais";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idpais", typeof( int ) );  
			_dt.Columns.Add( "paisalfa", typeof( String ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "paistel", typeof( String ) );  
			_dt.Columns.Add( "idbanco", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "continenteid", typeof( int ) );  
			
			

			
			_dt.Columns["idpais"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CPais",_dt.Columns["idpais"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CPaisRow( _dst, false );
			Old = new CPaisRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CPais

#region CPractica
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CPracticaRow 
		{
			private  DSTab _dst;
			
			public Int_Field idpractica;	
			public String_Field descrip;	
			public String_Field abrev;	

			public CPracticaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idpractica		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class CPracticaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CPractica : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CPractica";
	
		
		public CPracticaRow Dat;
		public CPracticaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CPractica( DataTable tab ) : base() 
		{
			_dbTableName = "CPractica";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CPracticaRow( _dst, false );
			Old = new CPracticaRow( _dst , true );
		}
		
		
		public CPractica( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CPractica";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CPracticaRow( _dst, false );
			Old = new CPracticaRow( _dst , true );
		}
				
		public CPractica( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CPractica() : base() 
		{
			Init();
		}
		
		public CPractica( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CPractica";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idpractica", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			
			

			
			_dt.Columns["idpractica"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CPractica",_dt.Columns["idpractica"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CPracticaRow( _dst, false );
			Old = new CPracticaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CPractica

#region CtrlGenHDesc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CtrlGenHDescRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field ExpedienteID;	
			public Int_Field RegistroNro;	
			public Int_Field TipoTrabajoID;	
			public Int_Field HINro;	
			public Int_Field HIAnio;	
			public Int_Field AgenteLocalID;	
			public Int_Field FuncionarioID;	
			public DateTime_Field fechahorageneracion;	

			public CtrlGenHDescRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TipoTrabajoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				HINro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				HIAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				fechahorageneracion		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class CtrlGenHDescRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CtrlGenHDesc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CtrlGenHDesc";
	
		
		public CtrlGenHDescRow Dat;
		public CtrlGenHDescRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CtrlGenHDesc( DataTable tab ) : base() 
		{
			_dbTableName = "CtrlGenHDesc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CtrlGenHDescRow( _dst, false );
			Old = new CtrlGenHDescRow( _dst , true );
		}
		
		
		public CtrlGenHDesc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CtrlGenHDesc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CtrlGenHDescRow( _dst, false );
			Old = new CtrlGenHDescRow( _dst , true );
		}
				
		public CtrlGenHDesc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CtrlGenHDesc() : base() 
		{
			Init();
		}
		
		public CtrlGenHDesc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CtrlGenHDesc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "TipoTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "HINro", typeof( int ) );  
			_dt.Columns.Add( "HIAnio", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "fechahorageneracion", typeof( DateTime ) );  
			
			

			
			_dt.Columns["id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CtrlGenHDesc",_dt.Columns["id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CtrlGenHDescRow( _dst, false );
			Old = new CtrlGenHDescRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CtrlGenHDesc

#region CtrlNroCorresp
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CtrlNroCorrespRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field idarea;	
			public Int_Field anio;	
			public Int_Field nrocorresp;	
			public Int_Field ultnrodistrib;	

			public CtrlNroCorrespRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				idarea		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nrocorresp		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ultnrodistrib		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class CtrlNroCorrespRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CtrlNroCorresp : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CtrlNroCorresp";
	
		
		public CtrlNroCorrespRow Dat;
		public CtrlNroCorrespRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CtrlNroCorresp( DataTable tab ) : base() 
		{
			_dbTableName = "CtrlNroCorresp";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CtrlNroCorrespRow( _dst, false );
			Old = new CtrlNroCorrespRow( _dst , true );
		}
		
		
		public CtrlNroCorresp( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CtrlNroCorresp";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CtrlNroCorrespRow( _dst, false );
			Old = new CtrlNroCorrespRow( _dst , true );
		}
				
		public CtrlNroCorresp( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CtrlNroCorresp() : base() 
		{
			Init();
		}
		
		public CtrlNroCorresp( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CtrlNroCorresp";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "idarea", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "nrocorresp", typeof( int ) );  
			_dt.Columns.Add( "ultnrodistrib", typeof( int ) );  
			
			

			
			_dt.Columns["id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CtrlNroCorresp",_dt.Columns["id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CtrlNroCorrespRow( _dst, false );
			Old = new CtrlNroCorrespRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CtrlNroCorresp

#region CViacom
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class CViacomRow 
		{
			private  DSTab _dst;
			
			public Int_Field idvia;	
			public String_Field descrip;	
			public String_Field abrev;	

			public CViacomRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idvia		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class CViacomRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CViacom : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CViacom";
	
		
		public CViacomRow Dat;
		public CViacomRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CViacom( DataTable tab ) : base() 
		{
			_dbTableName = "CViacom";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CViacomRow( _dst, false );
			Old = new CViacomRow( _dst , true );
		}
		
		
		public CViacom( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CViacom";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CViacomRow( _dst, false );
			Old = new CViacomRow( _dst , true );
		}
				
		public CViacom( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CViacom() : base() 
		{
			Init();
		}
		
		public CViacom( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CViacom";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idvia", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			
			

			
			_dt.Columns["idvia"].AutoIncrement = true;
			_dt.Constraints.Add("pk_CViacom",_dt.Columns["idvia"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CViacomRow( _dst, false );
			Old = new CViacomRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion CViacom

#region cxm_cobranzasxmov
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class cxm_cobranzasxmovRow 
		{
			private  DSTab _dst;
			
			public Int_Field cxm_cobranzaxmovid;	
			public Int_Field cxm_cobranzaid;	
			public Int_Field cxm_movimientoid;	

			public cxm_cobranzasxmovRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cxm_cobranzaxmovid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cxm_cobranzaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cxm_movimientoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class cxm_cobranzasxmovRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class cxm_cobranzasxmov : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "cxm_cobranzasxmov";
	
		
		public cxm_cobranzasxmovRow Dat;
		public cxm_cobranzasxmovRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public cxm_cobranzasxmov( DataTable tab ) : base() 
		{
			_dbTableName = "cxm_cobranzasxmov";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cxm_cobranzasxmovRow( _dst, false );
			Old = new cxm_cobranzasxmovRow( _dst , true );
		}
		
		
		public cxm_cobranzasxmov( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "cxm_cobranzasxmov";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cxm_cobranzasxmovRow( _dst, false );
			Old = new cxm_cobranzasxmovRow( _dst , true );
		}
				
		public cxm_cobranzasxmov( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public cxm_cobranzasxmov() : base() 
		{
			Init();
		}
		
		public cxm_cobranzasxmov( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "cxm_cobranzasxmov";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cxm_cobranzaxmovid", typeof( int ) );  
			_dt.Columns.Add( "cxm_cobranzaid", typeof( int ) );  
			_dt.Columns.Add( "cxm_movimientoid", typeof( int ) );  
			
			

			
			_dt.Columns["cxm_cobranzaxmovid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_cxm_cobranzasxmov",_dt.Columns["cxm_cobranzaxmovid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new cxm_cobranzasxmovRow( _dst, false );
			Old = new cxm_cobranzasxmovRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion cxm_cobranzasxmov

#region da_destinatarioalerta
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class da_destinatarioalertaRow 
		{
			private  DSTab _dst;
			
			public Int_Field da_destinatarioalertaid;	
			public Int_Field da_alertaid;	
			public Int_Field da_usuarioid;	

			public da_destinatarioalertaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				da_destinatarioalertaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				da_alertaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				da_usuarioid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class da_destinatarioalertaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class da_destinatarioalerta : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "da_destinatarioalerta";
	
		
		public da_destinatarioalertaRow Dat;
		public da_destinatarioalertaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public da_destinatarioalerta( DataTable tab ) : base() 
		{
			_dbTableName = "da_destinatarioalerta";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new da_destinatarioalertaRow( _dst, false );
			Old = new da_destinatarioalertaRow( _dst , true );
		}
		
		
		public da_destinatarioalerta( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "da_destinatarioalerta";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new da_destinatarioalertaRow( _dst, false );
			Old = new da_destinatarioalertaRow( _dst , true );
		}
				
		public da_destinatarioalerta( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public da_destinatarioalerta() : base() 
		{
			Init();
		}
		
		public da_destinatarioalerta( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "da_destinatarioalerta";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "da_destinatarioalertaid", typeof( int ) );  
			_dt.Columns.Add( "da_alertaid", typeof( int ) );  
			_dt.Columns.Add( "da_usuarioid", typeof( int ) );  
			
			

			
			_dt.Columns["da_destinatarioalertaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_da_destinatarioalerta",_dt.Columns["da_destinatarioalertaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new da_destinatarioalertaRow( _dst, false );
			Old = new da_destinatarioalertaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion da_destinatarioalerta

#region Diario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DiarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public DiarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class DiarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Diario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Diario";
	
		
		public DiarioRow Dat;
		public DiarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Diario( DataTable tab ) : base() 
		{
			_dbTableName = "Diario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DiarioRow( _dst, false );
			Old = new DiarioRow( _dst , true );
		}
		
		
		public Diario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Diario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DiarioRow( _dst, false );
			Old = new DiarioRow( _dst , true );
		}
				
		public Diario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Diario() : base() 
		{
			Init();
		}
		
		public Diario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Diario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Diario",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DiarioRow( _dst, false );
			Old = new DiarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Diario

#region Distribuidor
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DistribuidorRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Correo;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Boolean_Field Multiple;	
			public Int_Field GrupoEmpresarialID;	
			public Boolean_Field Activo;	
			public Boolean_Field TraduccionAuto;	
			public Int_Field CiudadID;	
			public Boolean_Field Inubicable;	
			public Int_Field Ddi;	
			public Boolean_Field PGeneral;	
			public Boolean_Field PIntelectual;	

			public DistribuidorRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Multiple		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				TraduccionAuto		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Inubicable		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Ddi		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PGeneral		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				PIntelectual		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
			}
		} // end class DistribuidorRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Distribuidor : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Distribuidor";
	
		
		public DistribuidorRow Dat;
		public DistribuidorRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Distribuidor( DataTable tab ) : base() 
		{
			_dbTableName = "Distribuidor";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DistribuidorRow( _dst, false );
			Old = new DistribuidorRow( _dst , true );
		}
		
		
		public Distribuidor( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Distribuidor";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DistribuidorRow( _dst, false );
			Old = new DistribuidorRow( _dst , true );
		}
				
		public Distribuidor( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Distribuidor() : base() 
		{
			Init();
		}
		
		public Distribuidor( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Distribuidor";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "TraduccionAuto", typeof( Boolean ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			_dt.Columns.Add( "Inubicable", typeof( Boolean ) );  
			_dt.Columns.Add( "Ddi", typeof( int ) );  
			_dt.Columns.Add( "PGeneral", typeof( Boolean ) );  
			_dt.Columns.Add( "PIntelectual", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Distribuidor",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DistribuidorRow( _dst, false );
			Old = new DistribuidorRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Distribuidor

#region do_documento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class do_documentoRow 
		{
			private  DSTab _dst;
			
			public Int_Field do_documentoid;	
			public String_Field do_textoplantilla;	

			public do_documentoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				do_documentoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				do_textoplantilla		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class do_documentoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class do_documento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "do_documento";
	
		
		public do_documentoRow Dat;
		public do_documentoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public do_documento( DataTable tab ) : base() 
		{
			_dbTableName = "do_documento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new do_documentoRow( _dst, false );
			Old = new do_documentoRow( _dst , true );
		}
		
		
		public do_documento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "do_documento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new do_documentoRow( _dst, false );
			Old = new do_documentoRow( _dst , true );
		}
				
		public do_documento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public do_documento() : base() 
		{
			Init();
		}
		
		public do_documento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "do_documento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "do_documentoid", typeof( int ) );  
			_dt.Columns.Add( "do_textoplantilla", typeof( String ) );  
			
			

			
			_dt.Columns["do_documentoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_do_documento",_dt.Columns["do_documentoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new do_documentoRow( _dst, false );
			Old = new do_documentoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion do_documento

#region Documento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DocumentoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field DocumentoTipoID;	
			public Int_Field CorrespondenciaID;	
			public Int_Field IdentificadorNro;	
			public Int_Field IdentificadorAnio;	
			public String_Field ReferenciaExterna;	
			public String_Field Path;	
			public String_Field Descrip;	
			public DateTime_Field Fecha;	

			public DocumentoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				DocumentoTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				IdentificadorNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				IdentificadorAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ReferenciaExterna		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Path		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class DocumentoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Documento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Documento";
	
		
		public DocumentoRow Dat;
		public DocumentoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Documento( DataTable tab ) : base() 
		{
			_dbTableName = "Documento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoRow( _dst, false );
			Old = new DocumentoRow( _dst , true );
		}
		
		
		public Documento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Documento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoRow( _dst, false );
			Old = new DocumentoRow( _dst , true );
		}
				
		public Documento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Documento() : base() 
		{
			Init();
		}
		
		public Documento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Documento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoTipoID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "IdentificadorNro", typeof( int ) );  
			_dt.Columns.Add( "IdentificadorAnio", typeof( int ) );  
			_dt.Columns.Add( "ReferenciaExterna", typeof( String ) );  
			_dt.Columns.Add( "Path", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Documento",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoRow( _dst, false );
			Old = new DocumentoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Documento

#region DocumentoCampo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DocumentoCampoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field DocumentoID;	
			public String_Field Campo;	
			public String_Field Valor;	

			public DocumentoCampoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				DocumentoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Campo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Valor		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class DocumentoCampoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class DocumentoCampo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "DocumentoCampo";
	
		
		public DocumentoCampoRow Dat;
		public DocumentoCampoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public DocumentoCampo( DataTable tab ) : base() 
		{
			_dbTableName = "DocumentoCampo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoCampoRow( _dst, false );
			Old = new DocumentoCampoRow( _dst , true );
		}
		
		
		public DocumentoCampo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "DocumentoCampo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoCampoRow( _dst, false );
			Old = new DocumentoCampoRow( _dst , true );
		}
				
		public DocumentoCampo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public DocumentoCampo() : base() 
		{
			Init();
		}
		
		public DocumentoCampo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "DocumentoCampo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoID", typeof( int ) );  
			_dt.Columns.Add( "Campo", typeof( String ) );  
			_dt.Columns.Add( "Valor", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_DocumentoCampo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoCampoRow( _dst, false );
			Old = new DocumentoCampoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion DocumentoCampo

#region DocumentoPlantilla
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DocumentoPlantillaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Clave;	
			public Int_Field IdiomaID;	
			public Int_Field TramiteID;	
			public String_Field PlantillaHTML;	
			public Int_Field DocumentoTipoID;	
			public String_Field Descrip;	
			public String_Field Tipo;	
			public Boolean_Field Plural;	
			public Int_Field MergeID;	
			public Boolean_Field EnTramite;	

			public DocumentoPlantillaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Clave		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				PlantillaHTML		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				DocumentoTipoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Plural		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class DocumentoPlantillaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class DocumentoPlantilla : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "DocumentoPlantilla";
	
		
		public DocumentoPlantillaRow Dat;
		public DocumentoPlantillaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public DocumentoPlantilla( DataTable tab ) : base() 
		{
			_dbTableName = "DocumentoPlantilla";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoPlantillaRow( _dst, false );
			Old = new DocumentoPlantillaRow( _dst , true );
		}
		
		
		public DocumentoPlantilla( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "DocumentoPlantilla";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoPlantillaRow( _dst, false );
			Old = new DocumentoPlantillaRow( _dst , true );
		}
				
		public DocumentoPlantilla( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public DocumentoPlantilla() : base() 
		{
			Init();
		}
		
		public DocumentoPlantilla( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "DocumentoPlantilla";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Clave", typeof( String ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "PlantillaHTML", typeof( String ) );  
			_dt.Columns.Add( "DocumentoTipoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "Plural", typeof( Boolean ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_DocumentoPlantilla",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoPlantillaRow( _dst, false );
			Old = new DocumentoPlantillaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion DocumentoPlantilla

#region DocumentoRuta
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DocumentoRutaRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field idDocumento;	
			public String_Field descripcion;	
			public String_Field path;	
			public DateTime_Field lastUpdated;	

			public DocumentoRutaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				idDocumento		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				path		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class DocumentoRutaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class DocumentoRuta : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "DocumentoRuta";
	
		
		public DocumentoRutaRow Dat;
		public DocumentoRutaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public DocumentoRuta( DataTable tab ) : base() 
		{
			_dbTableName = "DocumentoRuta";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoRutaRow( _dst, false );
			Old = new DocumentoRutaRow( _dst , true );
		}
		
		
		public DocumentoRuta( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "DocumentoRuta";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoRutaRow( _dst, false );
			Old = new DocumentoRutaRow( _dst , true );
		}
				
		public DocumentoRuta( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public DocumentoRuta() : base() 
		{
			Init();
		}
		
		public DocumentoRuta( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "DocumentoRuta";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "idDocumento", typeof( String ) );  
			_dt.Columns.Add( "descripcion", typeof( String ) );  
			_dt.Columns.Add( "path", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_DocumentoRuta",_dt.Columns["id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoRutaRow( _dst, false );
			Old = new DocumentoRutaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion DocumentoRuta

#region DocumentoTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DocumentoTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public String_Field IdentifNombre;	
			public String_Field PathPlantilla;	
			public Boolean_Field EsEscritoVario;	

			public DocumentoTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				IdentifNombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				PathPlantilla		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				EsEscritoVario		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class DocumentoTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class DocumentoTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "DocumentoTipo";
	
		
		public DocumentoTipoRow Dat;
		public DocumentoTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public DocumentoTipo( DataTable tab ) : base() 
		{
			_dbTableName = "DocumentoTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoTipoRow( _dst, false );
			Old = new DocumentoTipoRow( _dst , true );
		}
		
		
		public DocumentoTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "DocumentoTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoTipoRow( _dst, false );
			Old = new DocumentoTipoRow( _dst , true );
		}
				
		public DocumentoTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public DocumentoTipo() : base() 
		{
			Init();
		}
		
		public DocumentoTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "DocumentoTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "IdentifNombre", typeof( String ) );  
			_dt.Columns.Add( "PathPlantilla", typeof( String ) );  
			_dt.Columns.Add( "EsEscritoVario", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_DocumentoTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoTipoRow( _dst, false );
			Old = new DocumentoTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion DocumentoTipo

#region DocumentoTipoCampo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class DocumentoTipoCampoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field DocumentoTipoID;	
			public String_Field Campo;	

			public DocumentoTipoCampoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				DocumentoTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Campo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class DocumentoTipoCampoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class DocumentoTipoCampo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "DocumentoTipoCampo";
	
		
		public DocumentoTipoCampoRow Dat;
		public DocumentoTipoCampoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public DocumentoTipoCampo( DataTable tab ) : base() 
		{
			_dbTableName = "DocumentoTipoCampo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoTipoCampoRow( _dst, false );
			Old = new DocumentoTipoCampoRow( _dst , true );
		}
		
		
		public DocumentoTipoCampo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "DocumentoTipoCampo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoTipoCampoRow( _dst, false );
			Old = new DocumentoTipoCampoRow( _dst , true );
		}
				
		public DocumentoTipoCampo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public DocumentoTipoCampo() : base() 
		{
			Init();
		}
		
		public DocumentoTipoCampo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "DocumentoTipoCampo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoTipoID", typeof( int ) );  
			_dt.Columns.Add( "Campo", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_DocumentoTipoCampo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new DocumentoTipoCampoRow( _dst, false );
			Old = new DocumentoTipoCampoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion DocumentoTipoCampo

#region eo_expedienteoposicion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class eo_expedienteoposicionRow 
		{
			private  DSTab _dst;
			
			public Int_Field eo_expedienteoposicionid;	
			public Boolean_Field eo_tipoopo;	
			public Int_Field eo_opoactanro;	
			public Int_Field eo_opoactaanio;	
			public Int_Field eo_marcasolicid;	
			public String_Field eo_marcasolicdenominacion;	
			public Int_Field eo_clasebaseid;	
			public Int_Field eo_clasebasenro;	
			public Int_Field eo_solicid;	
			public String_Field eo_solicnombre;	
			public Int_Field eo_paisbaseid;	
			public String_Field eo_paisbasealfa;	
			public Double_Field eo_actadinapi;	
			public Int_Field eo_actasolicnro;	
			public Int_Field eo_actasolicanio;	
			public Int_Field eo_agentelocalid;	
			public Int_Field eo_agentelocalmatric;	
			public Int_Field eo_apoderadoid;	
			public Int_Field eo_apoderadomatric;	
			public Int_Field eo_marcabaseid;	
			public String_Field eo_marcabasedenom;	
			public Int_Field eo_clasesolicid;	
			public Double_Field eo_clasesolicnro;	
			public Int_Field eo_oponenteid;	
			public String_Field eo_oponentenombre;	
			public Int_Field eo_marcaregrenid;	
			public Int_Field eo_registronro;	
			public Int_Field eo_poderbaseid;	
			public Int_Field eo_poderbasenro;	
			public String_Field eo_actuacion;	
			public DateTime_Field eo_ultima;	
			public String_Field eo_observacion;	
			public String_Field eo_observaciongral;	
			public Int_Field eo_instanciaid;	
			public String_Field eo_instancia;	
			public Int_Field eo_agenext;	
			public Int_Field eo_clientebaseid;	
			public String_Field eo_gastos;	
			public DateTime_Field eo_fecpres;	
			public DateTime_Field eo_fecprox;	
			public Boolean_Field eo_ley1294;	
			public Int_Field eo_encargadoid;	
			public Boolean_Field eo_migrado;	
			public Boolean_Field eo_activo;	
			public Int_Field eo_paissolicid;	
			public Int_Field eo_clientesolicid;	
			public Int_Field eo_actabasenro;	
			public Int_Field eo_actabaseanio;	
			public Int_Field eo_expesolicid;	
			public Int_Field eo_expebaseid;	
			public Int_Field eo_podersolicid;	
			public Int_Field eo_nro;	
			public Int_Field eo_bib;	
			public Int_Field eo_bibanio;	
			public Int_Field eo_tipoactuacionid;	
			public Boolean_Field eo_faltapoder;	
			public Boolean_Field eo_postdecrypt;	
			public Boolean_Field eo_actpostdecrypt;	
			public Boolean_Field eo_solicnuestra;	
			public Boolean_Field eo_basenuestra;	

			public eo_expedienteoposicionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				eo_expedienteoposicionid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				eo_tipoopo		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				eo_opoactanro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				eo_opoactaanio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				eo_marcasolicid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				eo_marcasolicdenominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				eo_clasebaseid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				eo_clasebasenro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				eo_solicid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				eo_solicnombre		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				eo_paisbaseid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				eo_paisbasealfa		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				eo_actadinapi		= new Double_Field(	_dst, 12, IsOldDataVersion  );	
				eo_actasolicnro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				eo_actasolicanio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				eo_agentelocalid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				eo_agentelocalmatric		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				eo_apoderadoid		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				eo_apoderadomatric		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				eo_marcabaseid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				eo_marcabasedenom		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				eo_clasesolicid		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				eo_clasesolicnro		= new Double_Field(	_dst, 22, IsOldDataVersion  );	
				eo_oponenteid		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				eo_oponentenombre		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				eo_marcaregrenid		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				eo_registronro		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				eo_poderbaseid		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				eo_poderbasenro		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				eo_actuacion		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				eo_ultima		= new DateTime_Field(	_dst, 30, IsOldDataVersion  );	
				eo_observacion		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				eo_observaciongral		= new String_Field(	_dst, 32, IsOldDataVersion  );	
				eo_instanciaid		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				eo_instancia		= new String_Field(	_dst, 34, IsOldDataVersion  );	
				eo_agenext		= new Int_Field(	_dst, 35, IsOldDataVersion  );	
				eo_clientebaseid		= new Int_Field(	_dst, 36, IsOldDataVersion  );	
				eo_gastos		= new String_Field(	_dst, 37, IsOldDataVersion  );	
				eo_fecpres		= new DateTime_Field(	_dst, 38, IsOldDataVersion  );	
				eo_fecprox		= new DateTime_Field(	_dst, 39, IsOldDataVersion  );	
				eo_ley1294		= new Boolean_Field(	_dst, 40, IsOldDataVersion  );	
				eo_encargadoid		= new Int_Field(	_dst, 41, IsOldDataVersion  );	
				eo_migrado		= new Boolean_Field(	_dst, 42, IsOldDataVersion  );	
				eo_activo		= new Boolean_Field(	_dst, 43, IsOldDataVersion  );	
				eo_paissolicid		= new Int_Field(	_dst, 44, IsOldDataVersion  );	
				eo_clientesolicid		= new Int_Field(	_dst, 45, IsOldDataVersion  );	
				eo_actabasenro		= new Int_Field(	_dst, 46, IsOldDataVersion  );	
				eo_actabaseanio		= new Int_Field(	_dst, 47, IsOldDataVersion  );	
				eo_expesolicid		= new Int_Field(	_dst, 48, IsOldDataVersion  );	
				eo_expebaseid		= new Int_Field(	_dst, 49, IsOldDataVersion  );	
				eo_podersolicid		= new Int_Field(	_dst, 50, IsOldDataVersion  );	
				eo_nro		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				eo_bib		= new Int_Field(	_dst, 52, IsOldDataVersion  );	
				eo_bibanio		= new Int_Field(	_dst, 53, IsOldDataVersion  );	
				eo_tipoactuacionid		= new Int_Field(	_dst, 54, IsOldDataVersion  );	
				eo_faltapoder		= new Boolean_Field(	_dst, 55, IsOldDataVersion  );	
				eo_postdecrypt		= new Boolean_Field(	_dst, 56, IsOldDataVersion  );	
				eo_actpostdecrypt		= new Boolean_Field(	_dst, 57, IsOldDataVersion  );	
				eo_solicnuestra		= new Boolean_Field(	_dst, 58, IsOldDataVersion  );	
				eo_basenuestra		= new Boolean_Field(	_dst, 59, IsOldDataVersion  );	
			}
		} // end class eo_expedienteoposicionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class eo_expedienteoposicion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "eo_expedienteoposicion";
	
		
		public eo_expedienteoposicionRow Dat;
		public eo_expedienteoposicionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public eo_expedienteoposicion( DataTable tab ) : base() 
		{
			_dbTableName = "eo_expedienteoposicion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new eo_expedienteoposicionRow( _dst, false );
			Old = new eo_expedienteoposicionRow( _dst , true );
		}
		
		
		public eo_expedienteoposicion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "eo_expedienteoposicion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new eo_expedienteoposicionRow( _dst, false );
			Old = new eo_expedienteoposicionRow( _dst , true );
		}
				
		public eo_expedienteoposicion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public eo_expedienteoposicion() : base() 
		{
			Init();
		}
		
		public eo_expedienteoposicion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "eo_expedienteoposicion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "eo_expedienteoposicionid", typeof( int ) );  
			_dt.Columns.Add( "eo_tipoopo", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_opoactanro", typeof( int ) );  
			_dt.Columns.Add( "eo_opoactaanio", typeof( int ) );  
			_dt.Columns.Add( "eo_marcasolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_marcasolicdenominacion", typeof( String ) );  
			_dt.Columns.Add( "eo_clasebaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_clasebasenro", typeof( int ) );  
			_dt.Columns.Add( "eo_solicid", typeof( int ) );  
			_dt.Columns.Add( "eo_solicnombre", typeof( String ) );  
			_dt.Columns.Add( "eo_paisbaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_paisbasealfa", typeof( String ) );  
			_dt.Columns.Add( "eo_actadinapi", typeof( Double ) );  
			_dt.Columns.Add( "eo_actasolicnro", typeof( int ) );  
			_dt.Columns.Add( "eo_actasolicanio", typeof( int ) );  
			_dt.Columns.Add( "eo_agentelocalid", typeof( int ) );  
			_dt.Columns.Add( "eo_agentelocalmatric", typeof( int ) );  
			_dt.Columns.Add( "eo_apoderadoid", typeof( int ) );  
			_dt.Columns.Add( "eo_apoderadomatric", typeof( int ) );  
			_dt.Columns.Add( "eo_marcabaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_marcabasedenom", typeof( String ) );  
			_dt.Columns.Add( "eo_clasesolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_clasesolicnro", typeof( Double ) );  
			_dt.Columns.Add( "eo_oponenteid", typeof( int ) );  
			_dt.Columns.Add( "eo_oponentenombre", typeof( String ) );  
			_dt.Columns.Add( "eo_marcaregrenid", typeof( int ) );  
			_dt.Columns.Add( "eo_registronro", typeof( int ) );  
			_dt.Columns.Add( "eo_poderbaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_poderbasenro", typeof( int ) );  
			_dt.Columns.Add( "eo_actuacion", typeof( String ) );  
			_dt.Columns.Add( "eo_ultima", typeof( DateTime ) );  
			_dt.Columns.Add( "eo_observacion", typeof( String ) );  
			_dt.Columns.Add( "eo_observaciongral", typeof( String ) );  
			_dt.Columns.Add( "eo_instanciaid", typeof( int ) );  
			_dt.Columns.Add( "eo_instancia", typeof( String ) );  
			_dt.Columns.Add( "eo_agenext", typeof( int ) );  
			_dt.Columns.Add( "eo_clientebaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_gastos", typeof( String ) );  
			_dt.Columns.Add( "eo_fecpres", typeof( DateTime ) );  
			_dt.Columns.Add( "eo_fecprox", typeof( DateTime ) );  
			_dt.Columns.Add( "eo_ley1294", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_encargadoid", typeof( int ) );  
			_dt.Columns.Add( "eo_migrado", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_activo", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_paissolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_clientesolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_actabasenro", typeof( int ) );  
			_dt.Columns.Add( "eo_actabaseanio", typeof( int ) );  
			_dt.Columns.Add( "eo_expesolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_expebaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_podersolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_nro", typeof( int ) );  
			_dt.Columns.Add( "eo_bib", typeof( int ) );  
			_dt.Columns.Add( "eo_bibanio", typeof( int ) );  
			_dt.Columns.Add( "eo_tipoactuacionid", typeof( int ) );  
			_dt.Columns.Add( "eo_faltapoder", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_postdecrypt", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_actpostdecrypt", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_solicnuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_basenuestra", typeof( Boolean ) );  
			
			

			
			_dt.Columns["eo_expedienteoposicionid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_eo_expedienteoposicion",_dt.Columns["eo_expedienteoposicionid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new eo_expedienteoposicionRow( _dst, false );
			Old = new eo_expedienteoposicionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion eo_expedienteoposicion

#region eo_expedienteoposicionxx
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class eo_expedienteoposicionxxRow 
		{
			private  DSTab _dst;
			
			public Int_Field eo_expedienteoposicionxxid;	
			public Boolean_Field eo_tipoopo;	
			public Int_Field eo_opoactanro;	
			public Int_Field eo_opoactaanio;	
			public Int_Field eo_marcasolicid;	
			public String_Field eo_marcasolicdenominacion;	
			public Int_Field eo_clasebaseid;	
			public Int_Field eo_clasebasenro;	
			public Int_Field eo_solicid;	
			public String_Field eo_solicnombre;	
			public Int_Field eo_paisbaseid;	
			public String_Field eo_paisbasealfa;	
			public Double_Field eo_actadinapi;	
			public Int_Field eo_actasolicnro;	
			public Int_Field eo_actasolicanio;	
			public Int_Field eo_agentelocalid;	
			public Int_Field eo_agentelocalmatric;	
			public Int_Field eo_apoderadoid;	
			public Int_Field eo_apoderadomatric;	
			public Int_Field eo_marcabaseid;	
			public String_Field eo_marcabasedenom;	
			public Int_Field eo_clasesolicid;	
			public Double_Field eo_clasesolicnro;	
			public Int_Field eo_oponenteid;	
			public String_Field eo_oponentenombre;	
			public Int_Field eo_marcaregrenid;	
			public Int_Field eo_registronro;	
			public Int_Field eo_poderbaseid;	
			public Int_Field eo_poderbasenro;	
			public String_Field eo_actuacion;	
			public DateTime_Field eo_ultima;	
			public String_Field eo_observacion;	
			public String_Field eo_observaciongral;	
			public Int_Field eo_instanciaid;	
			public String_Field eo_instancia;	
			public Int_Field eo_agenext;	
			public Int_Field eo_clientebaseid;	
			public String_Field eo_gastos;	
			public DateTime_Field eo_fecpres;	
			public DateTime_Field eo_fecprox;	
			public Boolean_Field eo_ley1294;	
			public Int_Field eo_encargadoid;	
			public Boolean_Field eo_migrado;	
			public Boolean_Field eo_activo;	
			public Int_Field eo_paissolicid;	
			public Int_Field eo_clientesolicid;	
			public Int_Field eo_actabasenro;	
			public Int_Field eo_actabaseanio;	
			public Int_Field eo_expesolicid;	
			public Int_Field eo_expebaseid;	
			public Int_Field eo_podersolicid;	
			public Int_Field eo_nro;	
			public Int_Field eo_bib;	
			public Int_Field eo_bibanio;	
			public Int_Field eo_tipoactuacionid;	
			public Boolean_Field eo_faltapoder;	
			public String_Field eo_apoderadostr;	
			public Boolean_Field eo_solicnuestra;	
			public Boolean_Field eo_basenuestra;	
			public Int_Field eo_expeopoid;	

			public eo_expedienteoposicionxxRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				eo_expedienteoposicionxxid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				eo_tipoopo		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				eo_opoactanro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				eo_opoactaanio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				eo_marcasolicid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				eo_marcasolicdenominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				eo_clasebaseid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				eo_clasebasenro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				eo_solicid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				eo_solicnombre		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				eo_paisbaseid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				eo_paisbasealfa		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				eo_actadinapi		= new Double_Field(	_dst, 12, IsOldDataVersion  );	
				eo_actasolicnro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				eo_actasolicanio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				eo_agentelocalid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				eo_agentelocalmatric		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				eo_apoderadoid		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				eo_apoderadomatric		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				eo_marcabaseid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				eo_marcabasedenom		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				eo_clasesolicid		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				eo_clasesolicnro		= new Double_Field(	_dst, 22, IsOldDataVersion  );	
				eo_oponenteid		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				eo_oponentenombre		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				eo_marcaregrenid		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				eo_registronro		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				eo_poderbaseid		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				eo_poderbasenro		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				eo_actuacion		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				eo_ultima		= new DateTime_Field(	_dst, 30, IsOldDataVersion  );	
				eo_observacion		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				eo_observaciongral		= new String_Field(	_dst, 32, IsOldDataVersion  );	
				eo_instanciaid		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				eo_instancia		= new String_Field(	_dst, 34, IsOldDataVersion  );	
				eo_agenext		= new Int_Field(	_dst, 35, IsOldDataVersion  );	
				eo_clientebaseid		= new Int_Field(	_dst, 36, IsOldDataVersion  );	
				eo_gastos		= new String_Field(	_dst, 37, IsOldDataVersion  );	
				eo_fecpres		= new DateTime_Field(	_dst, 38, IsOldDataVersion  );	
				eo_fecprox		= new DateTime_Field(	_dst, 39, IsOldDataVersion  );	
				eo_ley1294		= new Boolean_Field(	_dst, 40, IsOldDataVersion  );	
				eo_encargadoid		= new Int_Field(	_dst, 41, IsOldDataVersion  );	
				eo_migrado		= new Boolean_Field(	_dst, 42, IsOldDataVersion  );	
				eo_activo		= new Boolean_Field(	_dst, 43, IsOldDataVersion  );	
				eo_paissolicid		= new Int_Field(	_dst, 44, IsOldDataVersion  );	
				eo_clientesolicid		= new Int_Field(	_dst, 45, IsOldDataVersion  );	
				eo_actabasenro		= new Int_Field(	_dst, 46, IsOldDataVersion  );	
				eo_actabaseanio		= new Int_Field(	_dst, 47, IsOldDataVersion  );	
				eo_expesolicid		= new Int_Field(	_dst, 48, IsOldDataVersion  );	
				eo_expebaseid		= new Int_Field(	_dst, 49, IsOldDataVersion  );	
				eo_podersolicid		= new Int_Field(	_dst, 50, IsOldDataVersion  );	
				eo_nro		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				eo_bib		= new Int_Field(	_dst, 52, IsOldDataVersion  );	
				eo_bibanio		= new Int_Field(	_dst, 53, IsOldDataVersion  );	
				eo_tipoactuacionid		= new Int_Field(	_dst, 54, IsOldDataVersion  );	
				eo_faltapoder		= new Boolean_Field(	_dst, 55, IsOldDataVersion  );	
				eo_apoderadostr		= new String_Field(	_dst, 56, IsOldDataVersion  );	
				eo_solicnuestra		= new Boolean_Field(	_dst, 57, IsOldDataVersion  );	
				eo_basenuestra		= new Boolean_Field(	_dst, 58, IsOldDataVersion  );	
				eo_expeopoid		= new Int_Field(	_dst, 59, IsOldDataVersion  );	
			}
		} // end class eo_expedienteoposicionxxRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class eo_expedienteoposicionxx : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "eo_expedienteoposicionxx";
	
		
		public eo_expedienteoposicionxxRow Dat;
		public eo_expedienteoposicionxxRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public eo_expedienteoposicionxx( DataTable tab ) : base() 
		{
			_dbTableName = "eo_expedienteoposicionxx";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new eo_expedienteoposicionxxRow( _dst, false );
			Old = new eo_expedienteoposicionxxRow( _dst , true );
		}
		
		
		public eo_expedienteoposicionxx( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "eo_expedienteoposicionxx";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new eo_expedienteoposicionxxRow( _dst, false );
			Old = new eo_expedienteoposicionxxRow( _dst , true );
		}
				
		public eo_expedienteoposicionxx( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public eo_expedienteoposicionxx() : base() 
		{
			Init();
		}
		
		public eo_expedienteoposicionxx( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "eo_expedienteoposicionxx";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "eo_expedienteoposicionxxid", typeof( int ) );  
			_dt.Columns.Add( "eo_tipoopo", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_opoactanro", typeof( int ) );  
			_dt.Columns.Add( "eo_opoactaanio", typeof( int ) );  
			_dt.Columns.Add( "eo_marcasolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_marcasolicdenominacion", typeof( String ) );  
			_dt.Columns.Add( "eo_clasebaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_clasebasenro", typeof( int ) );  
			_dt.Columns.Add( "eo_solicid", typeof( int ) );  
			_dt.Columns.Add( "eo_solicnombre", typeof( String ) );  
			_dt.Columns.Add( "eo_paisbaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_paisbasealfa", typeof( String ) );  
			_dt.Columns.Add( "eo_actadinapi", typeof( Double ) );  
			_dt.Columns.Add( "eo_actasolicnro", typeof( int ) );  
			_dt.Columns.Add( "eo_actasolicanio", typeof( int ) );  
			_dt.Columns.Add( "eo_agentelocalid", typeof( int ) );  
			_dt.Columns.Add( "eo_agentelocalmatric", typeof( int ) );  
			_dt.Columns.Add( "eo_apoderadoid", typeof( int ) );  
			_dt.Columns.Add( "eo_apoderadomatric", typeof( int ) );  
			_dt.Columns.Add( "eo_marcabaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_marcabasedenom", typeof( String ) );  
			_dt.Columns.Add( "eo_clasesolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_clasesolicnro", typeof( Double ) );  
			_dt.Columns.Add( "eo_oponenteid", typeof( int ) );  
			_dt.Columns.Add( "eo_oponentenombre", typeof( String ) );  
			_dt.Columns.Add( "eo_marcaregrenid", typeof( int ) );  
			_dt.Columns.Add( "eo_registronro", typeof( int ) );  
			_dt.Columns.Add( "eo_poderbaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_poderbasenro", typeof( int ) );  
			_dt.Columns.Add( "eo_actuacion", typeof( String ) );  
			_dt.Columns.Add( "eo_ultima", typeof( DateTime ) );  
			_dt.Columns.Add( "eo_observacion", typeof( String ) );  
			_dt.Columns.Add( "eo_observaciongral", typeof( String ) );  
			_dt.Columns.Add( "eo_instanciaid", typeof( int ) );  
			_dt.Columns.Add( "eo_instancia", typeof( String ) );  
			_dt.Columns.Add( "eo_agenext", typeof( int ) );  
			_dt.Columns.Add( "eo_clientebaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_gastos", typeof( String ) );  
			_dt.Columns.Add( "eo_fecpres", typeof( DateTime ) );  
			_dt.Columns.Add( "eo_fecprox", typeof( DateTime ) );  
			_dt.Columns.Add( "eo_ley1294", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_encargadoid", typeof( int ) );  
			_dt.Columns.Add( "eo_migrado", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_activo", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_paissolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_clientesolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_actabasenro", typeof( int ) );  
			_dt.Columns.Add( "eo_actabaseanio", typeof( int ) );  
			_dt.Columns.Add( "eo_expesolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_expebaseid", typeof( int ) );  
			_dt.Columns.Add( "eo_podersolicid", typeof( int ) );  
			_dt.Columns.Add( "eo_nro", typeof( int ) );  
			_dt.Columns.Add( "eo_bib", typeof( int ) );  
			_dt.Columns.Add( "eo_bibanio", typeof( int ) );  
			_dt.Columns.Add( "eo_tipoactuacionid", typeof( int ) );  
			_dt.Columns.Add( "eo_faltapoder", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_apoderadostr", typeof( String ) );  
			_dt.Columns.Add( "eo_solicnuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_basenuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "eo_expeopoid", typeof( int ) );  
			
			

			
			_dt.Columns["eo_expedienteoposicionxxid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_eo_expedienteoposicionxx",_dt.Columns["eo_expedienteoposicionxxid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new eo_expedienteoposicionxxRow( _dst, false );
			Old = new eo_expedienteoposicionxxRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion eo_expedienteoposicionxx

#region Estado
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class EstadoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field CodEstado;	
			public String_Field Descripcion;	

			public EstadoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				CodEstado		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class EstadoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Estado : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Estado";
	
		
		public EstadoRow Dat;
		public EstadoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Estado( DataTable tab ) : base() 
		{
			_dbTableName = "Estado";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new EstadoRow( _dst, false );
			Old = new EstadoRow( _dst , true );
		}
		
		
		public Estado( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Estado";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new EstadoRow( _dst, false );
			Old = new EstadoRow( _dst , true );
		}
				
		public Estado( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Estado() : base() 
		{
			Init();
		}
		
		public Estado( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Estado";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "CodEstado", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Estado",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new EstadoRow( _dst, false );
			Old = new EstadoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Estado

#region Estudio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class EstudioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	

			public EstudioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class EstudioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Estudio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Estudio";
	
		
		public EstudioRow Dat;
		public EstudioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Estudio( DataTable tab ) : base() 
		{
			_dbTableName = "Estudio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new EstudioRow( _dst, false );
			Old = new EstudioRow( _dst , true );
		}
		
		
		public Estudio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Estudio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new EstudioRow( _dst, false );
			Old = new EstudioRow( _dst , true );
		}
				
		public Estudio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Estudio() : base() 
		{
			Init();
		}
		
		public Estudio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Estudio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Estudio",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new EstudioRow( _dst, false );
			Old = new EstudioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Estudio

#region Expediente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ExpedienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Int_Field ExpedienteID;	
			public Int_Field BoletinDetalleID;	
			public Int_Field DiarioID;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field Documento;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Concluido;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field MarcaRegRenID;	
			public Int_Field PoderInscID;	
			public Int_Field MarcaID;	
			public DateTime_Field FechaAband;	
			public String_Field Obs;	
			public String_Field Acta;	
			public String_Field Publicacion;	
			public String_Field Label;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field lastUpdated;	

			public ExpedienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				BoletinDetalleID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				DiarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Documento		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 21, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				FechaAband		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				Publicacion		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 30, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 31, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 32, IsOldDataVersion  );	
			}
		} // end class ExpedienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente";
	
		
		public ExpedienteRow Dat;
		public ExpedienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteRow( _dst, false );
			Old = new ExpedienteRow( _dst , true );
		}
		
		
		public Expediente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteRow( _dst, false );
			Old = new ExpedienteRow( _dst , true );
		}
				
		public Expediente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente() : base() 
		{
			Init();
		}
		
		public Expediente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BoletinDetalleID", typeof( int ) );  
			_dt.Columns.Add( "DiarioID", typeof( int ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "Documento", typeof( Boolean ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "FechaAband", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Publicacion", typeof( String ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			
			_dt.Columns["Acta"].ReadOnly = true;  
			_dt.Columns["Publicacion"].ReadOnly = true;  

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteRow( _dst, false );
			Old = new ExpedienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente

#region Expediente_ClienteCambio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_ClienteCambioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field ClienteAntID;	
			public DateTime_Field CambioFecha;	
			public Int_Field FuncionarioID;	
			public Int_Field CorrespondenciaID;	
			public String_Field Obs;	

			public Expediente_ClienteCambioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ClienteAntID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				CambioFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class Expediente_ClienteCambioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_ClienteCambio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_ClienteCambio";
	
		
		public Expediente_ClienteCambioRow Dat;
		public Expediente_ClienteCambioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_ClienteCambio( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_ClienteCambio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_ClienteCambioRow( _dst, false );
			Old = new Expediente_ClienteCambioRow( _dst , true );
		}
		
		
		public Expediente_ClienteCambio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_ClienteCambio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_ClienteCambioRow( _dst, false );
			Old = new Expediente_ClienteCambioRow( _dst , true );
		}
				
		public Expediente_ClienteCambio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_ClienteCambio() : base() 
		{
			Init();
		}
		
		public Expediente_ClienteCambio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_ClienteCambio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteAntID", typeof( int ) );  
			_dt.Columns.Add( "CambioFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_ClienteCambio",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_ClienteCambioRow( _dst, false );
			Old = new Expediente_ClienteCambioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_ClienteCambio

#region Expediente_Distribuidor
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_DistribuidorRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field MarcaID;	
			public Int_Field DistribuidorID;	
			public String_Field Producto_Servicio;	

			public Expediente_DistribuidorRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				DistribuidorID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Producto_Servicio		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class Expediente_DistribuidorRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_Distribuidor : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_Distribuidor";
	
		
		public Expediente_DistribuidorRow Dat;
		public Expediente_DistribuidorRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_Distribuidor( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_Distribuidor";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DistribuidorRow( _dst, false );
			Old = new Expediente_DistribuidorRow( _dst , true );
		}
		
		
		public Expediente_Distribuidor( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_Distribuidor";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DistribuidorRow( _dst, false );
			Old = new Expediente_DistribuidorRow( _dst , true );
		}
				
		public Expediente_Distribuidor( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_Distribuidor() : base() 
		{
			Init();
		}
		
		public Expediente_Distribuidor( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_Distribuidor";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "DistribuidorID", typeof( int ) );  
			_dt.Columns.Add( "Producto_Servicio", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_Distribuidor",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DistribuidorRow( _dst, false );
			Old = new Expediente_DistribuidorRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_Distribuidor

#region Expediente_Documento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_DocumentoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field DocumentoID;	

			public Expediente_DocumentoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				DocumentoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class Expediente_DocumentoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_Documento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_Documento";
	
		
		public Expediente_DocumentoRow Dat;
		public Expediente_DocumentoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_Documento( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_Documento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DocumentoRow( _dst, false );
			Old = new Expediente_DocumentoRow( _dst , true );
		}
		
		
		public Expediente_Documento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_Documento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DocumentoRow( _dst, false );
			Old = new Expediente_DocumentoRow( _dst , true );
		}
				
		public Expediente_Documento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_Documento() : base() 
		{
			Init();
		}
		
		public Expediente_Documento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_Documento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_Documento",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DocumentoRow( _dst, false );
			Old = new Expediente_DocumentoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_Documento

#region Expediente_DocumentoTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_DocumentoTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field DocumentoTipoID;	
			public Int_Field InicialID;	
			public Boolean_Field Generado;	
			public DateTime_Field FechaGenerado;	
			public Boolean_Field Revisado;	
			public Boolean_Field Ok;	
			public String_Field DocumentoHTML;	
			public Boolean_Field Enviado;	

			public Expediente_DocumentoTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				DocumentoTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				InicialID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Generado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				FechaGenerado		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				Revisado		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Ok		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				DocumentoHTML		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Enviado		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class Expediente_DocumentoTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_DocumentoTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_DocumentoTipo";
	
		
		public Expediente_DocumentoTipoRow Dat;
		public Expediente_DocumentoTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_DocumentoTipo( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_DocumentoTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DocumentoTipoRow( _dst, false );
			Old = new Expediente_DocumentoTipoRow( _dst , true );
		}
		
		
		public Expediente_DocumentoTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_DocumentoTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DocumentoTipoRow( _dst, false );
			Old = new Expediente_DocumentoTipoRow( _dst , true );
		}
				
		public Expediente_DocumentoTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_DocumentoTipo() : base() 
		{
			Init();
		}
		
		public Expediente_DocumentoTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_DocumentoTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoTipoID", typeof( int ) );  
			_dt.Columns.Add( "InicialID", typeof( int ) );  
			_dt.Columns.Add( "Generado", typeof( Boolean ) );  
			_dt.Columns.Add( "FechaGenerado", typeof( DateTime ) );  
			_dt.Columns.Add( "Revisado", typeof( Boolean ) );  
			_dt.Columns.Add( "Ok", typeof( Boolean ) );  
			_dt.Columns.Add( "DocumentoHTML", typeof( String ) );  
			_dt.Columns.Add( "Enviado", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_DocumentoTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_DocumentoTipoRow( _dst, false );
			Old = new Expediente_DocumentoTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_DocumentoTipo

#region Expediente_Instruccion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_InstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaID;	
			public Int_Field ExpedienteID;	
			public Int_Field CorrespondenciaMovID;	
			public Int_Field InstruccionTipoID;	
			public DateTime_Field Fecha;	
			public Int_Field FuncionarioID;	
			public Int_Field CorrespondenciaID;	
			public String_Field Obs;	

			public Expediente_InstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				CorrespondenciaMovID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class Expediente_InstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_Instruccion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_Instruccion";
	
		
		public Expediente_InstruccionRow Dat;
		public Expediente_InstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_Instruccion( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_Instruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_InstruccionRow( _dst, false );
			Old = new Expediente_InstruccionRow( _dst , true );
		}
		
		
		public Expediente_Instruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_Instruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_InstruccionRow( _dst, false );
			Old = new Expediente_InstruccionRow( _dst , true );
		}
				
		public Expediente_Instruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_Instruccion() : base() 
		{
			Init();
		}
		
		public Expediente_Instruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_Instruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaMovID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_Instruccion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_InstruccionRow( _dst, false );
			Old = new Expediente_InstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_Instruccion

#region Expediente_Pendiente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_PendienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field PendienteID;	
			public DateTime_Field Fecha;	
			public Int_Field FuncionarioID;	
			public Int_Field BoletinDetalleID;	
			public DateTime_Field ProximaFecha;	
			public Boolean_Field Concluido;	
			public String_Field Obs;	

			public Expediente_PendienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PendienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				BoletinDetalleID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ProximaFecha		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class Expediente_PendienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_Pendiente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_Pendiente";
	
		
		public Expediente_PendienteRow Dat;
		public Expediente_PendienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_Pendiente( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_Pendiente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_PendienteRow( _dst, false );
			Old = new Expediente_PendienteRow( _dst , true );
		}
		
		
		public Expediente_Pendiente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_Pendiente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_PendienteRow( _dst, false );
			Old = new Expediente_PendienteRow( _dst , true );
		}
				
		public Expediente_Pendiente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_Pendiente() : base() 
		{
			Init();
		}
		
		public Expediente_Pendiente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_Pendiente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "PendienteID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "BoletinDetalleID", typeof( int ) );  
			_dt.Columns.Add( "ProximaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_Pendiente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_PendienteRow( _dst, false );
			Old = new Expediente_PendienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_Pendiente

#region Expediente_Pertenencia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_PertenenciaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Int_Field PertenenciaMotivoID;	
			public DateTime_Field Fecha;	
			public Int_Field FuncionarioID;	
			public Int_Field AgenteLocalID;	
			public String_Field Obs;	

			public Expediente_PertenenciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				PertenenciaMotivoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class Expediente_PertenenciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_Pertenencia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_Pertenencia";
	
		
		public Expediente_PertenenciaRow Dat;
		public Expediente_PertenenciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_Pertenencia( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_Pertenencia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_PertenenciaRow( _dst, false );
			Old = new Expediente_PertenenciaRow( _dst , true );
		}
		
		
		public Expediente_Pertenencia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_Pertenencia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_PertenenciaRow( _dst, false );
			Old = new Expediente_PertenenciaRow( _dst , true );
		}
				
		public Expediente_Pertenencia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_Pertenencia() : base() 
		{
			Init();
		}
		
		public Expediente_Pertenencia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_Pertenencia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "PertenenciaMotivoID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_Pertenencia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_PertenenciaRow( _dst, false );
			Old = new Expediente_PertenenciaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_Pertenencia

#region Expediente_Situacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Expediente_SituacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field TramiteSitID;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field SituacionFecha;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field FuncionarioID;	
			public String_Field Obs;	
			public String_Field Datos;	
			public DateTime_Field lastUpdated;	

			public Expediente_SituacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Datos		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class Expediente_SituacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Expediente_Situacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Expediente_Situacion";
	
		
		public Expediente_SituacionRow Dat;
		public Expediente_SituacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Expediente_Situacion( DataTable tab ) : base() 
		{
			_dbTableName = "Expediente_Situacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_SituacionRow( _dst, false );
			Old = new Expediente_SituacionRow( _dst , true );
		}
		
		
		public Expediente_Situacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Expediente_Situacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_SituacionRow( _dst, false );
			Old = new Expediente_SituacionRow( _dst , true );
		}
				
		public Expediente_Situacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Expediente_Situacion() : base() 
		{
			Init();
		}
		
		public Expediente_Situacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Expediente_Situacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Datos", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Expediente_Situacion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Expediente_SituacionRow( _dst, false );
			Old = new Expediente_SituacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Expediente_Situacion

#region ExpedienteCampo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ExpedienteCampoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public String_Field Campo;	
			public String_Field Valor;	
			public Boolean_Field Migrado;	

			public ExpedienteCampoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Campo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Valor		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Migrado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class ExpedienteCampoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ExpedienteCampo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ExpedienteCampo";
	
		
		public ExpedienteCampoRow Dat;
		public ExpedienteCampoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ExpedienteCampo( DataTable tab ) : base() 
		{
			_dbTableName = "ExpedienteCampo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteCampoRow( _dst, false );
			Old = new ExpedienteCampoRow( _dst , true );
		}
		
		
		public ExpedienteCampo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ExpedienteCampo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteCampoRow( _dst, false );
			Old = new ExpedienteCampoRow( _dst , true );
		}
				
		public ExpedienteCampo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ExpedienteCampo() : base() 
		{
			Init();
		}
		
		public ExpedienteCampo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ExpedienteCampo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Campo", typeof( String ) );  
			_dt.Columns.Add( "Valor", typeof( String ) );  
			_dt.Columns.Add( "Migrado", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ExpedienteCampo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteCampoRow( _dst, false );
			Old = new ExpedienteCampoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ExpedienteCampo

#region ExpedienteXPoder
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ExpedienteXPoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PoderID;	
			public Int_Field ExpedienteID;	

			public ExpedienteXPoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PoderID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class ExpedienteXPoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ExpedienteXPoder : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ExpedienteXPoder";
	
		
		public ExpedienteXPoderRow Dat;
		public ExpedienteXPoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ExpedienteXPoder( DataTable tab ) : base() 
		{
			_dbTableName = "ExpedienteXPoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteXPoderRow( _dst, false );
			Old = new ExpedienteXPoderRow( _dst , true );
		}
		
		
		public ExpedienteXPoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ExpedienteXPoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteXPoderRow( _dst, false );
			Old = new ExpedienteXPoderRow( _dst , true );
		}
				
		public ExpedienteXPoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ExpedienteXPoder() : base() 
		{
			Init();
		}
		
		public ExpedienteXPoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ExpedienteXPoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ExpedienteXPoder",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteXPoderRow( _dst, false );
			Old = new ExpedienteXPoderRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ExpedienteXPoder

#region ExpedienteXPropietario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ExpedienteXPropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field PropietarioID;	
			public Boolean_Field DerechoPropio;	

			public ExpedienteXPropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				DerechoPropio		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ExpedienteXPropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ExpedienteXPropietario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ExpedienteXPropietario";
	
		
		public ExpedienteXPropietarioRow Dat;
		public ExpedienteXPropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ExpedienteXPropietario( DataTable tab ) : base() 
		{
			_dbTableName = "ExpedienteXPropietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteXPropietarioRow( _dst, false );
			Old = new ExpedienteXPropietarioRow( _dst , true );
		}
		
		
		public ExpedienteXPropietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ExpedienteXPropietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteXPropietarioRow( _dst, false );
			Old = new ExpedienteXPropietarioRow( _dst , true );
		}
				
		public ExpedienteXPropietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ExpedienteXPropietario() : base() 
		{
			Init();
		}
		
		public ExpedienteXPropietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ExpedienteXPropietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "DerechoPropio", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ExpedienteXPropietario",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ExpedienteXPropietarioRow( _dst, false );
			Old = new ExpedienteXPropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ExpedienteXPropietario

#region expehuerfanos
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class expehuerfanosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field expedienteID;	
			public Int_Field expedientepadreID;	
			public Int_Field boletindetID;	
			public Int_Field expedientebolID;	

			public expehuerfanosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				expedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				expedientepadreID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				boletindetID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				expedientebolID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class expehuerfanosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class expehuerfanos : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "expehuerfanos";
	
		
		public expehuerfanosRow Dat;
		public expehuerfanosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public expehuerfanos( DataTable tab ) : base() 
		{
			_dbTableName = "expehuerfanos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new expehuerfanosRow( _dst, false );
			Old = new expehuerfanosRow( _dst , true );
		}
		
		
		public expehuerfanos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "expehuerfanos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new expehuerfanosRow( _dst, false );
			Old = new expehuerfanosRow( _dst , true );
		}
				
		public expehuerfanos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public expehuerfanos() : base() 
		{
			Init();
		}
		
		public expehuerfanos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "expehuerfanos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "expedienteID", typeof( int ) );  
			_dt.Columns.Add( "expedientepadreID", typeof( int ) );  
			_dt.Columns.Add( "boletindetID", typeof( int ) );  
			_dt.Columns.Add( "expedientebolID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_expehuerfanos",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new expehuerfanosRow( _dst, false );
			Old = new expehuerfanosRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion expehuerfanos

#region fc_facturacabecera
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class fc_facturacabeceraRow 
		{
			private  DSTab _dst;
			
			public Int_Field fc_facturacabeceraid;	
			public Int_Field fc_timbradoid;	
			public DateTime_Field fc_fechafactura;	
			public String_Field fc_nrofactura;	
			public Boolean_Field fc_anulado;	
			public Int_Field fc_clienteid;	
			public String_Field fc_clientenombre;	
			public String_Field fc_direccion;	
			public String_Field fc_tipofactura;	
			public String_Field fc_ruc;	
			public String_Field fc_nroremision;	
			public String_Field fc_telefono;	
			public Int_Field fc_monedaid;	
			public Decimal_Field fc_totalexentas;	
			public Decimal_Field fc_totaliva5;	
			public Decimal_Field fc_totaliva10;	
			public Decimal_Field fc_liqiva5;	
			public Decimal_Field fc_liqiva10;	
			public Decimal_Field fc_totaliva;	
			public Decimal_Field fc_total;	
			public String_Field fc_totalletras;	
			public String_Field fc_documentosasoc;	
			public DateTime_Field fc_fechaanulacion;	
			public String_Field fc_usuarioanulacion;	

			public fc_facturacabeceraRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				fc_facturacabeceraid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fc_timbradoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				fc_fechafactura		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				fc_nrofactura		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				fc_anulado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				fc_clienteid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				fc_clientenombre		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				fc_direccion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				fc_tipofactura		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				fc_ruc		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				fc_nroremision		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				fc_telefono		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				fc_monedaid		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				fc_totalexentas		= new Decimal_Field(	_dst, 13, IsOldDataVersion  );	
				fc_totaliva5		= new Decimal_Field(	_dst, 14, IsOldDataVersion  );	
				fc_totaliva10		= new Decimal_Field(	_dst, 15, IsOldDataVersion  );	
				fc_liqiva5		= new Decimal_Field(	_dst, 16, IsOldDataVersion  );	
				fc_liqiva10		= new Decimal_Field(	_dst, 17, IsOldDataVersion  );	
				fc_totaliva		= new Decimal_Field(	_dst, 18, IsOldDataVersion  );	
				fc_total		= new Decimal_Field(	_dst, 19, IsOldDataVersion  );	
				fc_totalletras		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				fc_documentosasoc		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				fc_fechaanulacion		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
				fc_usuarioanulacion		= new String_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class fc_facturacabeceraRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class fc_facturacabecera : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "fc_facturacabecera";
	
		
		public fc_facturacabeceraRow Dat;
		public fc_facturacabeceraRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public fc_facturacabecera( DataTable tab ) : base() 
		{
			_dbTableName = "fc_facturacabecera";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fc_facturacabeceraRow( _dst, false );
			Old = new fc_facturacabeceraRow( _dst , true );
		}
		
		
		public fc_facturacabecera( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "fc_facturacabecera";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fc_facturacabeceraRow( _dst, false );
			Old = new fc_facturacabeceraRow( _dst , true );
		}
				
		public fc_facturacabecera( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public fc_facturacabecera() : base() 
		{
			Init();
		}
		
		public fc_facturacabecera( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "fc_facturacabecera";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "fc_facturacabeceraid", typeof( int ) );  
			_dt.Columns.Add( "fc_timbradoid", typeof( int ) );  
			_dt.Columns.Add( "fc_fechafactura", typeof( DateTime ) );  
			_dt.Columns.Add( "fc_nrofactura", typeof( String ) );  
			_dt.Columns.Add( "fc_anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "fc_clienteid", typeof( int ) );  
			_dt.Columns.Add( "fc_clientenombre", typeof( String ) );  
			_dt.Columns.Add( "fc_direccion", typeof( String ) );  
			_dt.Columns.Add( "fc_tipofactura", typeof( String ) );  
			_dt.Columns.Add( "fc_ruc", typeof( String ) );  
			_dt.Columns.Add( "fc_nroremision", typeof( String ) );  
			_dt.Columns.Add( "fc_telefono", typeof( String ) );  
			_dt.Columns.Add( "fc_monedaid", typeof( int ) );  
			_dt.Columns.Add( "fc_totalexentas", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_totaliva5", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_totaliva10", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_liqiva5", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_liqiva10", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_totaliva", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_total", typeof( Decimal ) );  
			_dt.Columns.Add( "fc_totalletras", typeof( String ) );  
			_dt.Columns.Add( "fc_documentosasoc", typeof( String ) );  
			_dt.Columns.Add( "fc_fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "fc_usuarioanulacion", typeof( String ) );  
			
			

			
			_dt.Columns["fc_facturacabeceraid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_fc_facturacabecera",_dt.Columns["fc_facturacabeceraid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fc_facturacabeceraRow( _dst, false );
			Old = new fc_facturacabeceraRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion fc_facturacabecera

#region fd_facturadetalle
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class fd_facturadetalleRow 
		{
			private  DSTab _dst;
			
			public Int_Field fd_facturadetalleid;	
			public Int_Field fd_facturacabeceraid;	
			public Decimal_Field fd_cantidad;	
			public String_Field fd_descripcion;	
			public Decimal_Field fd_preciounitario;	
			public Decimal_Field fd_exentas;	
			public Decimal_Field fd_cincoporciento;	
			public Decimal_Field fd_diezporciento;	
			public Int_Field fd_presupuestocabid;	
			public String_Field fd_nroboletadeposito;	

			public fd_facturadetalleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				fd_facturadetalleid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fd_facturacabeceraid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				fd_cantidad		= new Decimal_Field(	_dst, 2, IsOldDataVersion  );	
				fd_descripcion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				fd_preciounitario		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
				fd_exentas		= new Decimal_Field(	_dst, 5, IsOldDataVersion  );	
				fd_cincoporciento		= new Decimal_Field(	_dst, 6, IsOldDataVersion  );	
				fd_diezporciento		= new Decimal_Field(	_dst, 7, IsOldDataVersion  );	
				fd_presupuestocabid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				fd_nroboletadeposito		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class fd_facturadetalleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class fd_facturadetalle : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "fd_facturadetalle";
	
		
		public fd_facturadetalleRow Dat;
		public fd_facturadetalleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public fd_facturadetalle( DataTable tab ) : base() 
		{
			_dbTableName = "fd_facturadetalle";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fd_facturadetalleRow( _dst, false );
			Old = new fd_facturadetalleRow( _dst , true );
		}
		
		
		public fd_facturadetalle( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "fd_facturadetalle";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fd_facturadetalleRow( _dst, false );
			Old = new fd_facturadetalleRow( _dst , true );
		}
				
		public fd_facturadetalle( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public fd_facturadetalle() : base() 
		{
			Init();
		}
		
		public fd_facturadetalle( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "fd_facturadetalle";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "fd_facturadetalleid", typeof( int ) );  
			_dt.Columns.Add( "fd_facturacabeceraid", typeof( int ) );  
			_dt.Columns.Add( "fd_cantidad", typeof( Decimal ) );  
			_dt.Columns.Add( "fd_descripcion", typeof( String ) );  
			_dt.Columns.Add( "fd_preciounitario", typeof( Decimal ) );  
			_dt.Columns.Add( "fd_exentas", typeof( Decimal ) );  
			_dt.Columns.Add( "fd_cincoporciento", typeof( Decimal ) );  
			_dt.Columns.Add( "fd_diezporciento", typeof( Decimal ) );  
			_dt.Columns.Add( "fd_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "fd_nroboletadeposito", typeof( String ) );  
			
			

			
			_dt.Columns["fd_facturadetalleid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_fd_facturadetalle",_dt.Columns["fd_facturadetalleid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fd_facturadetalleRow( _dst, false );
			Old = new fd_facturadetalleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion fd_facturadetalle

#region Feriado
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class FeriadoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field Fecha;	
			public Boolean_Field Fijo;	
			public String_Field Descrip;	

			public FeriadoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				Fijo		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class FeriadoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Feriado : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Feriado";
	
		
		public FeriadoRow Dat;
		public FeriadoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Feriado( DataTable tab ) : base() 
		{
			_dbTableName = "Feriado";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new FeriadoRow( _dst, false );
			Old = new FeriadoRow( _dst , true );
		}
		
		
		public Feriado( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Feriado";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new FeriadoRow( _dst, false );
			Old = new FeriadoRow( _dst , true );
		}
				
		public Feriado( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Feriado() : base() 
		{
			Init();
		}
		
		public Feriado( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Feriado";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Fijo", typeof( Boolean ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Feriado",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new FeriadoRow( _dst, false );
			Old = new FeriadoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Feriado

#region fp_formadepago
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class fp_formadepagoRow 
		{
			private  DSTab _dst;
			
			public Int_Field fp_formadepagoid;	
			public String_Field fp_descripcion;	

			public fp_formadepagoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				fp_formadepagoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fp_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class fp_formadepagoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class fp_formadepago : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "fp_formadepago";
	
		
		public fp_formadepagoRow Dat;
		public fp_formadepagoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public fp_formadepago( DataTable tab ) : base() 
		{
			_dbTableName = "fp_formadepago";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fp_formadepagoRow( _dst, false );
			Old = new fp_formadepagoRow( _dst , true );
		}
		
		
		public fp_formadepago( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "fp_formadepago";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fp_formadepagoRow( _dst, false );
			Old = new fp_formadepagoRow( _dst , true );
		}
				
		public fp_formadepago( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public fp_formadepago() : base() 
		{
			Init();
		}
		
		public fp_formadepago( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "fp_formadepago";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "fp_formadepagoid", typeof( int ) );  
			_dt.Columns.Add( "fp_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["fp_formadepagoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_fp_formadepago",_dt.Columns["fp_formadepagoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new fp_formadepagoRow( _dst, false );
			Old = new fp_formadepagoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion fp_formadepago

#region gg_gastogeneral
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class gg_gastogeneralRow 
		{
			private  DSTab _dst;
			
			public Int_Field gg_gastogeneralid;	
			public String_Field gg_descripcion;	

			public gg_gastogeneralRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				gg_gastogeneralid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				gg_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class gg_gastogeneralRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class gg_gastogeneral : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "gg_gastogeneral";
	
		
		public gg_gastogeneralRow Dat;
		public gg_gastogeneralRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public gg_gastogeneral( DataTable tab ) : base() 
		{
			_dbTableName = "gg_gastogeneral";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new gg_gastogeneralRow( _dst, false );
			Old = new gg_gastogeneralRow( _dst , true );
		}
		
		
		public gg_gastogeneral( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "gg_gastogeneral";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new gg_gastogeneralRow( _dst, false );
			Old = new gg_gastogeneralRow( _dst , true );
		}
				
		public gg_gastogeneral( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public gg_gastogeneral() : base() 
		{
			Init();
		}
		
		public gg_gastogeneral( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "gg_gastogeneral";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "gg_gastogeneralid", typeof( int ) );  
			_dt.Columns.Add( "gg_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["gg_gastogeneralid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_gg_gastogeneral",_dt.Columns["gg_gastogeneralid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new gg_gastogeneralRow( _dst, false );
			Old = new gg_gastogeneralRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion gg_gastogeneral

#region GlosarioPalCom
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class GlosarioPalComRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Palabra;	
			public String_Field Estado;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public String_Field Obs;	
			public String_Field Posicion;	
			public String_Field Tipo;	

			public GlosarioPalComRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Palabra		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Posicion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class GlosarioPalComRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class GlosarioPalCom : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "GlosarioPalCom";
	
		
		public GlosarioPalComRow Dat;
		public GlosarioPalComRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public GlosarioPalCom( DataTable tab ) : base() 
		{
			_dbTableName = "GlosarioPalCom";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GlosarioPalComRow( _dst, false );
			Old = new GlosarioPalComRow( _dst , true );
		}
		
		
		public GlosarioPalCom( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "GlosarioPalCom";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GlosarioPalComRow( _dst, false );
			Old = new GlosarioPalComRow( _dst , true );
		}
				
		public GlosarioPalCom( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public GlosarioPalCom() : base() 
		{
			Init();
		}
		
		public GlosarioPalCom( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "GlosarioPalCom";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Palabra", typeof( String ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Posicion", typeof( String ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_GlosarioPalCom",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GlosarioPalComRow( _dst, false );
			Old = new GlosarioPalComRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion GlosarioPalCom

#region Grupo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class GrupoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	

			public GrupoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class GrupoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Grupo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Grupo";
	
		
		public GrupoRow Dat;
		public GrupoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Grupo( DataTable tab ) : base() 
		{
			_dbTableName = "Grupo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GrupoRow( _dst, false );
			Old = new GrupoRow( _dst , true );
		}
		
		
		public Grupo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Grupo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GrupoRow( _dst, false );
			Old = new GrupoRow( _dst , true );
		}
				
		public Grupo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Grupo() : base() 
		{
			Init();
		}
		
		public Grupo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Grupo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Grupo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GrupoRow( _dst, false );
			Old = new GrupoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Grupo

#region GrupoEmpresarial
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class GrupoEmpresarialRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Direccion;	
			public String_Field Telefono;	

			public GrupoEmpresarialRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Telefono		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class GrupoEmpresarialRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class GrupoEmpresarial : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "GrupoEmpresarial";
	
		
		public GrupoEmpresarialRow Dat;
		public GrupoEmpresarialRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public GrupoEmpresarial( DataTable tab ) : base() 
		{
			_dbTableName = "GrupoEmpresarial";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GrupoEmpresarialRow( _dst, false );
			Old = new GrupoEmpresarialRow( _dst , true );
		}
		
		
		public GrupoEmpresarial( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "GrupoEmpresarial";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GrupoEmpresarialRow( _dst, false );
			Old = new GrupoEmpresarialRow( _dst , true );
		}
				
		public GrupoEmpresarial( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public GrupoEmpresarial() : base() 
		{
			Init();
		}
		
		public GrupoEmpresarial( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "GrupoEmpresarial";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Telefono", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_GrupoEmpresarial",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new GrupoEmpresarialRow( _dst, false );
			Old = new GrupoEmpresarialRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion GrupoEmpresarial

#region in_instancia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class in_instanciaRow 
		{
			private  DSTab _dst;
			
			public Int_Field in_instanciaid;	
			public String_Field in_descripcion;	
			public String_Field in_abrev;	

			public in_instanciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				in_instanciaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				in_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				in_abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class in_instanciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class in_instancia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "in_instancia";
	
		
		public in_instanciaRow Dat;
		public in_instanciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public in_instancia( DataTable tab ) : base() 
		{
			_dbTableName = "in_instancia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new in_instanciaRow( _dst, false );
			Old = new in_instanciaRow( _dst , true );
		}
		
		
		public in_instancia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "in_instancia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new in_instanciaRow( _dst, false );
			Old = new in_instanciaRow( _dst , true );
		}
				
		public in_instancia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public in_instancia() : base() 
		{
			Init();
		}
		
		public in_instancia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "in_instancia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "in_instanciaid", typeof( int ) );  
			_dt.Columns.Add( "in_descripcion", typeof( String ) );  
			_dt.Columns.Add( "in_abrev", typeof( String ) );  
			
			

			
			_dt.Columns["in_instanciaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_in_instancia",_dt.Columns["in_instanciaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new in_instanciaRow( _dst, false );
			Old = new in_instanciaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion in_instancia

#region InstruccionTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class InstruccionTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public InstruccionTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class InstruccionTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class InstruccionTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "InstruccionTipo";
	
		
		public InstruccionTipoRow Dat;
		public InstruccionTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public InstruccionTipo( DataTable tab ) : base() 
		{
			_dbTableName = "InstruccionTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new InstruccionTipoRow( _dst, false );
			Old = new InstruccionTipoRow( _dst , true );
		}
		
		
		public InstruccionTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "InstruccionTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new InstruccionTipoRow( _dst, false );
			Old = new InstruccionTipoRow( _dst , true );
		}
				
		public InstruccionTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public InstruccionTipo() : base() 
		{
			Init();
		}
		
		public InstruccionTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "InstruccionTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_InstruccionTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new InstruccionTipoRow( _dst, false );
			Old = new InstruccionTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion InstruccionTipo

#region LedesDetalle
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class LedesDetalleRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field LedesFacturaID;	
			public Int_Field line_item_number;	
			public String_Field exp_fee_inv_adj_type;	
			public Decimal_Field line_item_number_of_units;	
			public Decimal_Field line_item_adjustment_amount;	
			public Decimal_Field line_item_total;	
			public DateTime_Field line_item_date;	
			public String_Field line_item_task_code;	
			public String_Field line_item_expense_code;	
			public String_Field line_item_activity_code;	
			public String_Field line_item_description;	
			public Decimal_Field line_item_unit_cost;	
			public Decimal_Field line_item_tax_rate;	
			public Decimal_Field line_item_tax_total;	
			public String_Field line_item_tax_type;	

			public LedesDetalleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				LedesFacturaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				line_item_number		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				exp_fee_inv_adj_type		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				line_item_number_of_units		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
				line_item_adjustment_amount		= new Decimal_Field(	_dst, 5, IsOldDataVersion  );	
				line_item_total		= new Decimal_Field(	_dst, 6, IsOldDataVersion  );	
				line_item_date		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				line_item_task_code		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				line_item_expense_code		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				line_item_activity_code		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				line_item_description		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				line_item_unit_cost		= new Decimal_Field(	_dst, 12, IsOldDataVersion  );	
				line_item_tax_rate		= new Decimal_Field(	_dst, 13, IsOldDataVersion  );	
				line_item_tax_total		= new Decimal_Field(	_dst, 14, IsOldDataVersion  );	
				line_item_tax_type		= new String_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class LedesDetalleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class LedesDetalle : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "LedesDetalle";
	
		
		public LedesDetalleRow Dat;
		public LedesDetalleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public LedesDetalle( DataTable tab ) : base() 
		{
			_dbTableName = "LedesDetalle";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LedesDetalleRow( _dst, false );
			Old = new LedesDetalleRow( _dst , true );
		}
		
		
		public LedesDetalle( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "LedesDetalle";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LedesDetalleRow( _dst, false );
			Old = new LedesDetalleRow( _dst , true );
		}
				
		public LedesDetalle( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public LedesDetalle() : base() 
		{
			Init();
		}
		
		public LedesDetalle( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "LedesDetalle";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "LedesFacturaID", typeof( int ) );  
			_dt.Columns.Add( "line_item_number", typeof( int ) );  
			_dt.Columns.Add( "exp_fee_inv_adj_type", typeof( String ) );  
			_dt.Columns.Add( "line_item_number_of_units", typeof( Decimal ) );  
			_dt.Columns.Add( "line_item_adjustment_amount", typeof( Decimal ) );  
			_dt.Columns.Add( "line_item_total", typeof( Decimal ) );  
			_dt.Columns.Add( "line_item_date", typeof( DateTime ) );  
			_dt.Columns.Add( "line_item_task_code", typeof( String ) );  
			_dt.Columns.Add( "line_item_expense_code", typeof( String ) );  
			_dt.Columns.Add( "line_item_activity_code", typeof( String ) );  
			_dt.Columns.Add( "line_item_description", typeof( String ) );  
			_dt.Columns.Add( "line_item_unit_cost", typeof( Decimal ) );  
			_dt.Columns.Add( "line_item_tax_rate", typeof( Decimal ) );  
			_dt.Columns.Add( "line_item_tax_total", typeof( Decimal ) );  
			_dt.Columns.Add( "line_item_tax_type", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_LedesDetalle",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LedesDetalleRow( _dst, false );
			Old = new LedesDetalleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion LedesDetalle

#region LedesFactura
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class LedesFacturaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Estado;	
			public DateTime_Field Fecha;	
			public DateTime_Field invoice_date;	
			public String_Field invoice_number;	
			public String_Field client_id;	
			public String_Field law_firm_matter_id;	
			public Decimal_Field invoice_total;	
			public DateTime_Field billing_start_date;	
			public DateTime_Field billing_end_date;	
			public String_Field invoice_description;	
			public String_Field timekeeper_id;	
			public String_Field law_firm_id;	
			public String_Field timekeeper_name;	
			public String_Field timekeeper_classification;	
			public String_Field client_matter_id;	
			public String_Field usuario;	
			public String_Field po_number;	
			public String_Field client_tax_id;	
			public String_Field matter_name;	
			public Decimal_Field invoice_tax_total;	
			public Decimal_Field invoice_net_total;	
			public String_Field invoice_currency;	
			public String_Field timekeeper_last_name;	
			public String_Field timekeeper_first_name;	
			public String_Field account_type;	
			public String_Field law_firm_name;	
			public String_Field law_firm_address_1;	
			public String_Field law_firm_address_2;	
			public String_Field law_firm_city;	
			public String_Field law_firm_stateorregion;	
			public String_Field law_firm_postcode;	
			public String_Field law_firm_country;	
			public String_Field client_name;	
			public String_Field client_address_1;	
			public String_Field client_address_2;	
			public String_Field client_city;	
			public String_Field client_stateorregion;	
			public String_Field client_postcode;	
			public String_Field client_country;	

			public LedesFacturaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				invoice_date		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				invoice_number		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				client_id		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				law_firm_matter_id		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				invoice_total		= new Decimal_Field(	_dst, 7, IsOldDataVersion  );	
				billing_start_date		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				billing_end_date		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				invoice_description		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				timekeeper_id		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				law_firm_id		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				timekeeper_name		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				timekeeper_classification		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				client_matter_id		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				usuario		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				po_number		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				client_tax_id		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				matter_name		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				invoice_tax_total		= new Decimal_Field(	_dst, 20, IsOldDataVersion  );	
				invoice_net_total		= new Decimal_Field(	_dst, 21, IsOldDataVersion  );	
				invoice_currency		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				timekeeper_last_name		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				timekeeper_first_name		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				account_type		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				law_firm_name		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				law_firm_address_1		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				law_firm_address_2		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				law_firm_city		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				law_firm_stateorregion		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				law_firm_postcode		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				law_firm_country		= new String_Field(	_dst, 32, IsOldDataVersion  );	
				client_name		= new String_Field(	_dst, 33, IsOldDataVersion  );	
				client_address_1		= new String_Field(	_dst, 34, IsOldDataVersion  );	
				client_address_2		= new String_Field(	_dst, 35, IsOldDataVersion  );	
				client_city		= new String_Field(	_dst, 36, IsOldDataVersion  );	
				client_stateorregion		= new String_Field(	_dst, 37, IsOldDataVersion  );	
				client_postcode		= new String_Field(	_dst, 38, IsOldDataVersion  );	
				client_country		= new String_Field(	_dst, 39, IsOldDataVersion  );	
			}
		} // end class LedesFacturaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class LedesFactura : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "LedesFactura";
	
		
		public LedesFacturaRow Dat;
		public LedesFacturaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public LedesFactura( DataTable tab ) : base() 
		{
			_dbTableName = "LedesFactura";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LedesFacturaRow( _dst, false );
			Old = new LedesFacturaRow( _dst , true );
		}
		
		
		public LedesFactura( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "LedesFactura";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LedesFacturaRow( _dst, false );
			Old = new LedesFacturaRow( _dst , true );
		}
				
		public LedesFactura( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public LedesFactura() : base() 
		{
			Init();
		}
		
		public LedesFactura( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "LedesFactura";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "invoice_date", typeof( DateTime ) );  
			_dt.Columns.Add( "invoice_number", typeof( String ) );  
			_dt.Columns.Add( "client_id", typeof( String ) );  
			_dt.Columns.Add( "law_firm_matter_id", typeof( String ) );  
			_dt.Columns.Add( "invoice_total", typeof( Decimal ) );  
			_dt.Columns.Add( "billing_start_date", typeof( DateTime ) );  
			_dt.Columns.Add( "billing_end_date", typeof( DateTime ) );  
			_dt.Columns.Add( "invoice_description", typeof( String ) );  
			_dt.Columns.Add( "timekeeper_id", typeof( String ) );  
			_dt.Columns.Add( "law_firm_id", typeof( String ) );  
			_dt.Columns.Add( "timekeeper_name", typeof( String ) );  
			_dt.Columns.Add( "timekeeper_classification", typeof( String ) );  
			_dt.Columns.Add( "client_matter_id", typeof( String ) );  
			_dt.Columns.Add( "usuario", typeof( String ) );  
			_dt.Columns.Add( "po_number", typeof( String ) );  
			_dt.Columns.Add( "client_tax_id", typeof( String ) );  
			_dt.Columns.Add( "matter_name", typeof( String ) );  
			_dt.Columns.Add( "invoice_tax_total", typeof( Decimal ) );  
			_dt.Columns.Add( "invoice_net_total", typeof( Decimal ) );  
			_dt.Columns.Add( "invoice_currency", typeof( String ) );  
			_dt.Columns.Add( "timekeeper_last_name", typeof( String ) );  
			_dt.Columns.Add( "timekeeper_first_name", typeof( String ) );  
			_dt.Columns.Add( "account_type", typeof( String ) );  
			_dt.Columns.Add( "law_firm_name", typeof( String ) );  
			_dt.Columns.Add( "law_firm_address_1", typeof( String ) );  
			_dt.Columns.Add( "law_firm_address_2", typeof( String ) );  
			_dt.Columns.Add( "law_firm_city", typeof( String ) );  
			_dt.Columns.Add( "law_firm_stateorregion", typeof( String ) );  
			_dt.Columns.Add( "law_firm_postcode", typeof( String ) );  
			_dt.Columns.Add( "law_firm_country", typeof( String ) );  
			_dt.Columns.Add( "client_name", typeof( String ) );  
			_dt.Columns.Add( "client_address_1", typeof( String ) );  
			_dt.Columns.Add( "client_address_2", typeof( String ) );  
			_dt.Columns.Add( "client_city", typeof( String ) );  
			_dt.Columns.Add( "client_stateorregion", typeof( String ) );  
			_dt.Columns.Add( "client_postcode", typeof( String ) );  
			_dt.Columns.Add( "client_country", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_LedesFactura",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LedesFacturaRow( _dst, false );
			Old = new LedesFacturaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion LedesFactura

#region ListadoCab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ListadoCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field FuncionarioGenID;	
			public Int_Field FuncionarioRemID;	
			public DateTime_Field FecGen;	
			public DateTime_Field FecDesde;	
			public DateTime_Field FecHasta;	

			public ListadoCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				FuncionarioGenID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioRemID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecGen		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FecDesde		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FecHasta		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class ListadoCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ListadoCab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ListadoCab";
	
		
		public ListadoCabRow Dat;
		public ListadoCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ListadoCab( DataTable tab ) : base() 
		{
			_dbTableName = "ListadoCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoCabRow( _dst, false );
			Old = new ListadoCabRow( _dst , true );
		}
		
		
		public ListadoCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ListadoCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoCabRow( _dst, false );
			Old = new ListadoCabRow( _dst , true );
		}
				
		public ListadoCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ListadoCab() : base() 
		{
			Init();
		}
		
		public ListadoCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ListadoCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRemID", typeof( int ) );  
			_dt.Columns.Add( "FecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "FecDesde", typeof( DateTime ) );  
			_dt.Columns.Add( "FecHasta", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ListadoCab",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoCabRow( _dst, false );
			Old = new ListadoCabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ListadoCab

#region ListadoDet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ListadoDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ListadoCabID;	
			public Int_Field ExpedienteID;	
			public DateTime_Field FecVencSit;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field SituacionID;	
			public String_Field Propietario;	
			public String_Field Pais;	

			public ListadoDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ListadoCabID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FecVencSit		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Pais		= new String_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class ListadoDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ListadoDet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ListadoDet";
	
		
		public ListadoDetRow Dat;
		public ListadoDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ListadoDet( DataTable tab ) : base() 
		{
			_dbTableName = "ListadoDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoDetRow( _dst, false );
			Old = new ListadoDetRow( _dst , true );
		}
		
		
		public ListadoDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ListadoDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoDetRow( _dst, false );
			Old = new ListadoDetRow( _dst , true );
		}
				
		public ListadoDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ListadoDet() : base() 
		{
			Init();
		}
		
		public ListadoDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ListadoDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ListadoCabID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "FecVencSit", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Pais", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ListadoDet",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoDetRow( _dst, false );
			Old = new ListadoDetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ListadoDet

#region ListadoEnvio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ListadoEnvioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ModoEnvioID;	
			public Int_Field SuscripcionID;	
			public Int_Field ListadoCabID;	
			public Int_Field ClienteExternoID;	
			public Int_Field ClienteInternoID;	
			public String_Field MailTo;	
			public String_Field MailOrigen;	
			public String_Field MailSubject;	
			public String_Field Fax;	
			public String_Field Msg;	
			public DateTime_Field FecEnvio;	
			public Int_Field IdiomaID;	

			public ListadoEnvioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SuscripcionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ListadoCabID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClienteExternoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClienteInternoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				MailTo		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				MailSubject		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Msg		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class ListadoEnvioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ListadoEnvio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ListadoEnvio";
	
		
		public ListadoEnvioRow Dat;
		public ListadoEnvioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ListadoEnvio( DataTable tab ) : base() 
		{
			_dbTableName = "ListadoEnvio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoEnvioRow( _dst, false );
			Old = new ListadoEnvioRow( _dst , true );
		}
		
		
		public ListadoEnvio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ListadoEnvio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoEnvioRow( _dst, false );
			Old = new ListadoEnvioRow( _dst , true );
		}
				
		public ListadoEnvio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ListadoEnvio() : base() 
		{
			Init();
		}
		
		public ListadoEnvio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ListadoEnvio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionID", typeof( int ) );  
			_dt.Columns.Add( "ListadoCabID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteInternoID", typeof( int ) );  
			_dt.Columns.Add( "MailTo", typeof( String ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "MailSubject", typeof( String ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "Msg", typeof( String ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ListadoEnvio",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListadoEnvioRow( _dst, false );
			Old = new ListadoEnvioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ListadoEnvio

#region LogCrecimiento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class LogCrecimientoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field Fecha;	
			public String_Field BD;	
			public Int_Field Tamanho;	

			public LogCrecimientoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				BD		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Tamanho		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class LogCrecimientoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class LogCrecimiento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "LogCrecimiento";
	
		
		public LogCrecimientoRow Dat;
		public LogCrecimientoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public LogCrecimiento( DataTable tab ) : base() 
		{
			_dbTableName = "LogCrecimiento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogCrecimientoRow( _dst, false );
			Old = new LogCrecimientoRow( _dst , true );
		}
		
		
		public LogCrecimiento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "LogCrecimiento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogCrecimientoRow( _dst, false );
			Old = new LogCrecimientoRow( _dst , true );
		}
				
		public LogCrecimiento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public LogCrecimiento() : base() 
		{
			Init();
		}
		
		public LogCrecimiento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "LogCrecimiento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "BD", typeof( String ) );  
			_dt.Columns.Add( "Tamanho", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_LogCrecimiento",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogCrecimientoRow( _dst, false );
			Old = new LogCrecimientoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion LogCrecimiento

#region Logotipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class LogotipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClicheNro;	
			public String_Field Path;	
			public Binary_Field Imagen;	
			public String_Field Denominacion;	
			public String_Field Propietario;	
			public String_Field Agente;	
			public Int_Field ActaNumero;	
			public Int_Field ActaAnio;	
			public DateTime_Field FechaAlta;	
			public Int_Field FuncionarioID;	

			public LogotipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClicheNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Path		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Imagen		= new Binary_Field(	_dst, 3, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Agente		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ActaNumero		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class LogotipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Logotipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Logotipo";
	
		
		public LogotipoRow Dat;
		public LogotipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Logotipo( DataTable tab ) : base() 
		{
			_dbTableName = "Logotipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogotipoRow( _dst, false );
			Old = new LogotipoRow( _dst , true );
		}
		
		
		public Logotipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Logotipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogotipoRow( _dst, false );
			Old = new LogotipoRow( _dst , true );
		}
				
		public Logotipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Logotipo() : base() 
		{
			Init();
		}
		
		public Logotipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Logotipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClicheNro", typeof( int ) );  
			_dt.Columns.Add( "Path", typeof( String ) );  
			_dt.Columns.Add( "Imagen", typeof( Byte[] ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Agente", typeof( String ) );  
			_dt.Columns.Add( "ActaNumero", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Logotipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogotipoRow( _dst, false );
			Old = new LogotipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Logotipo

#region LogotipoCateg
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class LogotipoCategRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field LogoID;	
			public Int_Field CategoriaID;	
			public String_Field Obs;	

			public LogotipoCategRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				LogoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				CategoriaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class LogotipoCategRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class LogotipoCateg : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "LogotipoCateg";
	
		
		public LogotipoCategRow Dat;
		public LogotipoCategRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public LogotipoCateg( DataTable tab ) : base() 
		{
			_dbTableName = "LogotipoCateg";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogotipoCategRow( _dst, false );
			Old = new LogotipoCategRow( _dst , true );
		}
		
		
		public LogotipoCateg( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "LogotipoCateg";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogotipoCategRow( _dst, false );
			Old = new LogotipoCategRow( _dst , true );
		}
				
		public LogotipoCateg( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public LogotipoCateg() : base() 
		{
			Init();
		}
		
		public LogotipoCateg( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "LogotipoCateg";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "LogoID", typeof( int ) );  
			_dt.Columns.Add( "CategoriaID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_LogotipoCateg",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new LogotipoCategRow( _dst, false );
			Old = new LogotipoCategRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion LogotipoCateg

#region Marca
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public String_Field Fonetizada;	
			public Int_Field MarcaTipoID;	
			public Int_Field ClaseID;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigente;	
			public Int_Field LogotipoID;	
			public Int_Field ExpedienteVigenteID;	
			public Boolean_Field OtrosClientes;	
			public Int_Field MarcaRegRenID;	
			public Int_Field MarcaRegRenAnt;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public String_Field Obs;	
			public DateTime_Field lastUpdated;	
			public Int_Field TipoAtencionxMarca;	
			public Int_Field IDTipoAtencionxMarca;	

			public MarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Fonetizada		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ExpedienteVigenteID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				OtrosClientes		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				MarcaRegRenAnt		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 24, IsOldDataVersion  );	
				TipoAtencionxMarca		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				IDTipoAtencionxMarca		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
			}
		} // end class MarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Marca : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Marca";
	
		
		public MarcaRow Dat;
		public MarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Marca( DataTable tab ) : base() 
		{
			_dbTableName = "Marca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaRow( _dst, false );
			Old = new MarcaRow( _dst , true );
		}
		
		
		public Marca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Marca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaRow( _dst, false );
			Old = new MarcaRow( _dst , true );
		}
				
		public Marca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Marca() : base() 
		{
			Init();
		}
		
		public Marca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Marca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "Fonetizada", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteVigenteID", typeof( int ) );  
			_dt.Columns.Add( "OtrosClientes", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "MarcaRegRenAnt", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			_dt.Columns.Add( "TipoAtencionxMarca", typeof( int ) );  
			_dt.Columns.Add( "IDTipoAtencionxMarca", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Marca",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaRow( _dst, false );
			Old = new MarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Marca

#region Marca_ClaseIdioma
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Marca_ClaseIdiomaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaID;	
			public Int_Field IdiomaID;	
			public String_Field Descrip;	

			public Marca_ClaseIdiomaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class Marca_ClaseIdiomaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Marca_ClaseIdioma : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Marca_ClaseIdioma";
	
		
		public Marca_ClaseIdiomaRow Dat;
		public Marca_ClaseIdiomaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Marca_ClaseIdioma( DataTable tab ) : base() 
		{
			_dbTableName = "Marca_ClaseIdioma";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Marca_ClaseIdiomaRow( _dst, false );
			Old = new Marca_ClaseIdiomaRow( _dst , true );
		}
		
		
		public Marca_ClaseIdioma( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Marca_ClaseIdioma";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Marca_ClaseIdiomaRow( _dst, false );
			Old = new Marca_ClaseIdiomaRow( _dst , true );
		}
				
		public Marca_ClaseIdioma( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Marca_ClaseIdioma() : base() 
		{
			Init();
		}
		
		public Marca_ClaseIdioma( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Marca_ClaseIdioma";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Marca_ClaseIdioma",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Marca_ClaseIdiomaRow( _dst, false );
			Old = new Marca_ClaseIdiomaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Marca_ClaseIdioma

#region MarcaClaseVig
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaClaseVigRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field MarcaID;	
			public String_Field ClaseID;	

			public MarcaClaseVigRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseID		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class MarcaClaseVigRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaClaseVig : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaClaseVig";
	
		
		public MarcaClaseVigRow Dat;
		public MarcaClaseVigRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaClaseVig( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaClaseVig";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaClaseVigRow( _dst, false );
			Old = new MarcaClaseVigRow( _dst , true );
		}
		
		
		public MarcaClaseVig( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaClaseVig";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaClaseVigRow( _dst, false );
			Old = new MarcaClaseVigRow( _dst , true );
		}
				
		public MarcaClaseVig( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaClaseVig() : base() 
		{
			Init();
		}
		
		public MarcaClaseVig( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaClaseVig";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaClaseVig",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaClaseVigRow( _dst, false );
			Old = new MarcaClaseVigRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaClaseVig

#region MarcaDF
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaDFRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field tabla;	
			public Decimal_Field recnum;	
			public String_Field marca;	
			public String_Field tipo;	
			public String_Field clase;	
			public Decimal_Field regac1;	
			public Decimal_Field regac2;	
			public Decimal_Field biblio;	
			public Decimal_Field exp;	
			public Decimal_Field nroac1;	
			public Decimal_Field nroac2;	
			public String_Field fecpre;	
			public Decimal_Field poder;	
			public Decimal_Field agente;	
			public String_Field fecvto;	
			public String_Field mclave;	
			public String_Field fecconce;	
			public Decimal_Field regan1;	
			public Decimal_Field regan2;	
			public String_Field artserv;	
			public Decimal_Field agenloc;	
			public String_Field instruc;	
			public String_Field tramite;	
			public Decimal_Field pagpub;	
			public Int_Field aniopub;	
			public String_Field fecvtopub;	
			public Decimal_Field bol1;	
			public Decimal_Field bol2;	
			public String_Field ultpub;	
			public Int_Field nrohj1;	
			public Int_Field nrohj2;	
			public Decimal_Field nropag;	
			public Decimal_Field situacion;	
			public String_Field fecsit;	
			public String_Field fecvtosit;	
			public String_Field oposicion;	
			public String_Field fecini;	
			public String_Field refage;	
			public String_Field idini;	
			public String_Field corresp1;	
			public String_Field corresp2;	
			public String_Field obstra;	
			public String_Field obsreg;	
			public String_Field nmobs;	
			public Boolean_Field piloto;	
			public Int_Field marcaID;	
			public Boolean_Field procesado;	
			public String_Field solic;	

			public MarcaDFRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tabla		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				recnum		= new Decimal_Field(	_dst, 2, IsOldDataVersion  );	
				marca		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				tipo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				clase		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				regac1		= new Decimal_Field(	_dst, 6, IsOldDataVersion  );	
				regac2		= new Decimal_Field(	_dst, 7, IsOldDataVersion  );	
				biblio		= new Decimal_Field(	_dst, 8, IsOldDataVersion  );	
				exp		= new Decimal_Field(	_dst, 9, IsOldDataVersion  );	
				nroac1		= new Decimal_Field(	_dst, 10, IsOldDataVersion  );	
				nroac2		= new Decimal_Field(	_dst, 11, IsOldDataVersion  );	
				fecpre		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				poder		= new Decimal_Field(	_dst, 13, IsOldDataVersion  );	
				agente		= new Decimal_Field(	_dst, 14, IsOldDataVersion  );	
				fecvto		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				mclave		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				fecconce		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				regan1		= new Decimal_Field(	_dst, 18, IsOldDataVersion  );	
				regan2		= new Decimal_Field(	_dst, 19, IsOldDataVersion  );	
				artserv		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				agenloc		= new Decimal_Field(	_dst, 21, IsOldDataVersion  );	
				instruc		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				tramite		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				pagpub		= new Decimal_Field(	_dst, 24, IsOldDataVersion  );	
				aniopub		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				fecvtopub		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				bol1		= new Decimal_Field(	_dst, 27, IsOldDataVersion  );	
				bol2		= new Decimal_Field(	_dst, 28, IsOldDataVersion  );	
				ultpub		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				nrohj1		= new Int_Field(	_dst, 30, IsOldDataVersion  );	
				nrohj2		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				nropag		= new Decimal_Field(	_dst, 32, IsOldDataVersion  );	
				situacion		= new Decimal_Field(	_dst, 33, IsOldDataVersion  );	
				fecsit		= new String_Field(	_dst, 34, IsOldDataVersion  );	
				fecvtosit		= new String_Field(	_dst, 35, IsOldDataVersion  );	
				oposicion		= new String_Field(	_dst, 36, IsOldDataVersion  );	
				fecini		= new String_Field(	_dst, 37, IsOldDataVersion  );	
				refage		= new String_Field(	_dst, 38, IsOldDataVersion  );	
				idini		= new String_Field(	_dst, 39, IsOldDataVersion  );	
				corresp1		= new String_Field(	_dst, 40, IsOldDataVersion  );	
				corresp2		= new String_Field(	_dst, 41, IsOldDataVersion  );	
				obstra		= new String_Field(	_dst, 42, IsOldDataVersion  );	
				obsreg		= new String_Field(	_dst, 43, IsOldDataVersion  );	
				nmobs		= new String_Field(	_dst, 44, IsOldDataVersion  );	
				piloto		= new Boolean_Field(	_dst, 45, IsOldDataVersion  );	
				marcaID		= new Int_Field(	_dst, 46, IsOldDataVersion  );	
				procesado		= new Boolean_Field(	_dst, 47, IsOldDataVersion  );	
				solic		= new String_Field(	_dst, 48, IsOldDataVersion  );	
			}
		} // end class MarcaDFRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaDF : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaDF";
	
		
		public MarcaDFRow Dat;
		public MarcaDFRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaDF( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaDF";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaDFRow( _dst, false );
			Old = new MarcaDFRow( _dst , true );
		}
		
		
		public MarcaDF( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaDF";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaDFRow( _dst, false );
			Old = new MarcaDFRow( _dst , true );
		}
				
		public MarcaDF( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaDF() : base() 
		{
			Init();
		}
		
		public MarcaDF( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaDF";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "tabla", typeof( String ) );  
			_dt.Columns.Add( "recnum", typeof( Decimal ) );  
			_dt.Columns.Add( "marca", typeof( String ) );  
			_dt.Columns.Add( "tipo", typeof( String ) );  
			_dt.Columns.Add( "clase", typeof( String ) );  
			_dt.Columns.Add( "regac1", typeof( Decimal ) );  
			_dt.Columns.Add( "regac2", typeof( Decimal ) );  
			_dt.Columns.Add( "biblio", typeof( Decimal ) );  
			_dt.Columns.Add( "exp", typeof( Decimal ) );  
			_dt.Columns.Add( "nroac1", typeof( Decimal ) );  
			_dt.Columns.Add( "nroac2", typeof( Decimal ) );  
			_dt.Columns.Add( "fecpre", typeof( String ) );  
			_dt.Columns.Add( "poder", typeof( Decimal ) );  
			_dt.Columns.Add( "agente", typeof( Decimal ) );  
			_dt.Columns.Add( "fecvto", typeof( String ) );  
			_dt.Columns.Add( "mclave", typeof( String ) );  
			_dt.Columns.Add( "fecconce", typeof( String ) );  
			_dt.Columns.Add( "regan1", typeof( Decimal ) );  
			_dt.Columns.Add( "regan2", typeof( Decimal ) );  
			_dt.Columns.Add( "artserv", typeof( String ) );  
			_dt.Columns.Add( "agenloc", typeof( Decimal ) );  
			_dt.Columns.Add( "instruc", typeof( String ) );  
			_dt.Columns.Add( "tramite", typeof( String ) );  
			_dt.Columns.Add( "pagpub", typeof( Decimal ) );  
			_dt.Columns.Add( "aniopub", typeof( int ) );  
			_dt.Columns.Add( "fecvtopub", typeof( String ) );  
			_dt.Columns.Add( "bol1", typeof( Decimal ) );  
			_dt.Columns.Add( "bol2", typeof( Decimal ) );  
			_dt.Columns.Add( "ultpub", typeof( String ) );  
			_dt.Columns.Add( "nrohj1", typeof( int ) );  
			_dt.Columns.Add( "nrohj2", typeof( int ) );  
			_dt.Columns.Add( "nropag", typeof( Decimal ) );  
			_dt.Columns.Add( "situacion", typeof( Decimal ) );  
			_dt.Columns.Add( "fecsit", typeof( String ) );  
			_dt.Columns.Add( "fecvtosit", typeof( String ) );  
			_dt.Columns.Add( "oposicion", typeof( String ) );  
			_dt.Columns.Add( "fecini", typeof( String ) );  
			_dt.Columns.Add( "refage", typeof( String ) );  
			_dt.Columns.Add( "idini", typeof( String ) );  
			_dt.Columns.Add( "corresp1", typeof( String ) );  
			_dt.Columns.Add( "corresp2", typeof( String ) );  
			_dt.Columns.Add( "obstra", typeof( String ) );  
			_dt.Columns.Add( "obsreg", typeof( String ) );  
			_dt.Columns.Add( "nmobs", typeof( String ) );  
			_dt.Columns.Add( "piloto", typeof( Boolean ) );  
			_dt.Columns.Add( "marcaID", typeof( int ) );  
			_dt.Columns.Add( "procesado", typeof( Boolean ) );  
			_dt.Columns.Add( "solic", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaDF",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaDFRow( _dst, false );
			Old = new MarcaDFRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaDF

#region MarcaExt
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaExtRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field Clase;	
			public String_Field MotivoReg;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field RegNro;	
			public String_Field PaisRegistro;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecUltModif;	
			public String_Field PropNombre;	
			public String_Field PropDir;	
			public String_Field PropPais;	
			public Int_Field ClienteID;	
			public Int_Field CorrespondenciaID;	

			public MarcaExtRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MotivoReg		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				RegNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				PaisRegistro		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				FecUltModif		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				PropNombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				PropDir		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				PropPais		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
			}
		} // end class MarcaExtRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaExt : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaExt";
	
		
		public MarcaExtRow Dat;
		public MarcaExtRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaExt( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaExt";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaExtRow( _dst, false );
			Old = new MarcaExtRow( _dst , true );
		}
		
		
		public MarcaExt( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaExt";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaExtRow( _dst, false );
			Old = new MarcaExtRow( _dst , true );
		}
				
		public MarcaExt( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaExt() : base() 
		{
			Init();
		}
		
		public MarcaExt( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaExt";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "MotivoReg", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "RegNro", typeof( int ) );  
			_dt.Columns.Add( "PaisRegistro", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecUltModif", typeof( DateTime ) );  
			_dt.Columns.Add( "PropNombre", typeof( String ) );  
			_dt.Columns.Add( "PropDir", typeof( String ) );  
			_dt.Columns.Add( "PropPais", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaExt",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaExtRow( _dst, false );
			Old = new MarcaExtRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaExt

#region MarcaExtClase
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaExtClaseRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaExtID;	
			public String_Field ClaseID;	
			public Int_Field SuscripcionTipoID;	

			public MarcaExtClaseRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaExtID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseID		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class MarcaExtClaseRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaExtClase : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaExtClase";
	
		
		public MarcaExtClaseRow Dat;
		public MarcaExtClaseRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaExtClase( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaExtClase";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaExtClaseRow( _dst, false );
			Old = new MarcaExtClaseRow( _dst , true );
		}
		
		
		public MarcaExtClase( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaExtClase";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaExtClaseRow( _dst, false );
			Old = new MarcaExtClaseRow( _dst , true );
		}
				
		public MarcaExtClase( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaExtClase() : base() 
		{
			Init();
		}
		
		public MarcaExtClase( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaExtClase";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaExtID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaExtClase",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaExtClaseRow( _dst, false );
			Old = new MarcaExtClaseRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaExtClase

#region MarcaHist
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaHistRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field Clase;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field MarcaTipoID;	
			public String_Field PropNombre;	
			public String_Field PropDir;	
			public String_Field PropPais;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Int_Field RegistroNro;	
			public String_Field ClienteNombre;	
			public DateTime_Field FecSol;	
			public Int_Field ClienteID;	

			public MarcaHistRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				PropNombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				PropDir		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				PropPais		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				FecSol		= new DateTime_Field(	_dst, 14, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class MarcaHistRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaHist : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaHist";
	
		
		public MarcaHistRow Dat;
		public MarcaHistRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaHist( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaHist";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaHistRow( _dst, false );
			Old = new MarcaHistRow( _dst , true );
		}
		
		
		public MarcaHist( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaHist";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaHistRow( _dst, false );
			Old = new MarcaHistRow( _dst , true );
		}
				
		public MarcaHist( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaHist() : base() 
		{
			Init();
		}
		
		public MarcaHist( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaHist";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "PropNombre", typeof( String ) );  
			_dt.Columns.Add( "PropDir", typeof( String ) );  
			_dt.Columns.Add( "PropPais", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "FecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaHist",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaHistRow( _dst, false );
			Old = new MarcaHistRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaHist

#region MarcaRegRen
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaRegRenRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public DateTime_Field ConcesionFecha;	
			public Boolean_Field Limitada;	
			public Boolean_Field Vigente;	
			public String_Field RefMarca;	
			public String_Field ObsAvRen;	
			public Boolean_Field TituloError;	
			public String_Field Registro;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field lastUpdated;	

			public MarcaRegRenRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				RefMarca		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ObsAvRen		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TituloError		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class MarcaRegRenRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaRegRen : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaRegRen";
	
		
		public MarcaRegRenRow Dat;
		public MarcaRegRenRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaRegRen( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaRegRen";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaRegRenRow( _dst, false );
			Old = new MarcaRegRenRow( _dst , true );
		}
		
		
		public MarcaRegRen( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaRegRen";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaRegRenRow( _dst, false );
			Old = new MarcaRegRenRow( _dst , true );
		}
				
		public MarcaRegRen( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaRegRen() : base() 
		{
			Init();
		}
		
		public MarcaRegRen( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaRegRen";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RefMarca", typeof( String ) );  
			_dt.Columns.Add( "ObsAvRen", typeof( String ) );  
			_dt.Columns.Add( "TituloError", typeof( Boolean ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			
			_dt.Columns["Registro"].ReadOnly = true;  

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaRegRen",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaRegRenRow( _dst, false );
			Old = new MarcaRegRenRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaRegRen

#region MarcaTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MarcaTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public DateTime_Field lastUpdated;	

			public MarcaTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class MarcaTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MarcaTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MarcaTipo";
	
		
		public MarcaTipoRow Dat;
		public MarcaTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MarcaTipo( DataTable tab ) : base() 
		{
			_dbTableName = "MarcaTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaTipoRow( _dst, false );
			Old = new MarcaTipoRow( _dst , true );
		}
		
		
		public MarcaTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MarcaTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaTipoRow( _dst, false );
			Old = new MarcaTipoRow( _dst , true );
		}
				
		public MarcaTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MarcaTipo() : base() 
		{
			Init();
		}
		
		public MarcaTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MarcaTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MarcaTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MarcaTipoRow( _dst, false );
			Old = new MarcaTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MarcaTipo

#region mc_movimientoscuenta
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class mc_movimientoscuentaRow 
		{
			private  DSTab _dst;
			
			public Int_Field mc_movimientoid;	
			public Int_Field mc_cuentabancoid;	
			public DateTime_Field mc_fechamovimiento;	
			public Int_Field mc_tipomovimientoid;	
			public Decimal_Field mc_montomovimiento;	
			public String_Field mc_observacion;	
			public String_Field mc_estado;	
			public DateTime_Field mc_fechaanulacion;	
			public Int_Field mc_pagosolicitudid;	
			public String_Field mc_nroboleta;	
			public DateTime_Field mc_fechaboleta;	
			public Boolean_Field mc_asociadocobranza;	

			public mc_movimientoscuentaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				mc_movimientoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				mc_cuentabancoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mc_fechamovimiento		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				mc_tipomovimientoid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				mc_montomovimiento		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
				mc_observacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				mc_estado		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				mc_fechaanulacion		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				mc_pagosolicitudid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				mc_nroboleta		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				mc_fechaboleta		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				mc_asociadocobranza		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class mc_movimientoscuentaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class mc_movimientoscuenta : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "mc_movimientoscuenta";
	
		
		public mc_movimientoscuentaRow Dat;
		public mc_movimientoscuentaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public mc_movimientoscuenta( DataTable tab ) : base() 
		{
			_dbTableName = "mc_movimientoscuenta";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mc_movimientoscuentaRow( _dst, false );
			Old = new mc_movimientoscuentaRow( _dst , true );
		}
		
		
		public mc_movimientoscuenta( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "mc_movimientoscuenta";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mc_movimientoscuentaRow( _dst, false );
			Old = new mc_movimientoscuentaRow( _dst , true );
		}
				
		public mc_movimientoscuenta( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public mc_movimientoscuenta() : base() 
		{
			Init();
		}
		
		public mc_movimientoscuenta( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "mc_movimientoscuenta";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "mc_movimientoid", typeof( int ) );  
			_dt.Columns.Add( "mc_cuentabancoid", typeof( int ) );  
			_dt.Columns.Add( "mc_fechamovimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "mc_tipomovimientoid", typeof( int ) );  
			_dt.Columns.Add( "mc_montomovimiento", typeof( Decimal ) );  
			_dt.Columns.Add( "mc_observacion", typeof( String ) );  
			_dt.Columns.Add( "mc_estado", typeof( String ) );  
			_dt.Columns.Add( "mc_fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "mc_pagosolicitudid", typeof( int ) );  
			_dt.Columns.Add( "mc_nroboleta", typeof( String ) );  
			_dt.Columns.Add( "mc_fechaboleta", typeof( DateTime ) );  
			_dt.Columns.Add( "mc_asociadocobranza", typeof( Boolean ) );  
			
			

			
			_dt.Columns["mc_movimientoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_mc_movimientoscuenta",_dt.Columns["mc_movimientoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mc_movimientoscuentaRow( _dst, false );
			Old = new mc_movimientoscuentaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion mc_movimientoscuenta

#region Menu
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MenuRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Ord;	
			public String_Field Texto;	
			public String_Field Cod;	
			public Int_Field Nivel;	
			public String_Field Destino;	
			public String_Field Param;	

			public MenuRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Ord		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Texto		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Cod		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Nivel		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Destino		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Param		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class MenuRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Menu : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Menu";
	
		
		public MenuRow Dat;
		public MenuRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Menu( DataTable tab ) : base() 
		{
			_dbTableName = "Menu";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuRow( _dst, false );
			Old = new MenuRow( _dst , true );
		}
		
		
		public Menu( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Menu";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuRow( _dst, false );
			Old = new MenuRow( _dst , true );
		}
				
		public Menu( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Menu() : base() 
		{
			Init();
		}
		
		public Menu( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Menu";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Ord", typeof( String ) );  
			_dt.Columns.Add( "Texto", typeof( String ) );  
			_dt.Columns.Add( "Cod", typeof( String ) );  
			_dt.Columns.Add( "Nivel", typeof( int ) );  
			_dt.Columns.Add( "Destino", typeof( String ) );  
			_dt.Columns.Add( "Param", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Menu",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuRow( _dst, false );
			Old = new MenuRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Menu

#region MenuCategoria
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MenuCategoriaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	

			public MenuCategoriaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class MenuCategoriaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MenuCategoria : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MenuCategoria";
	
		
		public MenuCategoriaRow Dat;
		public MenuCategoriaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MenuCategoria( DataTable tab ) : base() 
		{
			_dbTableName = "MenuCategoria";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuCategoriaRow( _dst, false );
			Old = new MenuCategoriaRow( _dst , true );
		}
		
		
		public MenuCategoria( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MenuCategoria";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuCategoriaRow( _dst, false );
			Old = new MenuCategoriaRow( _dst , true );
		}
				
		public MenuCategoria( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MenuCategoria() : base() 
		{
			Init();
		}
		
		public MenuCategoria( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MenuCategoria";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MenuCategoria",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuCategoriaRow( _dst, false );
			Old = new MenuCategoriaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MenuCategoria

#region MenuSistema
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MenuSistemaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ModuloID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	
			public String_Field Atajo;	
			public String_Field Ayuda;	
			public String_Field Estado;	
			public Boolean_Field Visible;	
			public String_Field CodOpInterno;	
			public Int_Field OperacionID;	
			public Int_Field NotificacionID;	
			public Boolean_Field Auditar;	
			public Int_Field MenuSistemaID;	
			public String_Field Tipo;	
			public String_Field Orden;	
			public String_Field IconPath;	

			public MenuSistemaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ModuloID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Atajo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Ayuda		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Visible		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				CodOpInterno		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				OperacionID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				NotificacionID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Auditar		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				MenuSistemaID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				Orden		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				IconPath		= new String_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class MenuSistemaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MenuSistema : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MenuSistema";
	
		
		public MenuSistemaRow Dat;
		public MenuSistemaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MenuSistema( DataTable tab ) : base() 
		{
			_dbTableName = "MenuSistema";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuSistemaRow( _dst, false );
			Old = new MenuSistemaRow( _dst , true );
		}
		
		
		public MenuSistema( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MenuSistema";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuSistemaRow( _dst, false );
			Old = new MenuSistemaRow( _dst , true );
		}
				
		public MenuSistema( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MenuSistema() : base() 
		{
			Init();
		}
		
		public MenuSistema( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MenuSistema";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ModuloID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "Atajo", typeof( String ) );  
			_dt.Columns.Add( "Ayuda", typeof( String ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Visible", typeof( Boolean ) );  
			_dt.Columns.Add( "CodOpInterno", typeof( String ) );  
			_dt.Columns.Add( "OperacionID", typeof( int ) );  
			_dt.Columns.Add( "NotificacionID", typeof( int ) );  
			_dt.Columns.Add( "Auditar", typeof( Boolean ) );  
			_dt.Columns.Add( "MenuSistemaID", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "Orden", typeof( String ) );  
			_dt.Columns.Add( "IconPath", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MenuSistema",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuSistemaRow( _dst, false );
			Old = new MenuSistemaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MenuSistema

#region MenuUsuario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MenuUsuarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MenuCategoriaID;	
			public Int_Field MenuSistemaID;	
			public Int_Field FuncionarioID;	

			public MenuUsuarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MenuCategoriaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MenuSistemaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class MenuUsuarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MenuUsuario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MenuUsuario";
	
		
		public MenuUsuarioRow Dat;
		public MenuUsuarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MenuUsuario( DataTable tab ) : base() 
		{
			_dbTableName = "MenuUsuario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuUsuarioRow( _dst, false );
			Old = new MenuUsuarioRow( _dst , true );
		}
		
		
		public MenuUsuario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MenuUsuario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuUsuarioRow( _dst, false );
			Old = new MenuUsuarioRow( _dst , true );
		}
				
		public MenuUsuario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MenuUsuario() : base() 
		{
			Init();
		}
		
		public MenuUsuario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MenuUsuario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MenuCategoriaID", typeof( int ) );  
			_dt.Columns.Add( "MenuSistemaID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MenuUsuario",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MenuUsuarioRow( _dst, false );
			Old = new MenuUsuarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MenuUsuario

#region Merge
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MergeRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public DateTime_Field FechaDefault;	

			public MergeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FechaDefault		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class MergeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Merge : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Merge";
	
		
		public MergeRow Dat;
		public MergeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Merge( DataTable tab ) : base() 
		{
			_dbTableName = "Merge";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeRow( _dst, false );
			Old = new MergeRow( _dst , true );
		}
		
		
		public Merge( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Merge";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeRow( _dst, false );
			Old = new MergeRow( _dst , true );
		}
				
		public Merge( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Merge() : base() 
		{
			Init();
		}
		
		public Merge( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Merge";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "FechaDefault", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Merge",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeRow( _dst, false );
			Old = new MergeRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Merge

#region Merge_Expediente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Merge_ExpedienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field MergeID;	
			public Int_Field MergeDocID;	
			public Boolean_Field Generado;	
			public Boolean_Field Terminado;	
			public Int_Field TramiteID;	
			public Int_Field FuncionarioID;	
			public DateTime_Field Fecha;	
			public Boolean_Field EnTramite;	
			public Int_Field ExpedienteIDPadre;	
			public Boolean_Field Anulado;	
			public Binary_Field Documento;	
			public Int_Field ExpedienteExtID;	
			public Int_Field TramiteSitID;	
			public Int_Field Aux;	

			public Merge_ExpedienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				MergeDocID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Generado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				Terminado		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				ExpedienteIDPadre		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Anulado		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Documento		= new Binary_Field(	_dst, 12, IsOldDataVersion  );	
				ExpedienteExtID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Aux		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class Merge_ExpedienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Merge_Expediente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Merge_Expediente";
	
		
		public Merge_ExpedienteRow Dat;
		public Merge_ExpedienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Merge_Expediente( DataTable tab ) : base() 
		{
			_dbTableName = "Merge_Expediente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Merge_ExpedienteRow( _dst, false );
			Old = new Merge_ExpedienteRow( _dst , true );
		}
		
		
		public Merge_Expediente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Merge_Expediente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Merge_ExpedienteRow( _dst, false );
			Old = new Merge_ExpedienteRow( _dst , true );
		}
				
		public Merge_Expediente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Merge_Expediente() : base() 
		{
			Init();
		}
		
		public Merge_Expediente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Merge_Expediente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "MergeDocID", typeof( int ) );  
			_dt.Columns.Add( "Generado", typeof( Boolean ) );  
			_dt.Columns.Add( "Terminado", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "Anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "Documento", typeof( Byte[] ) );  
			_dt.Columns.Add( "ExpedienteExtID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "Aux", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Merge_Expediente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Merge_ExpedienteRow( _dst, false );
			Old = new Merge_ExpedienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Merge_Expediente

#region MergeDoc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MergeDocRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field Fecha;	
			public Binary_Field Contenido;	
			public Int_Field FuncionarioID;	
			public String_Field Url;	
			public Int_Field MergeExpedienteID;	
			public String_Field Serie;	
			public Int_Field NroPresupuesto;	
			public Int_Field Anio;	
			public Boolean_Field Anulado;	
			public DateTime_Field FechaAnulacion;	
			public Int_Field MergeID;	
			public String_Field Obs;	
			public String_Field Extension;	

			public MergeDocRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				Contenido		= new Binary_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Url		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				MergeExpedienteID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Serie		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				NroPresupuesto		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Anulado		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				FechaAnulacion		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				Extension		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class MergeDocRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MergeDoc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MergeDoc";
	
		
		public MergeDocRow Dat;
		public MergeDocRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MergeDoc( DataTable tab ) : base() 
		{
			_dbTableName = "MergeDoc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeDocRow( _dst, false );
			Old = new MergeDocRow( _dst , true );
		}
		
		
		public MergeDoc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MergeDoc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeDocRow( _dst, false );
			Old = new MergeDocRow( _dst , true );
		}
				
		public MergeDoc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MergeDoc() : base() 
		{
			Init();
		}
		
		public MergeDoc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MergeDoc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Contenido", typeof( Byte[] ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Url", typeof( String ) );  
			_dt.Columns.Add( "MergeExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Serie", typeof( String ) );  
			_dt.Columns.Add( "NroPresupuesto", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "FechaAnulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Extension", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MergeDoc",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeDocRow( _dst, false );
			Old = new MergeDocRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MergeDoc

#region MergeVencimientoCab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MergeVencimientoCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MergeVencimientoConsID;	
			public String_Field envioModo;	
			public DateTime_Field enviofecha;	
			public Int_Field MergeID;	
			public Int_Field MergeDocID;	
			public Int_Field ClienteID;	
			public Int_Field AtencionID;	

			public MergeVencimientoCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MergeVencimientoConsID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				envioModo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				enviofecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MergeDocID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class MergeVencimientoCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MergeVencimientoCab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MergeVencimientoCab";
	
		
		public MergeVencimientoCabRow Dat;
		public MergeVencimientoCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MergeVencimientoCab( DataTable tab ) : base() 
		{
			_dbTableName = "MergeVencimientoCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoCabRow( _dst, false );
			Old = new MergeVencimientoCabRow( _dst , true );
		}
		
		
		public MergeVencimientoCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MergeVencimientoCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoCabRow( _dst, false );
			Old = new MergeVencimientoCabRow( _dst , true );
		}
				
		public MergeVencimientoCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MergeVencimientoCab() : base() 
		{
			Init();
		}
		
		public MergeVencimientoCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MergeVencimientoCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MergeVencimientoConsID", typeof( int ) );  
			_dt.Columns.Add( "envioModo", typeof( String ) );  
			_dt.Columns.Add( "enviofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "MergeDocID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MergeVencimientoCab",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoCabRow( _dst, false );
			Old = new MergeVencimientoCabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MergeVencimientoCab

#region MergeVencimientoCons
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MergeVencimientoConsRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field fechainf;	
			public DateTime_Field fechasup;	
			public Int_Field funcionarioID;	
			public DateTime_Field consultaFecha;	
			public String_Field observacion;	
			public Boolean_Field generado;	

			public MergeVencimientoConsRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fechainf		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				fechasup		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				funcionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				consultaFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				observacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class MergeVencimientoConsRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MergeVencimientoCons : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MergeVencimientoCons";
	
		
		public MergeVencimientoConsRow Dat;
		public MergeVencimientoConsRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MergeVencimientoCons( DataTable tab ) : base() 
		{
			_dbTableName = "MergeVencimientoCons";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoConsRow( _dst, false );
			Old = new MergeVencimientoConsRow( _dst , true );
		}
		
		
		public MergeVencimientoCons( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MergeVencimientoCons";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoConsRow( _dst, false );
			Old = new MergeVencimientoConsRow( _dst , true );
		}
				
		public MergeVencimientoCons( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MergeVencimientoCons() : base() 
		{
			Init();
		}
		
		public MergeVencimientoCons( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MergeVencimientoCons";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "fechainf", typeof( DateTime ) );  
			_dt.Columns.Add( "fechasup", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioID", typeof( int ) );  
			_dt.Columns.Add( "consultaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "observacion", typeof( String ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MergeVencimientoCons",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoConsRow( _dst, false );
			Old = new MergeVencimientoConsRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MergeVencimientoCons

#region MergeVencimientoDet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MergeVencimientoDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field MergeVencimientoCabID;	

			public MergeVencimientoDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MergeVencimientoCabID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class MergeVencimientoDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MergeVencimientoDet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MergeVencimientoDet";
	
		
		public MergeVencimientoDetRow Dat;
		public MergeVencimientoDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MergeVencimientoDet( DataTable tab ) : base() 
		{
			_dbTableName = "MergeVencimientoDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoDetRow( _dst, false );
			Old = new MergeVencimientoDetRow( _dst , true );
		}
		
		
		public MergeVencimientoDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MergeVencimientoDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoDetRow( _dst, false );
			Old = new MergeVencimientoDetRow( _dst , true );
		}
				
		public MergeVencimientoDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MergeVencimientoDet() : base() 
		{
			Init();
		}
		
		public MergeVencimientoDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MergeVencimientoDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "MergeVencimientoCabID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MergeVencimientoDet",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeVencimientoDetRow( _dst, false );
			Old = new MergeVencimientoDetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MergeVencimientoDet

#region MergeXSituacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MergeXSituacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteSitID;	
			public Int_Field MergeID;	
			public Boolean_Field Vigente;	

			public MergeXSituacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class MergeXSituacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class MergeXSituacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "MergeXSituacion";
	
		
		public MergeXSituacionRow Dat;
		public MergeXSituacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public MergeXSituacion( DataTable tab ) : base() 
		{
			_dbTableName = "MergeXSituacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeXSituacionRow( _dst, false );
			Old = new MergeXSituacionRow( _dst , true );
		}
		
		
		public MergeXSituacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "MergeXSituacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeXSituacionRow( _dst, false );
			Old = new MergeXSituacionRow( _dst , true );
		}
				
		public MergeXSituacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public MergeXSituacion() : base() 
		{
			Init();
		}
		
		public MergeXSituacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "MergeXSituacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_MergeXSituacion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MergeXSituacionRow( _dst, false );
			Old = new MergeXSituacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion MergeXSituacion

#region Mes
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MesRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ididioma;	
			public Short_Field Orden;	
			public String_Field Mes;	

			public MesRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ididioma		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Orden		= new Short_Field(	_dst, 2, IsOldDataVersion  );	
				Mes		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class MesRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Mes : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Mes";
	
		
		public MesRow Dat;
		public MesRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Mes( DataTable tab ) : base() 
		{
			_dbTableName = "Mes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MesRow( _dst, false );
			Old = new MesRow( _dst , true );
		}
		
		
		public Mes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Mes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MesRow( _dst, false );
			Old = new MesRow( _dst , true );
		}
				
		public Mes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Mes() : base() 
		{
			Init();
		}
		
		public Mes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Mes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ididioma", typeof( int ) );  
			_dt.Columns.Add( "Orden", typeof( short ) );  
			_dt.Columns.Add( "Mes", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Mes",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MesRow( _dst, false );
			Old = new MesRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Mes

#region mn_menu
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class mn_menuRow 
		{
			private  DSTab _dst;
			
			public Int_Field mn_idmenu;	
			public Int_Field mn_sistemaid;	
			public Int_Field mn_idmenupadre;	
			public String_Field mn_clave;	
			public String_Field mn_titulo;	
			public String_Field mn_rutarelativa;	
			public Int_Field mn_nivel;	
			public Int_Field mn_orden;	
			public String_Field mn_tipo;	
			public Boolean_Field mn_activo;	
			public Boolean_Field mn_permisosespeciales;	

			public mn_menuRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				mn_idmenu		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				mn_sistemaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mn_idmenupadre		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				mn_clave		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				mn_titulo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				mn_rutarelativa		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				mn_nivel		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				mn_orden		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				mn_tipo		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				mn_activo		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				mn_permisosespeciales		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class mn_menuRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class mn_menu : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "mn_menu";
	
		
		public mn_menuRow Dat;
		public mn_menuRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public mn_menu( DataTable tab ) : base() 
		{
			_dbTableName = "mn_menu";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mn_menuRow( _dst, false );
			Old = new mn_menuRow( _dst , true );
		}
		
		
		public mn_menu( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "mn_menu";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mn_menuRow( _dst, false );
			Old = new mn_menuRow( _dst , true );
		}
				
		public mn_menu( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public mn_menu() : base() 
		{
			Init();
		}
		
		public mn_menu( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "mn_menu";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "mn_idmenu", typeof( int ) );  
			_dt.Columns.Add( "mn_sistemaid", typeof( int ) );  
			_dt.Columns.Add( "mn_idmenupadre", typeof( int ) );  
			_dt.Columns.Add( "mn_clave", typeof( String ) );  
			_dt.Columns.Add( "mn_titulo", typeof( String ) );  
			_dt.Columns.Add( "mn_rutarelativa", typeof( String ) );  
			_dt.Columns.Add( "mn_nivel", typeof( int ) );  
			_dt.Columns.Add( "mn_orden", typeof( int ) );  
			_dt.Columns.Add( "mn_tipo", typeof( String ) );  
			_dt.Columns.Add( "mn_activo", typeof( Boolean ) );  
			_dt.Columns.Add( "mn_permisosespeciales", typeof( Boolean ) );  
			
			

			
			_dt.Columns["mn_idmenu"].AutoIncrement = true;
			_dt.Constraints.Add("pk_mn_menu",_dt.Columns["mn_idmenu"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mn_menuRow( _dst, false );
			Old = new mn_menuRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion mn_menu

#region ModifMarcaLog
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ModifMarcaLogRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field fechains;	
			public Int_Field funcionarioID;	
			public String_Field obs;	

			public ModifMarcaLogRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fechains		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				funcionarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ModifMarcaLogRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ModifMarcaLog : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ModifMarcaLog";
	
		
		public ModifMarcaLogRow Dat;
		public ModifMarcaLogRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ModifMarcaLog( DataTable tab ) : base() 
		{
			_dbTableName = "ModifMarcaLog";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModifMarcaLogRow( _dst, false );
			Old = new ModifMarcaLogRow( _dst , true );
		}
		
		
		public ModifMarcaLog( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ModifMarcaLog";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModifMarcaLogRow( _dst, false );
			Old = new ModifMarcaLogRow( _dst , true );
		}
				
		public ModifMarcaLog( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ModifMarcaLog() : base() 
		{
			Init();
		}
		
		public ModifMarcaLog( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ModifMarcaLog";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "fechains", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioID", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ModifMarcaLog",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModifMarcaLogRow( _dst, false );
			Old = new ModifMarcaLogRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ModifMarcaLog

#region ModoEnvio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ModoEnvioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	
			public Int_Field CViacomID;	

			public ModoEnvioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				CViacomID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ModoEnvioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ModoEnvio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ModoEnvio";
	
		
		public ModoEnvioRow Dat;
		public ModoEnvioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ModoEnvio( DataTable tab ) : base() 
		{
			_dbTableName = "ModoEnvio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModoEnvioRow( _dst, false );
			Old = new ModoEnvioRow( _dst , true );
		}
		
		
		public ModoEnvio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ModoEnvio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModoEnvioRow( _dst, false );
			Old = new ModoEnvioRow( _dst , true );
		}
				
		public ModoEnvio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ModoEnvio() : base() 
		{
			Init();
		}
		
		public ModoEnvio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ModoEnvio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "CViacomID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ModoEnvio",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModoEnvioRow( _dst, false );
			Old = new ModoEnvioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ModoEnvio

#region Modulo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ModuloRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	

			public ModuloRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class ModuloRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Modulo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Modulo";
	
		
		public ModuloRow Dat;
		public ModuloRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Modulo( DataTable tab ) : base() 
		{
			_dbTableName = "Modulo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModuloRow( _dst, false );
			Old = new ModuloRow( _dst , true );
		}
		
		
		public Modulo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Modulo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModuloRow( _dst, false );
			Old = new ModuloRow( _dst , true );
		}
				
		public Modulo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Modulo() : base() 
		{
			Init();
		}
		
		public Modulo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Modulo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Modulo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ModuloRow( _dst, false );
			Old = new ModuloRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Modulo

#region Moneda
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class MonedaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PaisID;	
			public String_Field Descripcion;	
			public String_Field AbrevMoneda;	
			public String_Field DescripIngles;	
			public String_Field PatrixMonedaID;	

			public MonedaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				AbrevMoneda		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				DescripIngles		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				PatrixMonedaID		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class MonedaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Moneda : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Moneda";
	
		
		public MonedaRow Dat;
		public MonedaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Moneda( DataTable tab ) : base() 
		{
			_dbTableName = "Moneda";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MonedaRow( _dst, false );
			Old = new MonedaRow( _dst , true );
		}
		
		
		public Moneda( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Moneda";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MonedaRow( _dst, false );
			Old = new MonedaRow( _dst , true );
		}
				
		public Moneda( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Moneda() : base() 
		{
			Init();
		}
		
		public Moneda( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Moneda";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "AbrevMoneda", typeof( String ) );  
			_dt.Columns.Add( "DescripIngles", typeof( String ) );  
			_dt.Columns.Add( "PatrixMonedaID", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Moneda",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new MonedaRow( _dst, false );
			Old = new MonedaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Moneda

#region mu_mergeurgparte
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class mu_mergeurgparteRow 
		{
			private  DSTab _dst;
			
			public Int_Field mu_mergeurgparteid;	
			public Int_Field mu_situacionid;	
			public String_Field mu_dirigidoa;	
			public String_Field mu_urgirdescrip;	
			public String_Field mu_personadirigida;	

			public mu_mergeurgparteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				mu_mergeurgparteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				mu_situacionid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mu_dirigidoa		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				mu_urgirdescrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				mu_personadirigida		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class mu_mergeurgparteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class mu_mergeurgparte : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "mu_mergeurgparte";
	
		
		public mu_mergeurgparteRow Dat;
		public mu_mergeurgparteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public mu_mergeurgparte( DataTable tab ) : base() 
		{
			_dbTableName = "mu_mergeurgparte";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mu_mergeurgparteRow( _dst, false );
			Old = new mu_mergeurgparteRow( _dst , true );
		}
		
		
		public mu_mergeurgparte( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "mu_mergeurgparte";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mu_mergeurgparteRow( _dst, false );
			Old = new mu_mergeurgparteRow( _dst , true );
		}
				
		public mu_mergeurgparte( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public mu_mergeurgparte() : base() 
		{
			Init();
		}
		
		public mu_mergeurgparte( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "mu_mergeurgparte";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "mu_mergeurgparteid", typeof( int ) );  
			_dt.Columns.Add( "mu_situacionid", typeof( int ) );  
			_dt.Columns.Add( "mu_dirigidoa", typeof( String ) );  
			_dt.Columns.Add( "mu_urgirdescrip", typeof( String ) );  
			_dt.Columns.Add( "mu_personadirigida", typeof( String ) );  
			
			

			
			_dt.Columns["mu_mergeurgparteid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_mu_mergeurgparte",_dt.Columns["mu_mergeurgparteid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new mu_mergeurgparteRow( _dst, false );
			Old = new mu_mergeurgparteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion mu_mergeurgparte

#region ncd_notacreditopresupdetalle
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ncd_notacreditopresupdetalleRow 
		{
			private  DSTab _dst;
			
			public Int_Field ncd_notacreditopresupdetid;	
			public Int_Field ncd_notacreditocabid;	
			public Int_Field ncd_pagoid;	
			public Decimal_Field ncd_monto;	

			public ncd_notacreditopresupdetalleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ncd_notacreditopresupdetid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ncd_notacreditocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ncd_pagoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ncd_monto		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ncd_notacreditopresupdetalleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ncd_notacreditopresupdetalle : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ncd_notacreditopresupdetalle";
	
		
		public ncd_notacreditopresupdetalleRow Dat;
		public ncd_notacreditopresupdetalleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ncd_notacreditopresupdetalle( DataTable tab ) : base() 
		{
			_dbTableName = "ncd_notacreditopresupdetalle";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ncd_notacreditopresupdetalleRow( _dst, false );
			Old = new ncd_notacreditopresupdetalleRow( _dst , true );
		}
		
		
		public ncd_notacreditopresupdetalle( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ncd_notacreditopresupdetalle";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ncd_notacreditopresupdetalleRow( _dst, false );
			Old = new ncd_notacreditopresupdetalleRow( _dst , true );
		}
				
		public ncd_notacreditopresupdetalle( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ncd_notacreditopresupdetalle() : base() 
		{
			Init();
		}
		
		public ncd_notacreditopresupdetalle( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ncd_notacreditopresupdetalle";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ncd_notacreditopresupdetid", typeof( int ) );  
			_dt.Columns.Add( "ncd_notacreditocabid", typeof( int ) );  
			_dt.Columns.Add( "ncd_pagoid", typeof( int ) );  
			_dt.Columns.Add( "ncd_monto", typeof( Decimal ) );  
			
			

			
			_dt.Columns["ncd_notacreditopresupdetid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ncd_notacreditopresupdetalle",_dt.Columns["ncd_notacreditopresupdetid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ncd_notacreditopresupdetalleRow( _dst, false );
			Old = new ncd_notacreditopresupdetalleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ncd_notacreditopresupdetalle

#region ncp_notacreditopresup
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ncp_notacreditopresupRow 
		{
			private  DSTab _dst;
			
			public Int_Field ncp_notacreditoid;	
			public Int_Field ncp_nrocomprobante;	
			public DateTime_Field ncp_fecha;	
			public Int_Field ncp_clienteid;	
			public Int_Field ncp_monedaid;	
			public Decimal_Field ncp_monto;	
			public Boolean_Field ncp_anulado;	
			public DateTime_Field ncp_fechaanulacion;	
			public String_Field ncp_referenciacliente;	
			public String_Field ncp_cuerponota;	
			public Decimal_Field ncp_saldo;	
			public String_Field ncp_presupuestos;	

			public ncp_notacreditopresupRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ncp_notacreditoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ncp_nrocomprobante		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ncp_fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				ncp_clienteid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ncp_monedaid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ncp_monto		= new Decimal_Field(	_dst, 5, IsOldDataVersion  );	
				ncp_anulado		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				ncp_fechaanulacion		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				ncp_referenciacliente		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ncp_cuerponota		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ncp_saldo		= new Decimal_Field(	_dst, 10, IsOldDataVersion  );	
				ncp_presupuestos		= new String_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class ncp_notacreditopresupRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ncp_notacreditopresup : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ncp_notacreditopresup";
	
		
		public ncp_notacreditopresupRow Dat;
		public ncp_notacreditopresupRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ncp_notacreditopresup( DataTable tab ) : base() 
		{
			_dbTableName = "ncp_notacreditopresup";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ncp_notacreditopresupRow( _dst, false );
			Old = new ncp_notacreditopresupRow( _dst , true );
		}
		
		
		public ncp_notacreditopresup( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ncp_notacreditopresup";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ncp_notacreditopresupRow( _dst, false );
			Old = new ncp_notacreditopresupRow( _dst , true );
		}
				
		public ncp_notacreditopresup( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ncp_notacreditopresup() : base() 
		{
			Init();
		}
		
		public ncp_notacreditopresup( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ncp_notacreditopresup";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ncp_notacreditoid", typeof( int ) );  
			_dt.Columns.Add( "ncp_nrocomprobante", typeof( int ) );  
			_dt.Columns.Add( "ncp_fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ncp_clienteid", typeof( int ) );  
			_dt.Columns.Add( "ncp_monedaid", typeof( int ) );  
			_dt.Columns.Add( "ncp_monto", typeof( Decimal ) );  
			_dt.Columns.Add( "ncp_anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "ncp_fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "ncp_referenciacliente", typeof( String ) );  
			_dt.Columns.Add( "ncp_cuerponota", typeof( String ) );  
			_dt.Columns.Add( "ncp_saldo", typeof( Decimal ) );  
			_dt.Columns.Add( "ncp_presupuestos", typeof( String ) );  
			
			

			
			_dt.Columns["ncp_notacreditoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ncp_notacreditopresup",_dt.Columns["ncp_notacreditoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ncp_notacreditopresupRow( _dst, false );
			Old = new ncp_notacreditopresupRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ncp_notacreditopresup

#region nf_numeracionfactura
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class nf_numeracionfacturaRow 
		{
			private  DSTab _dst;
			
			public Int_Field nf_numeracionfacturaid;	
			public Int_Field nf_timbradoid;	
			public Long_Field nf_ultnrofactura;	

			public nf_numeracionfacturaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				nf_numeracionfacturaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nf_timbradoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				nf_ultnrofactura		= new Long_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class nf_numeracionfacturaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class nf_numeracionfactura : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "nf_numeracionfactura";
	
		
		public nf_numeracionfacturaRow Dat;
		public nf_numeracionfacturaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public nf_numeracionfactura( DataTable tab ) : base() 
		{
			_dbTableName = "nf_numeracionfactura";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new nf_numeracionfacturaRow( _dst, false );
			Old = new nf_numeracionfacturaRow( _dst , true );
		}
		
		
		public nf_numeracionfactura( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "nf_numeracionfactura";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new nf_numeracionfacturaRow( _dst, false );
			Old = new nf_numeracionfacturaRow( _dst , true );
		}
				
		public nf_numeracionfactura( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public nf_numeracionfactura() : base() 
		{
			Init();
		}
		
		public nf_numeracionfactura( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "nf_numeracionfactura";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "nf_numeracionfacturaid", typeof( int ) );  
			_dt.Columns.Add( "nf_timbradoid", typeof( int ) );  
			_dt.Columns.Add( "nf_ultnrofactura", typeof( long ) );  
			
			

			
			_dt.Columns["nf_numeracionfacturaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_nf_numeracionfactura",_dt.Columns["nf_numeracionfacturaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new nf_numeracionfacturaRow( _dst, false );
			Old = new nf_numeracionfacturaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion nf_numeracionfactura

#region NizaEdicion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class NizaEdicionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public Boolean_Field Vigente;	
			public DateTime_Field FechaDesde;	
			public DateTime_Field FechaHasta;	
			public String_Field Abrev;	

			public NizaEdicionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				FechaDesde		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				FechaHasta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class NizaEdicionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class NizaEdicion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "NizaEdicion";
	
		
		public NizaEdicionRow Dat;
		public NizaEdicionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public NizaEdicion( DataTable tab ) : base() 
		{
			_dbTableName = "NizaEdicion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new NizaEdicionRow( _dst, false );
			Old = new NizaEdicionRow( _dst , true );
		}
		
		
		public NizaEdicion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "NizaEdicion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new NizaEdicionRow( _dst, false );
			Old = new NizaEdicionRow( _dst , true );
		}
				
		public NizaEdicion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public NizaEdicion() : base() 
		{
			Init();
		}
		
		public NizaEdicion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "NizaEdicion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "FechaDesde", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaHasta", typeof( DateTime ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_NizaEdicion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new NizaEdicionRow( _dst, false );
			Old = new NizaEdicionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion NizaEdicion

#region Notificacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class NotificacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Mail_Destino;	
			public String_Field Func_Destino;	
			public Boolean_Field Activo;	

			public NotificacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Mail_Destino		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Func_Destino		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class NotificacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Notificacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Notificacion";
	
		
		public NotificacionRow Dat;
		public NotificacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Notificacion( DataTable tab ) : base() 
		{
			_dbTableName = "Notificacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new NotificacionRow( _dst, false );
			Old = new NotificacionRow( _dst , true );
		}
		
		
		public Notificacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Notificacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new NotificacionRow( _dst, false );
			Old = new NotificacionRow( _dst , true );
		}
				
		public Notificacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Notificacion() : base() 
		{
			Init();
		}
		
		public Notificacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Notificacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Mail_Destino", typeof( String ) );  
			_dt.Columns.Add( "Func_Destino", typeof( String ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Notificacion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new NotificacionRow( _dst, false );
			Old = new NotificacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Notificacion

#region op_oposicion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class op_oposicionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field RegistroNro;	
			public Int_Field ExpedienteID;	
			public Int_Field ClienteID;	
			public Int_Field AtencionID;	
			public String_Field Denominacion;	
			public Int_Field TramiteID;	
			public Int_Field UsuarioID;	
			public DateTime_Field FechaEnvio;	
			public Int_Field OrdenTrabajoID;	
			public DateTime_Field PresentacionFecha;	
			public String_Field ParteNombre;	
			public String_Field ContraparteNombre;	
			public DateTime_Field FechaSalida;	

			public op_oposicionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				UsuarioID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				FechaEnvio		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				ParteNombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				ContraparteNombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				FechaSalida		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class op_oposicionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class op_oposicion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "op_oposicion";
	
		
		public op_oposicionRow Dat;
		public op_oposicionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public op_oposicion( DataTable tab ) : base() 
		{
			_dbTableName = "op_oposicion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new op_oposicionRow( _dst, false );
			Old = new op_oposicionRow( _dst , true );
		}
		
		
		public op_oposicion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "op_oposicion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new op_oposicionRow( _dst, false );
			Old = new op_oposicionRow( _dst , true );
		}
				
		public op_oposicion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public op_oposicion() : base() 
		{
			Init();
		}
		
		public op_oposicion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "op_oposicion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "UsuarioID", typeof( int ) );  
			_dt.Columns.Add( "FechaEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ParteNombre", typeof( String ) );  
			_dt.Columns.Add( "ContraparteNombre", typeof( String ) );  
			_dt.Columns.Add( "FechaSalida", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_op_oposicion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new op_oposicionRow( _dst, false );
			Old = new op_oposicionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion op_oposicion

#region Operacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class OperacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Codigo;	

			public OperacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Codigo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class OperacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Operacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Operacion";
	
		
		public OperacionRow Dat;
		public OperacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Operacion( DataTable tab ) : base() 
		{
			_dbTableName = "Operacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionRow( _dst, false );
			Old = new OperacionRow( _dst , true );
		}
		
		
		public Operacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Operacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionRow( _dst, false );
			Old = new OperacionRow( _dst , true );
		}
				
		public Operacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Operacion() : base() 
		{
			Init();
		}
		
		public Operacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Operacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Codigo", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Operacion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionRow( _dst, false );
			Old = new OperacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Operacion

#region OperacionLog
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class OperacionLogRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MenuSistemaID;	
			public String_Field Obs;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public String_Field sid;	
			public String_Field Estado;	

			public OperacionLogRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MenuSistemaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				sid		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class OperacionLogRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class OperacionLog : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "OperacionLog";
	
		
		public OperacionLogRow Dat;
		public OperacionLogRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public OperacionLog( DataTable tab ) : base() 
		{
			_dbTableName = "OperacionLog";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionLogRow( _dst, false );
			Old = new OperacionLogRow( _dst , true );
		}
		
		
		public OperacionLog( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "OperacionLog";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionLogRow( _dst, false );
			Old = new OperacionLogRow( _dst , true );
		}
				
		public OperacionLog( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public OperacionLog() : base() 
		{
			Init();
		}
		
		public OperacionLog( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "OperacionLog";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MenuSistemaID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "sid", typeof( String ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_OperacionLog",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionLogRow( _dst, false );
			Old = new OperacionLogRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion OperacionLog

#region OperacionXGrupo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class OperacionXGrupoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field OperacionID;	
			public Int_Field GrupoID;	

			public OperacionXGrupoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				OperacionID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				GrupoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class OperacionXGrupoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class OperacionXGrupo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "OperacionXGrupo";
	
		
		public OperacionXGrupoRow Dat;
		public OperacionXGrupoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public OperacionXGrupo( DataTable tab ) : base() 
		{
			_dbTableName = "OperacionXGrupo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionXGrupoRow( _dst, false );
			Old = new OperacionXGrupoRow( _dst , true );
		}
		
		
		public OperacionXGrupo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "OperacionXGrupo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionXGrupoRow( _dst, false );
			Old = new OperacionXGrupoRow( _dst , true );
		}
				
		public OperacionXGrupo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public OperacionXGrupo() : base() 
		{
			Init();
		}
		
		public OperacionXGrupo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "OperacionXGrupo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "OperacionID", typeof( int ) );  
			_dt.Columns.Add( "GrupoID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_OperacionXGrupo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OperacionXGrupoRow( _dst, false );
			Old = new OperacionXGrupoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion OperacionXGrupo

#region OrdenTrabajo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class OrdenTrabajoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field FuncionarioID;	
			public Int_Field TrabajoTipoID;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public Boolean_Field Facturable;	
			public DateTime_Field AltaFecha;	
			public String_Field Obs;	
			public String_Field OrdenTrabajo;	
			public String_Field RefCliente;	
			public Int_Field AtencionID;	
			public Int_Field CorrespondenciaID;	
			public Int_Field CorrNro;	
			public Int_Field CorrAnio;	
			public String_Field RefCorr;	
			public Int_Field TipoAtencionxMarca;	
			public Int_Field IDTipoAtencionxMarca;	

			public OrdenTrabajoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TrabajoTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Facturable		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				RefCliente		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				CorrNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				CorrAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RefCorr		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				TipoAtencionxMarca		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				IDTipoAtencionxMarca		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
			}
		} // end class OrdenTrabajoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class OrdenTrabajo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "OrdenTrabajo";
	
		
		public OrdenTrabajoRow Dat;
		public OrdenTrabajoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public OrdenTrabajo( DataTable tab ) : base() 
		{
			_dbTableName = "OrdenTrabajo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OrdenTrabajoRow( _dst, false );
			Old = new OrdenTrabajoRow( _dst , true );
		}
		
		
		public OrdenTrabajo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "OrdenTrabajo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OrdenTrabajoRow( _dst, false );
			Old = new OrdenTrabajoRow( _dst , true );
		}
				
		public OrdenTrabajo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public OrdenTrabajo() : base() 
		{
			Init();
		}
		
		public OrdenTrabajo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "OrdenTrabajo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "TrabajoTipoID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Facturable", typeof( Boolean ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "RefCliente", typeof( String ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "CorrNro", typeof( int ) );  
			_dt.Columns.Add( "CorrAnio", typeof( int ) );  
			_dt.Columns.Add( "RefCorr", typeof( String ) );  
			_dt.Columns.Add( "TipoAtencionxMarca", typeof( int ) );  
			_dt.Columns.Add( "IDTipoAtencionxMarca", typeof( int ) );  
			
			
			_dt.Columns["OrdenTrabajo"].ReadOnly = true;  

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_OrdenTrabajo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new OrdenTrabajoRow( _dst, false );
			Old = new OrdenTrabajoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion OrdenTrabajo

#region pa_parametros
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pa_parametrosRow 
		{
			private  DSTab _dst;
			
			public String_Field clave;	
			public String_Field valor;	

			public pa_parametrosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				clave		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				valor		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class pa_parametrosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pa_parametros : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pa_parametros";
	
		
		public pa_parametrosRow Dat;
		public pa_parametrosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pa_parametros( DataTable tab ) : base() 
		{
			_dbTableName = "pa_parametros";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pa_parametrosRow( _dst, false );
			Old = new pa_parametrosRow( _dst , true );
		}
		
		
		public pa_parametros( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pa_parametros";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pa_parametrosRow( _dst, false );
			Old = new pa_parametrosRow( _dst , true );
		}
				
		public pa_parametros( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pa_parametros() : base() 
		{
			Init();
		}
		
		public pa_parametros( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pa_parametros";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "clave", typeof( String ) );  
			_dt.Columns.Add( "valor", typeof( String ) );  
			
			

			
			_dt.Columns["clave"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pa_parametros",_dt.Columns["clave"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pa_parametrosRow( _dst, false );
			Old = new pa_parametrosRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pa_parametros

#region pav_plazoavisovenc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pav_plazoavisovencRow 
		{
			private  DSTab _dst;
			
			public Int_Field pav_plazoavisovencid;	
			public Int_Field pav_clienteid;	
			public Int_Field pav_plazo;	

			public pav_plazoavisovencRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pav_plazoavisovencid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pav_clienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pav_plazo		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class pav_plazoavisovencRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pav_plazoavisovenc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pav_plazoavisovenc";
	
		
		public pav_plazoavisovencRow Dat;
		public pav_plazoavisovencRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pav_plazoavisovenc( DataTable tab ) : base() 
		{
			_dbTableName = "pav_plazoavisovenc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pav_plazoavisovencRow( _dst, false );
			Old = new pav_plazoavisovencRow( _dst , true );
		}
		
		
		public pav_plazoavisovenc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pav_plazoavisovenc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pav_plazoavisovencRow( _dst, false );
			Old = new pav_plazoavisovencRow( _dst , true );
		}
				
		public pav_plazoavisovenc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pav_plazoavisovenc() : base() 
		{
			Init();
		}
		
		public pav_plazoavisovenc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pav_plazoavisovenc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pav_plazoavisovencid", typeof( int ) );  
			_dt.Columns.Add( "pav_clienteid", typeof( int ) );  
			_dt.Columns.Add( "pav_plazo", typeof( int ) );  
			
			

			
			_dt.Columns["pav_plazoavisovencid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pav_plazoavisovenc",_dt.Columns["pav_plazoavisovencid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pav_plazoavisovencRow( _dst, false );
			Old = new pav_plazoavisovencRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pav_plazoavisovenc

#region pc_presupuestocab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pc_presupuestocabRow 
		{
			private  DSTab _dst;
			
			public Int_Field pc_presupuestocabid;	
			public Int_Field pc_mergedocid;	
			public Int_Field pc_tramiteid;	
			public DateTime_Field pc_fechageneracion;	
			public Int_Field pc_clienteid;	
			public Int_Field pc_atencionid;	
			public Int_Field pc_monedaid;	
			public Decimal_Field pc_total;	
			public Decimal_Field pc_saldo;	
			public Int_Field pc_areaid;	
			public Int_Field pc_enviadopor;	
			public Int_Field pc_autorizadopor;	
			public String_Field pc_estado;	
			public String_Field pc_partenombre;	
			public String_Field pc_contrapartenombre;	
			public DateTime_Field pc_fechaanulacion;	
			public String_Field pc_origen;	
			public String_Field pc_nropresupuesto;	
			public String_Field pc_string1;	
			public Boolean_Field pc_reemplazado;	
			public String_Field pc_string2;	
			public String_Field pc_descripcion;	
			public String_Field pc_concepto;	
			public String_Field pc_timbrado;	
			public String_Field pc_razonsocialfactura;	
			public String_Field pc_rucfactura;	
			public DateTime_Field pc_fechadocreemplazado;	
			public String_Field pc_telefonofactura;	
			public Int_Field pc_reempsolicporid;	
			public String_Field pc_nrocasopatrix;	
			public Int_Field pc_facturacabid;	
			public Int_Field pc_recargoatmonedaid;	
			public Decimal_Field pc_recargoatmonto;	
			public String_Field pc_presupcabidsreemplazo;	

			public pc_presupuestocabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pc_presupuestocabid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pc_mergedocid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pc_tramiteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				pc_fechageneracion		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				pc_clienteid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				pc_atencionid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				pc_monedaid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				pc_total		= new Decimal_Field(	_dst, 7, IsOldDataVersion  );	
				pc_saldo		= new Decimal_Field(	_dst, 8, IsOldDataVersion  );	
				pc_areaid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				pc_enviadopor		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				pc_autorizadopor		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				pc_estado		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				pc_partenombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				pc_contrapartenombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				pc_fechaanulacion		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				pc_origen		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				pc_nropresupuesto		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				pc_string1		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				pc_reemplazado		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				pc_string2		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				pc_descripcion		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				pc_concepto		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				pc_timbrado		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				pc_razonsocialfactura		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				pc_rucfactura		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				pc_fechadocreemplazado		= new DateTime_Field(	_dst, 26, IsOldDataVersion  );	
				pc_telefonofactura		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				pc_reempsolicporid		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				pc_nrocasopatrix		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				pc_facturacabid		= new Int_Field(	_dst, 30, IsOldDataVersion  );	
				pc_recargoatmonedaid		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				pc_recargoatmonto		= new Decimal_Field(	_dst, 32, IsOldDataVersion  );	
				pc_presupcabidsreemplazo		= new String_Field(	_dst, 33, IsOldDataVersion  );	
			}
		} // end class pc_presupuestocabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pc_presupuestocab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pc_presupuestocab";
	
		
		public pc_presupuestocabRow Dat;
		public pc_presupuestocabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pc_presupuestocab( DataTable tab ) : base() 
		{
			_dbTableName = "pc_presupuestocab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pc_presupuestocabRow( _dst, false );
			Old = new pc_presupuestocabRow( _dst , true );
		}
		
		
		public pc_presupuestocab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pc_presupuestocab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pc_presupuestocabRow( _dst, false );
			Old = new pc_presupuestocabRow( _dst , true );
		}
				
		public pc_presupuestocab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pc_presupuestocab() : base() 
		{
			Init();
		}
		
		public pc_presupuestocab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pc_presupuestocab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pc_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "pc_mergedocid", typeof( int ) );  
			_dt.Columns.Add( "pc_tramiteid", typeof( int ) );  
			_dt.Columns.Add( "pc_fechageneracion", typeof( DateTime ) );  
			_dt.Columns.Add( "pc_clienteid", typeof( int ) );  
			_dt.Columns.Add( "pc_atencionid", typeof( int ) );  
			_dt.Columns.Add( "pc_monedaid", typeof( int ) );  
			_dt.Columns.Add( "pc_total", typeof( Decimal ) );  
			_dt.Columns.Add( "pc_saldo", typeof( Decimal ) );  
			_dt.Columns.Add( "pc_areaid", typeof( int ) );  
			_dt.Columns.Add( "pc_enviadopor", typeof( int ) );  
			_dt.Columns.Add( "pc_autorizadopor", typeof( int ) );  
			_dt.Columns.Add( "pc_estado", typeof( String ) );  
			_dt.Columns.Add( "pc_partenombre", typeof( String ) );  
			_dt.Columns.Add( "pc_contrapartenombre", typeof( String ) );  
			_dt.Columns.Add( "pc_fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "pc_origen", typeof( String ) );  
			_dt.Columns.Add( "pc_nropresupuesto", typeof( String ) );  
			_dt.Columns.Add( "pc_string1", typeof( String ) );  
			_dt.Columns.Add( "pc_reemplazado", typeof( Boolean ) );  
			_dt.Columns.Add( "pc_string2", typeof( String ) );  
			_dt.Columns.Add( "pc_descripcion", typeof( String ) );  
			_dt.Columns.Add( "pc_concepto", typeof( String ) );  
			_dt.Columns.Add( "pc_timbrado", typeof( String ) );  
			_dt.Columns.Add( "pc_razonsocialfactura", typeof( String ) );  
			_dt.Columns.Add( "pc_rucfactura", typeof( String ) );  
			_dt.Columns.Add( "pc_fechadocreemplazado", typeof( DateTime ) );  
			_dt.Columns.Add( "pc_telefonofactura", typeof( String ) );  
			_dt.Columns.Add( "pc_reempsolicporid", typeof( int ) );  
			_dt.Columns.Add( "pc_nrocasopatrix", typeof( String ) );  
			_dt.Columns.Add( "pc_facturacabid", typeof( int ) );  
			_dt.Columns.Add( "pc_recargoatmonedaid", typeof( int ) );  
			_dt.Columns.Add( "pc_recargoatmonto", typeof( Decimal ) );  
			_dt.Columns.Add( "pc_presupcabidsreemplazo", typeof( String ) );  
			
			

			
			_dt.Columns["pc_presupuestocabid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pc_presupuestocab",_dt.Columns["pc_presupuestocabid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pc_presupuestocabRow( _dst, false );
			Old = new pc_presupuestocabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pc_presupuestocab

#region pd_presupuestodetalle
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pd_presupuestodetalleRow 
		{
			private  DSTab _dst;
			
			public Int_Field pd_presupuestodetalleid;	
			public Int_Field pd_presupuestocabid;	
			public String_Field pd_detalledescripcion;	
			public Decimal_Field pd_detallemonto;	

			public pd_presupuestodetalleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pd_presupuestodetalleid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pd_presupuestocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pd_detalledescripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				pd_detallemonto		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class pd_presupuestodetalleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pd_presupuestodetalle : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pd_presupuestodetalle";
	
		
		public pd_presupuestodetalleRow Dat;
		public pd_presupuestodetalleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pd_presupuestodetalle( DataTable tab ) : base() 
		{
			_dbTableName = "pd_presupuestodetalle";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pd_presupuestodetalleRow( _dst, false );
			Old = new pd_presupuestodetalleRow( _dst , true );
		}
		
		
		public pd_presupuestodetalle( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pd_presupuestodetalle";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pd_presupuestodetalleRow( _dst, false );
			Old = new pd_presupuestodetalleRow( _dst , true );
		}
				
		public pd_presupuestodetalle( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pd_presupuestodetalle() : base() 
		{
			Init();
		}
		
		public pd_presupuestodetalle( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pd_presupuestodetalle";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pd_presupuestodetalleid", typeof( int ) );  
			_dt.Columns.Add( "pd_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "pd_detalledescripcion", typeof( String ) );  
			_dt.Columns.Add( "pd_detallemonto", typeof( Decimal ) );  
			
			

			
			_dt.Columns["pd_presupuestodetalleid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pd_presupuestodetalle",_dt.Columns["pd_presupuestodetalleid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pd_presupuestodetalleRow( _dst, false );
			Old = new pd_presupuestodetalleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pd_presupuestodetalle

#region PedFonDet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PedFonDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field PedidoFonID;	
			public Int_Field ID;	
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field Fonetizado;	
			public Int_Field Puntaje;	
			public String_Field Patron;	
			public String_Field Palabra;	
			public Int_Field Factor1;	
			public Int_Field Factor2;	
			public Int_Field Factor3;	
			public Int_Field FactorFonetico;	
			public Int_Field FactorLexicoGrafico;	
			public Boolean_Field Imprimir;	
			public String_Field ClaseDescrip;	
			public Int_Field ClaseNumero;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Int_Field CLienteID;	
			public String_Field ClienteNombre;	
			public String_Field Propietarios;	
			public String_Field Acta;	
			public Int_Field ExpedienteID;	
			public DateTime_Field FVencimiento;	
			public String_Field MarcaTipo;	
			public String_Field Registro;	
			public String_Field Tramite;	
			public DateTime_Field FConcesion;	
			public String_Field PalabraSerializada;	
			public String_Field PatronSerializado;	
			public String_Field PalabraFonetizada;	
			public String_Field PatronFonetizado;	
			public Int_Field MaximoBloque;	
			public DateTime_Field FPresentacion;	

			public PedFonDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				PedidoFonID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Fonetizado		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Puntaje		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Patron		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Palabra		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Factor1		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Factor2		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Factor3		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				FactorFonetico		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				FactorLexicoGrafico		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Imprimir		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				ClaseDescrip		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				ClaseNumero		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				CLienteID		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				Propietarios		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				FVencimiento		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				FConcesion		= new DateTime_Field(	_dst, 29, IsOldDataVersion  );	
				PalabraSerializada		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				PatronSerializado		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				PalabraFonetizada		= new String_Field(	_dst, 32, IsOldDataVersion  );	
				PatronFonetizado		= new String_Field(	_dst, 33, IsOldDataVersion  );	
				MaximoBloque		= new Int_Field(	_dst, 34, IsOldDataVersion  );	
				FPresentacion		= new DateTime_Field(	_dst, 35, IsOldDataVersion  );	
			}
		} // end class PedFonDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PedFonDet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PedFonDet";
	
		
		public PedFonDetRow Dat;
		public PedFonDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PedFonDet( DataTable tab ) : base() 
		{
			_dbTableName = "PedFonDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PedFonDetRow( _dst, false );
			Old = new PedFonDetRow( _dst , true );
		}
		
		
		public PedFonDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PedFonDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PedFonDetRow( _dst, false );
			Old = new PedFonDetRow( _dst , true );
		}
				
		public PedFonDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PedFonDet() : base() 
		{
			Init();
		}
		
		public PedFonDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PedFonDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "PedidoFonID", typeof( int ) );  
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Fonetizado", typeof( String ) );  
			_dt.Columns.Add( "Puntaje", typeof( int ) );  
			_dt.Columns.Add( "Patron", typeof( String ) );  
			_dt.Columns.Add( "Palabra", typeof( String ) );  
			_dt.Columns.Add( "Factor1", typeof( int ) );  
			_dt.Columns.Add( "Factor2", typeof( int ) );  
			_dt.Columns.Add( "Factor3", typeof( int ) );  
			_dt.Columns.Add( "FactorFonetico", typeof( int ) );  
			_dt.Columns.Add( "FactorLexicoGrafico", typeof( int ) );  
			_dt.Columns.Add( "Imprimir", typeof( Boolean ) );  
			_dt.Columns.Add( "ClaseDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClaseNumero", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "CLienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "Propietarios", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "FVencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "FConcesion", typeof( DateTime ) );  
			_dt.Columns.Add( "PalabraSerializada", typeof( String ) );  
			_dt.Columns.Add( "PatronSerializado", typeof( String ) );  
			_dt.Columns.Add( "PalabraFonetizada", typeof( String ) );  
			_dt.Columns.Add( "PatronFonetizado", typeof( String ) );  
			_dt.Columns.Add( "MaximoBloque", typeof( int ) );  
			_dt.Columns.Add( "FPresentacion", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PedFonDet",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PedFonDetRow( _dst, false );
			Old = new PedFonDetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PedFonDet

#region PedidoFon
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PedidoFonRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field Fecha;	
			public String_Field Texto;	
			public String_Field Patrones;	
			public String_Field Clases;	
			public Boolean_Field Relac;	
			public Int_Field Nivel;	
			public Int_Field Porcentaje;	
			public Int_Field FuncionarioID;	
			public String_Field Estado;	
			public String_Field EstadoInfo;	
			public DateTime_Field UltFechaBoletin;	

			public PedidoFonRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				Texto		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Patrones		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clases		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Relac		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Nivel		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Porcentaje		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				EstadoInfo		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				UltFechaBoletin		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class PedidoFonRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PedidoFon : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PedidoFon";
	
		
		public PedidoFonRow Dat;
		public PedidoFonRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PedidoFon( DataTable tab ) : base() 
		{
			_dbTableName = "PedidoFon";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PedidoFonRow( _dst, false );
			Old = new PedidoFonRow( _dst , true );
		}
		
		
		public PedidoFon( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PedidoFon";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PedidoFonRow( _dst, false );
			Old = new PedidoFonRow( _dst , true );
		}
				
		public PedidoFon( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PedidoFon() : base() 
		{
			Init();
		}
		
		public PedidoFon( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PedidoFon";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Texto", typeof( String ) );  
			_dt.Columns.Add( "Patrones", typeof( String ) );  
			_dt.Columns.Add( "Clases", typeof( String ) );  
			_dt.Columns.Add( "Relac", typeof( Boolean ) );  
			_dt.Columns.Add( "Nivel", typeof( int ) );  
			_dt.Columns.Add( "Porcentaje", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "EstadoInfo", typeof( String ) );  
			_dt.Columns.Add( "UltFechaBoletin", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PedidoFon",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PedidoFonRow( _dst, false );
			Old = new PedidoFonRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PedidoFon

#region Pendiente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PendienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public PendienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class PendienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Pendiente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Pendiente";
	
		
		public PendienteRow Dat;
		public PendienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Pendiente( DataTable tab ) : base() 
		{
			_dbTableName = "Pendiente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PendienteRow( _dst, false );
			Old = new PendienteRow( _dst , true );
		}
		
		
		public Pendiente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Pendiente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PendienteRow( _dst, false );
			Old = new PendienteRow( _dst , true );
		}
				
		public Pendiente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Pendiente() : base() 
		{
			Init();
		}
		
		public Pendiente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Pendiente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Pendiente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PendienteRow( _dst, false );
			Old = new PendienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Pendiente

#region PertenenciaMotivo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PertenenciaMotivoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Parada;	

			public PertenenciaMotivoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Parada		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class PertenenciaMotivoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PertenenciaMotivo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PertenenciaMotivo";
	
		
		public PertenenciaMotivoRow Dat;
		public PertenenciaMotivoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PertenenciaMotivo( DataTable tab ) : base() 
		{
			_dbTableName = "PertenenciaMotivo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PertenenciaMotivoRow( _dst, false );
			Old = new PertenenciaMotivoRow( _dst , true );
		}
		
		
		public PertenenciaMotivo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PertenenciaMotivo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PertenenciaMotivoRow( _dst, false );
			Old = new PertenenciaMotivoRow( _dst , true );
		}
				
		public PertenenciaMotivo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PertenenciaMotivo() : base() 
		{
			Init();
		}
		
		public PertenenciaMotivo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PertenenciaMotivo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Parada", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PertenenciaMotivo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PertenenciaMotivoRow( _dst, false );
			Old = new PertenenciaMotivoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PertenenciaMotivo

#region ph_presupuestohistorico
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ph_presupuestohistoricoRow 
		{
			private  DSTab _dst;
			
			public DateTime_Field ph_fechadocumento;	
			public Int_Field ph_nroagente;	
			public Int_Field ph_clienteid;	
			public String_Field ph_anombrede;	
			public String_Field ph_agente;	
			public String_Field ph_objeto;	
			public String_Field ph_moneda;	
			public Decimal_Field ph_monto;	
			public String_Field ph_nrodocumento;	
			public String_Field ph_tramite;	
			public String_Field ph_responsable;	
			public DateTime_Field ph_fechapago;	
			public Decimal_Field ph_difbancaria;	
			public String_Field ph_ruc;	
			public String_Field ph_formapago;	
			public Decimal_Field ph_montopago;	
			public String_Field ph_bancoabrev;	
			public String_Field ph_nombrebanco;	
			public DateTime_Field ph_fechaboleta;	
			public Int_Field ph_presupuestohistoricoid;	

			public ph_presupuestohistoricoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ph_fechadocumento		= new DateTime_Field(	_dst, 0, IsOldDataVersion  );	
				ph_nroagente		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ph_clienteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ph_anombrede		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				ph_agente		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ph_objeto		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ph_moneda		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ph_monto		= new Decimal_Field(	_dst, 7, IsOldDataVersion  );	
				ph_nrodocumento		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ph_tramite		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ph_responsable		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ph_fechapago		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				ph_difbancaria		= new Decimal_Field(	_dst, 12, IsOldDataVersion  );	
				ph_ruc		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				ph_formapago		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				ph_montopago		= new Decimal_Field(	_dst, 15, IsOldDataVersion  );	
				ph_bancoabrev		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				ph_nombrebanco		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				ph_fechaboleta		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				ph_presupuestohistoricoid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
			}
		} // end class ph_presupuestohistoricoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ph_presupuestohistorico : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ph_presupuestohistorico";
	
		
		public ph_presupuestohistoricoRow Dat;
		public ph_presupuestohistoricoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ph_presupuestohistorico( DataTable tab ) : base() 
		{
			_dbTableName = "ph_presupuestohistorico";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ph_presupuestohistoricoRow( _dst, false );
			Old = new ph_presupuestohistoricoRow( _dst , true );
		}
		
		
		public ph_presupuestohistorico( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ph_presupuestohistorico";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ph_presupuestohistoricoRow( _dst, false );
			Old = new ph_presupuestohistoricoRow( _dst , true );
		}
				
		public ph_presupuestohistorico( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ph_presupuestohistorico() : base() 
		{
			Init();
		}
		
		public ph_presupuestohistorico( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ph_presupuestohistorico";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ph_fechadocumento", typeof( DateTime ) );  
			_dt.Columns.Add( "ph_nroagente", typeof( int ) );  
			_dt.Columns.Add( "ph_clienteid", typeof( int ) );  
			_dt.Columns.Add( "ph_anombrede", typeof( String ) );  
			_dt.Columns.Add( "ph_agente", typeof( String ) );  
			_dt.Columns.Add( "ph_objeto", typeof( String ) );  
			_dt.Columns.Add( "ph_moneda", typeof( String ) );  
			_dt.Columns.Add( "ph_monto", typeof( Decimal ) );  
			_dt.Columns.Add( "ph_nrodocumento", typeof( String ) );  
			_dt.Columns.Add( "ph_tramite", typeof( String ) );  
			_dt.Columns.Add( "ph_responsable", typeof( String ) );  
			_dt.Columns.Add( "ph_fechapago", typeof( DateTime ) );  
			_dt.Columns.Add( "ph_difbancaria", typeof( Decimal ) );  
			_dt.Columns.Add( "ph_ruc", typeof( String ) );  
			_dt.Columns.Add( "ph_formapago", typeof( String ) );  
			_dt.Columns.Add( "ph_montopago", typeof( Decimal ) );  
			_dt.Columns.Add( "ph_bancoabrev", typeof( String ) );  
			_dt.Columns.Add( "ph_nombrebanco", typeof( String ) );  
			_dt.Columns.Add( "ph_fechaboleta", typeof( DateTime ) );  
			_dt.Columns.Add( "ph_presupuestohistoricoid", typeof( int ) );  
			
			

			
			_dt.Columns["ph_presupuestohistoricoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ph_presupuestohistorico",_dt.Columns["ph_presupuestohistoricoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ph_presupuestohistoricoRow( _dst, false );
			Old = new ph_presupuestohistoricoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ph_presupuestohistorico

#region pm_pcabxmergeexpe
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pm_pcabxmergeexpeRow 
		{
			private  DSTab _dst;
			
			public Int_Field pm_pcabmergeexpid;	
			public Int_Field pm_presupuestocabid;	
			public Int_Field pm_mergeexpedienteid;	

			public pm_pcabxmergeexpeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pm_pcabmergeexpid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pm_presupuestocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pm_mergeexpedienteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class pm_pcabxmergeexpeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pm_pcabxmergeexpe : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pm_pcabxmergeexpe";
	
		
		public pm_pcabxmergeexpeRow Dat;
		public pm_pcabxmergeexpeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pm_pcabxmergeexpe( DataTable tab ) : base() 
		{
			_dbTableName = "pm_pcabxmergeexpe";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pm_pcabxmergeexpeRow( _dst, false );
			Old = new pm_pcabxmergeexpeRow( _dst , true );
		}
		
		
		public pm_pcabxmergeexpe( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pm_pcabxmergeexpe";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pm_pcabxmergeexpeRow( _dst, false );
			Old = new pm_pcabxmergeexpeRow( _dst , true );
		}
				
		public pm_pcabxmergeexpe( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pm_pcabxmergeexpe() : base() 
		{
			Init();
		}
		
		public pm_pcabxmergeexpe( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pm_pcabxmergeexpe";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pm_pcabmergeexpid", typeof( int ) );  
			_dt.Columns.Add( "pm_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "pm_mergeexpedienteid", typeof( int ) );  
			
			

			
			_dt.Columns["pm_pcabmergeexpid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pm_pcabxmergeexpe",_dt.Columns["pm_pcabmergeexpid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pm_pcabxmergeexpeRow( _dst, false );
			Old = new pm_pcabxmergeexpeRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pm_pcabxmergeexpe

#region pmu_pagomultiple
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pmu_pagomultipleRow 
		{
			private  DSTab _dst;
			
			public Int_Field pmu_pagomultipleid;	
			public Int_Field pmu_clienteid;	
			public Int_Field pmu_monedaid;	
			public Int_Field pmu_formapagoid;	
			public DateTime_Field pmu_fechapago;	
			public Decimal_Field pmu_montopago;	
			public String_Field pmu_referencia;	

			public pmu_pagomultipleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pmu_pagomultipleid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pmu_clienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pmu_monedaid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				pmu_formapagoid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				pmu_fechapago		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				pmu_montopago		= new Decimal_Field(	_dst, 5, IsOldDataVersion  );	
				pmu_referencia		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class pmu_pagomultipleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pmu_pagomultiple : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pmu_pagomultiple";
	
		
		public pmu_pagomultipleRow Dat;
		public pmu_pagomultipleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pmu_pagomultiple( DataTable tab ) : base() 
		{
			_dbTableName = "pmu_pagomultiple";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pmu_pagomultipleRow( _dst, false );
			Old = new pmu_pagomultipleRow( _dst , true );
		}
		
		
		public pmu_pagomultiple( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pmu_pagomultiple";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pmu_pagomultipleRow( _dst, false );
			Old = new pmu_pagomultipleRow( _dst , true );
		}
				
		public pmu_pagomultiple( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pmu_pagomultiple() : base() 
		{
			Init();
		}
		
		public pmu_pagomultiple( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pmu_pagomultiple";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pmu_pagomultipleid", typeof( int ) );  
			_dt.Columns.Add( "pmu_clienteid", typeof( int ) );  
			_dt.Columns.Add( "pmu_monedaid", typeof( int ) );  
			_dt.Columns.Add( "pmu_formapagoid", typeof( int ) );  
			_dt.Columns.Add( "pmu_fechapago", typeof( DateTime ) );  
			_dt.Columns.Add( "pmu_montopago", typeof( Decimal ) );  
			_dt.Columns.Add( "pmu_referencia", typeof( String ) );  
			
			

			
			_dt.Columns["pmu_pagomultipleid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pmu_pagomultiple",_dt.Columns["pmu_pagomultipleid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pmu_pagomultipleRow( _dst, false );
			Old = new pmu_pagomultipleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pmu_pagomultiple

#region Poder
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PoderInscID;	
			public Int_Field PoderTipoID;	
			public Int_Field ExpedienteID;	
			public Int_Field PaisID;	
			public String_Field Concepto;	
			public String_Field Denominacion;	
			public String_Field Domicilio;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field FechaModificacion;	
			public Int_Field AgenteLocalID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field LegNot;	
			public Boolean_Field LegCons;	
			public Boolean_Field LegRelExt;	
			public String_Field Obs;	
			public String_Field Inscripcion;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Boolean_Field Original;	

			public PoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PoderTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Concepto		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				LegNot		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				LegCons		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				LegRelExt		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				Original		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
			}
		} // end class PoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Poder : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Poder";
	
		
		public PoderRow Dat;
		public PoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Poder( DataTable tab ) : base() 
		{
			_dbTableName = "Poder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderRow( _dst, false );
			Old = new PoderRow( _dst , true );
		}
		
		
		public Poder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Poder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderRow( _dst, false );
			Old = new PoderRow( _dst , true );
		}
				
		public Poder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Poder() : base() 
		{
			Init();
		}
		
		public Poder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Poder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "PoderTipoID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Concepto", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "LegNot", typeof( Boolean ) );  
			_dt.Columns.Add( "LegCons", typeof( Boolean ) );  
			_dt.Columns.Add( "LegRelExt", typeof( Boolean ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Original", typeof( Boolean ) );  
			
			
			_dt.Columns["Inscripcion"].ReadOnly = true;  

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Poder",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderRow( _dst, false );
			Old = new PoderRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Poder

#region PoderInsc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PoderInscRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public String_Field Inscripcion;	

			public PoderInscRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class PoderInscRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PoderInsc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PoderInsc";
	
		
		public PoderInscRow Dat;
		public PoderInscRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PoderInsc( DataTable tab ) : base() 
		{
			_dbTableName = "PoderInsc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderInscRow( _dst, false );
			Old = new PoderInscRow( _dst , true );
		}
		
		
		public PoderInsc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PoderInsc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderInscRow( _dst, false );
			Old = new PoderInscRow( _dst , true );
		}
				
		public PoderInsc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PoderInsc() : base() 
		{
			Init();
		}
		
		public PoderInsc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PoderInsc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			
			
			_dt.Columns["Inscripcion"].ReadOnly = true;  

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PoderInsc",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderInscRow( _dst, false );
			Old = new PoderInscRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PoderInsc

#region PoderTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PoderTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public PoderTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class PoderTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PoderTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PoderTipo";
	
		
		public PoderTipoRow Dat;
		public PoderTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PoderTipo( DataTable tab ) : base() 
		{
			_dbTableName = "PoderTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderTipoRow( _dst, false );
			Old = new PoderTipoRow( _dst , true );
		}
		
		
		public PoderTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PoderTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderTipoRow( _dst, false );
			Old = new PoderTipoRow( _dst , true );
		}
				
		public PoderTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PoderTipo() : base() 
		{
			Init();
		}
		
		public PoderTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PoderTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PoderTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PoderTipoRow( _dst, false );
			Old = new PoderTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PoderTipo

#region pp_pagopresupuesto
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pp_pagopresupuestoRow 
		{
			private  DSTab _dst;
			
			public Int_Field pp_pagopresupuestoid;	
			public Int_Field pp_presupuestocabid;	
			public Int_Field pp_monedaid;	
			public Int_Field pp_bancoid;	
			public Int_Field pp_cuentaid;	
			public Int_Field pp_formapagoid;	
			public DateTime_Field pp_fechapago;	
			public String_Field pp_nrocheque;	
			public Int_Field pp_bancochequeid;	
			public Int_Field pp_monedagastoid;	
			public Decimal_Field pp_gastocambiario;	
			public Decimal_Field pp_montopago;	
			public String_Field pp_referencia;	
			public DateTime_Field pp_fechaboletadeposito;	
			public String_Field pp_nrorecibo;	
			public DateTime_Field pp_fecharecibo;	
			public Boolean_Field pp_anulado;	
			public DateTime_Field pp_fechanotacredito;	
			public String_Field pp_notacreditonro;	
			public Int_Field pp_pagomultipleid;	
			public Int_Field pp_notacreditopresupid;	
			public String_Field pp_nroboletadeposito;	
			public Int_Field pp_respcobroextid;	

			public pp_pagopresupuestoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pp_pagopresupuestoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pp_presupuestocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pp_monedaid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				pp_bancoid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				pp_cuentaid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				pp_formapagoid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				pp_fechapago		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				pp_nrocheque		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				pp_bancochequeid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				pp_monedagastoid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				pp_gastocambiario		= new Decimal_Field(	_dst, 10, IsOldDataVersion  );	
				pp_montopago		= new Decimal_Field(	_dst, 11, IsOldDataVersion  );	
				pp_referencia		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				pp_fechaboletadeposito		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				pp_nrorecibo		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				pp_fecharecibo		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				pp_anulado		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				pp_fechanotacredito		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				pp_notacreditonro		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				pp_pagomultipleid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				pp_notacreditopresupid		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				pp_nroboletadeposito		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				pp_respcobroextid		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class pp_pagopresupuestoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pp_pagopresupuesto : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pp_pagopresupuesto";
	
		
		public pp_pagopresupuestoRow Dat;
		public pp_pagopresupuestoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pp_pagopresupuesto( DataTable tab ) : base() 
		{
			_dbTableName = "pp_pagopresupuesto";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pp_pagopresupuestoRow( _dst, false );
			Old = new pp_pagopresupuestoRow( _dst , true );
		}
		
		
		public pp_pagopresupuesto( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pp_pagopresupuesto";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pp_pagopresupuestoRow( _dst, false );
			Old = new pp_pagopresupuestoRow( _dst , true );
		}
				
		public pp_pagopresupuesto( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pp_pagopresupuesto() : base() 
		{
			Init();
		}
		
		public pp_pagopresupuesto( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pp_pagopresupuesto";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pp_pagopresupuestoid", typeof( int ) );  
			_dt.Columns.Add( "pp_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "pp_monedaid", typeof( int ) );  
			_dt.Columns.Add( "pp_bancoid", typeof( int ) );  
			_dt.Columns.Add( "pp_cuentaid", typeof( int ) );  
			_dt.Columns.Add( "pp_formapagoid", typeof( int ) );  
			_dt.Columns.Add( "pp_fechapago", typeof( DateTime ) );  
			_dt.Columns.Add( "pp_nrocheque", typeof( String ) );  
			_dt.Columns.Add( "pp_bancochequeid", typeof( int ) );  
			_dt.Columns.Add( "pp_monedagastoid", typeof( int ) );  
			_dt.Columns.Add( "pp_gastocambiario", typeof( Decimal ) );  
			_dt.Columns.Add( "pp_montopago", typeof( Decimal ) );  
			_dt.Columns.Add( "pp_referencia", typeof( String ) );  
			_dt.Columns.Add( "pp_fechaboletadeposito", typeof( DateTime ) );  
			_dt.Columns.Add( "pp_nrorecibo", typeof( String ) );  
			_dt.Columns.Add( "pp_fecharecibo", typeof( DateTime ) );  
			_dt.Columns.Add( "pp_anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "pp_fechanotacredito", typeof( DateTime ) );  
			_dt.Columns.Add( "pp_notacreditonro", typeof( String ) );  
			_dt.Columns.Add( "pp_pagomultipleid", typeof( int ) );  
			_dt.Columns.Add( "pp_notacreditopresupid", typeof( int ) );  
			_dt.Columns.Add( "pp_nroboletadeposito", typeof( String ) );  
			_dt.Columns.Add( "pp_respcobroextid", typeof( int ) );  
			
			

			
			_dt.Columns["pp_pagopresupuestoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pp_pagopresupuesto",_dt.Columns["pp_pagopresupuestoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pp_pagopresupuestoRow( _dst, false );
			Old = new pp_pagopresupuestoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pp_pagopresupuesto

#region pp_partepresupuesto
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pp_partepresupuestoRow 
		{
			private  DSTab _dst;
			
			public Int_Field pp_partepresupuestoid;	
			public Int_Field pp_tramiteid;	
			public String_Field pp_descripcionserviciosesp;	
			public String_Field pp_descripciongastosing;	
			public String_Field pp_descripcionserviciosing;	
			public String_Field pp_descripciongastosesp;	

			public pp_partepresupuestoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pp_partepresupuestoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pp_tramiteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				pp_descripcionserviciosesp		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				pp_descripciongastosing		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				pp_descripcionserviciosing		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				pp_descripciongastosesp		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class pp_partepresupuestoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pp_partepresupuesto : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pp_partepresupuesto";
	
		
		public pp_partepresupuestoRow Dat;
		public pp_partepresupuestoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pp_partepresupuesto( DataTable tab ) : base() 
		{
			_dbTableName = "pp_partepresupuesto";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pp_partepresupuestoRow( _dst, false );
			Old = new pp_partepresupuestoRow( _dst , true );
		}
		
		
		public pp_partepresupuesto( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pp_partepresupuesto";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pp_partepresupuestoRow( _dst, false );
			Old = new pp_partepresupuestoRow( _dst , true );
		}
				
		public pp_partepresupuesto( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pp_partepresupuesto() : base() 
		{
			Init();
		}
		
		public pp_partepresupuesto( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pp_partepresupuesto";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pp_partepresupuestoid", typeof( int ) );  
			_dt.Columns.Add( "pp_tramiteid", typeof( int ) );  
			_dt.Columns.Add( "pp_descripcionserviciosesp", typeof( String ) );  
			_dt.Columns.Add( "pp_descripciongastosing", typeof( String ) );  
			_dt.Columns.Add( "pp_descripcionserviciosing", typeof( String ) );  
			_dt.Columns.Add( "pp_descripciongastosesp", typeof( String ) );  
			
			

			
			_dt.Columns["pp_partepresupuestoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pp_partepresupuesto",_dt.Columns["pp_partepresupuestoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pp_partepresupuestoRow( _dst, false );
			Old = new pp_partepresupuestoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pp_partepresupuesto

#region pr_proveedor
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class pr_proveedorRow 
		{
			private  DSTab _dst;
			
			public Int_Field pr_proveedorid;	
			public String_Field pr_nombre;	
			public String_Field pr_direccion;	
			public String_Field pr_ruc;	
			public String_Field pr_personeria;	
			public String_Field pr_obs;	
			public Int_Field pr_idiomaid;	
			public Int_Field pr_paisid;	
			public Boolean_Field pr_activo;	
			public Int_Field pr_ciudadid;	
			public String_Field pr_telefono;	
			public Int_Field pr_ddi;	
			public Boolean_Field pr_publico;	

			public pr_proveedorRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				pr_proveedorid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				pr_nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				pr_direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				pr_ruc		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				pr_personeria		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				pr_obs		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				pr_idiomaid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				pr_paisid		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				pr_activo		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				pr_ciudadid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				pr_telefono		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				pr_ddi		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				pr_publico		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class pr_proveedorRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class pr_proveedor : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "pr_proveedor";
	
		
		public pr_proveedorRow Dat;
		public pr_proveedorRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public pr_proveedor( DataTable tab ) : base() 
		{
			_dbTableName = "pr_proveedor";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pr_proveedorRow( _dst, false );
			Old = new pr_proveedorRow( _dst , true );
		}
		
		
		public pr_proveedor( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "pr_proveedor";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pr_proveedorRow( _dst, false );
			Old = new pr_proveedorRow( _dst , true );
		}
				
		public pr_proveedor( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public pr_proveedor() : base() 
		{
			Init();
		}
		
		public pr_proveedor( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "pr_proveedor";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "pr_proveedorid", typeof( int ) );  
			_dt.Columns.Add( "pr_nombre", typeof( String ) );  
			_dt.Columns.Add( "pr_direccion", typeof( String ) );  
			_dt.Columns.Add( "pr_ruc", typeof( String ) );  
			_dt.Columns.Add( "pr_personeria", typeof( String ) );  
			_dt.Columns.Add( "pr_obs", typeof( String ) );  
			_dt.Columns.Add( "pr_idiomaid", typeof( int ) );  
			_dt.Columns.Add( "pr_paisid", typeof( int ) );  
			_dt.Columns.Add( "pr_activo", typeof( Boolean ) );  
			_dt.Columns.Add( "pr_ciudadid", typeof( int ) );  
			_dt.Columns.Add( "pr_telefono", typeof( String ) );  
			_dt.Columns.Add( "pr_ddi", typeof( int ) );  
			_dt.Columns.Add( "pr_publico", typeof( Boolean ) );  
			
			

			
			_dt.Columns["pr_proveedorid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_pr_proveedor",_dt.Columns["pr_proveedorid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new pr_proveedorRow( _dst, false );
			Old = new pr_proveedorRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion pr_proveedor

#region Prioridad
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PrioridadRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	

			public PrioridadRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class PrioridadRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Prioridad : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Prioridad";
	
		
		public PrioridadRow Dat;
		public PrioridadRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Prioridad( DataTable tab ) : base() 
		{
			_dbTableName = "Prioridad";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PrioridadRow( _dst, false );
			Old = new PrioridadRow( _dst , true );
		}
		
		
		public Prioridad( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Prioridad";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PrioridadRow( _dst, false );
			Old = new PrioridadRow( _dst , true );
		}
				
		public Prioridad( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Prioridad() : base() 
		{
			Init();
		}
		
		public Prioridad( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Prioridad";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Prioridad",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PrioridadRow( _dst, false );
			Old = new PrioridadRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Prioridad

#region Proceso
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ProcesoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Int_Field PracticaID;	

			public ProcesoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				PracticaID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ProcesoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Proceso : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Proceso";
	
		
		public ProcesoRow Dat;
		public ProcesoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Proceso( DataTable tab ) : base() 
		{
			_dbTableName = "Proceso";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ProcesoRow( _dst, false );
			Old = new ProcesoRow( _dst , true );
		}
		
		
		public Proceso( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Proceso";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ProcesoRow( _dst, false );
			Old = new ProcesoRow( _dst , true );
		}
				
		public Proceso( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Proceso() : base() 
		{
			Init();
		}
		
		public Proceso( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Proceso";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "PracticaID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Proceso",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ProcesoRow( _dst, false );
			Old = new ProcesoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Proceso

#region PropClienteInstruccion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PropClienteInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public DateTime_Field FecAlta;	
			public Int_Field FuncionarioRegID;	
			public Int_Field FuncionarioRecID;	
			public String_Field Obs;	
			public Int_Field CorrespondenciaID;	
			public Int_Field InstruccionTipoID;	

			public PropClienteInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				FuncionarioRecID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class PropClienteInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PropClienteInstruccion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PropClienteInstruccion";
	
		
		public PropClienteInstruccionRow Dat;
		public PropClienteInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PropClienteInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "PropClienteInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropClienteInstruccionRow( _dst, false );
			Old = new PropClienteInstruccionRow( _dst , true );
		}
		
		
		public PropClienteInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PropClienteInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropClienteInstruccionRow( _dst, false );
			Old = new PropClienteInstruccionRow( _dst , true );
		}
				
		public PropClienteInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PropClienteInstruccion() : base() 
		{
			Init();
		}
		
		public PropClienteInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PropClienteInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRecID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PropClienteInstruccion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropClienteInstruccionRow( _dst, false );
			Old = new PropClienteInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PropClienteInstruccion

#region Propietario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Int_Field GrupoEmpresarialID;	
			public Int_Field CiudadID;	

			public PropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class PropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Propietario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Propietario";
	
		
		public PropietarioRow Dat;
		public PropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Propietario( DataTable tab ) : base() 
		{
			_dbTableName = "Propietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioRow( _dst, false );
			Old = new PropietarioRow( _dst , true );
		}
		
		
		public Propietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Propietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioRow( _dst, false );
			Old = new PropietarioRow( _dst , true );
		}
				
		public Propietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Propietario() : base() 
		{
			Init();
		}
		
		public Propietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Propietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Propietario",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioRow( _dst, false );
			Old = new PropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Propietario

#region PropietarioXMarca
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PropietarioXMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field MarcaID;	
			public DateTime_Field lastUpdated;	

			public PropietarioXMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class PropietarioXMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PropietarioXMarca : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PropietarioXMarca";
	
		
		public PropietarioXMarcaRow Dat;
		public PropietarioXMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PropietarioXMarca( DataTable tab ) : base() 
		{
			_dbTableName = "PropietarioXMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXMarcaRow( _dst, false );
			Old = new PropietarioXMarcaRow( _dst , true );
		}
		
		
		public PropietarioXMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PropietarioXMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXMarcaRow( _dst, false );
			Old = new PropietarioXMarcaRow( _dst , true );
		}
				
		public PropietarioXMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PropietarioXMarca() : base() 
		{
			Init();
		}
		
		public PropietarioXMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PropietarioXMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PropietarioXMarca",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXMarcaRow( _dst, false );
			Old = new PropietarioXMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PropietarioXMarca

#region PropietarioXPoder
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PropietarioXPoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field PoderID;	

			public PropietarioXPoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PoderID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class PropietarioXPoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PropietarioXPoder : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PropietarioXPoder";
	
		
		public PropietarioXPoderRow Dat;
		public PropietarioXPoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PropietarioXPoder( DataTable tab ) : base() 
		{
			_dbTableName = "PropietarioXPoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXPoderRow( _dst, false );
			Old = new PropietarioXPoderRow( _dst , true );
		}
		
		
		public PropietarioXPoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PropietarioXPoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXPoderRow( _dst, false );
			Old = new PropietarioXPoderRow( _dst , true );
		}
				
		public PropietarioXPoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PropietarioXPoder() : base() 
		{
			Init();
		}
		
		public PropietarioXPoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PropietarioXPoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PropietarioXPoder",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXPoderRow( _dst, false );
			Old = new PropietarioXPoderRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PropietarioXPoder

#region PropietarioXVia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class PropietarioXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field ViaID;	
			public String_Field Descrip;	

			public PropietarioXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class PropietarioXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class PropietarioXVia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "PropietarioXVia";
	
		
		public PropietarioXViaRow Dat;
		public PropietarioXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public PropietarioXVia( DataTable tab ) : base() 
		{
			_dbTableName = "PropietarioXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXViaRow( _dst, false );
			Old = new PropietarioXViaRow( _dst , true );
		}
		
		
		public PropietarioXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "PropietarioXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXViaRow( _dst, false );
			Old = new PropietarioXViaRow( _dst , true );
		}
				
		public PropietarioXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public PropietarioXVia() : base() 
		{
			Init();
		}
		
		public PropietarioXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "PropietarioXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_PropietarioXVia",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new PropietarioXViaRow( _dst, false );
			Old = new PropietarioXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion PropietarioXVia

#region ps_pagosolicitud
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ps_pagosolicitudRow 
		{
			private  DSTab _dst;
			
			public Int_Field ps_pagosolicitudid;	
			public String_Field ps_docorigen;	
			public Int_Field ps_proveedorid;	
			public String_Field ps_proveedornrofactura;	
			public DateTime_Field ps_proveedorfecfactura;	
			public Int_Field ps_monedaid;	
			public Int_Field ps_bancoid;	
			public Int_Field ps_cuentaid;	
			public Int_Field ps_formapagoid;	
			public DateTime_Field ps_fechapago;	
			public String_Field ps_nrocheque;	
			public DateTime_Field ps_feccheque;	
			public Int_Field ps_bancochequeid;	
			public Int_Field ps_cuentachequeid;	
			public Int_Field ps_monedagastoid;	
			public Decimal_Field ps_gastocambiario;	
			public Decimal_Field ps_montopago;	
			public String_Field ps_referencia;	
			public DateTime_Field ps_fechaboletadeposito;	
			public String_Field ps_nrorecibo;	
			public DateTime_Field ps_fecharecibo;	
			public Boolean_Field ps_anulado;	
			public DateTime_Field ps_fechaanulacion;	
			public DateTime_Field ps_fechanotacredito;	
			public String_Field ps_notacreditonro;	
			public String_Field ps_nombreproveedor;	
			public Int_Field ps_corresponsalid;	

			public ps_pagosolicitudRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ps_pagosolicitudid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ps_docorigen		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ps_proveedorid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ps_proveedornrofactura		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				ps_proveedorfecfactura		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				ps_monedaid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ps_bancoid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ps_cuentaid		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ps_formapagoid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ps_fechapago		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				ps_nrocheque		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ps_feccheque		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				ps_bancochequeid		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ps_cuentachequeid		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ps_monedagastoid		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ps_gastocambiario		= new Decimal_Field(	_dst, 15, IsOldDataVersion  );	
				ps_montopago		= new Decimal_Field(	_dst, 16, IsOldDataVersion  );	
				ps_referencia		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				ps_fechaboletadeposito		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				ps_nrorecibo		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				ps_fecharecibo		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				ps_anulado		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				ps_fechaanulacion		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
				ps_fechanotacredito		= new DateTime_Field(	_dst, 23, IsOldDataVersion  );	
				ps_notacreditonro		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				ps_nombreproveedor		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				ps_corresponsalid		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
			}
		} // end class ps_pagosolicitudRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ps_pagosolicitud : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ps_pagosolicitud";
	
		
		public ps_pagosolicitudRow Dat;
		public ps_pagosolicitudRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ps_pagosolicitud( DataTable tab ) : base() 
		{
			_dbTableName = "ps_pagosolicitud";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ps_pagosolicitudRow( _dst, false );
			Old = new ps_pagosolicitudRow( _dst , true );
		}
		
		
		public ps_pagosolicitud( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ps_pagosolicitud";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ps_pagosolicitudRow( _dst, false );
			Old = new ps_pagosolicitudRow( _dst , true );
		}
				
		public ps_pagosolicitud( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ps_pagosolicitud() : base() 
		{
			Init();
		}
		
		public ps_pagosolicitud( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ps_pagosolicitud";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ps_pagosolicitudid", typeof( int ) );  
			_dt.Columns.Add( "ps_docorigen", typeof( String ) );  
			_dt.Columns.Add( "ps_proveedorid", typeof( int ) );  
			_dt.Columns.Add( "ps_proveedornrofactura", typeof( String ) );  
			_dt.Columns.Add( "ps_proveedorfecfactura", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_monedaid", typeof( int ) );  
			_dt.Columns.Add( "ps_bancoid", typeof( int ) );  
			_dt.Columns.Add( "ps_cuentaid", typeof( int ) );  
			_dt.Columns.Add( "ps_formapagoid", typeof( int ) );  
			_dt.Columns.Add( "ps_fechapago", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_nrocheque", typeof( String ) );  
			_dt.Columns.Add( "ps_feccheque", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_bancochequeid", typeof( int ) );  
			_dt.Columns.Add( "ps_cuentachequeid", typeof( int ) );  
			_dt.Columns.Add( "ps_monedagastoid", typeof( int ) );  
			_dt.Columns.Add( "ps_gastocambiario", typeof( Decimal ) );  
			_dt.Columns.Add( "ps_montopago", typeof( Decimal ) );  
			_dt.Columns.Add( "ps_referencia", typeof( String ) );  
			_dt.Columns.Add( "ps_fechaboletadeposito", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_nrorecibo", typeof( String ) );  
			_dt.Columns.Add( "ps_fecharecibo", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "ps_fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_fechanotacredito", typeof( DateTime ) );  
			_dt.Columns.Add( "ps_notacreditonro", typeof( String ) );  
			_dt.Columns.Add( "ps_nombreproveedor", typeof( String ) );  
			_dt.Columns.Add( "ps_corresponsalid", typeof( int ) );  
			
			

			
			_dt.Columns["ps_pagosolicitudid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ps_pagosolicitud",_dt.Columns["ps_pagosolicitudid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ps_pagosolicitudRow( _dst, false );
			Old = new ps_pagosolicitudRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ps_pagosolicitud

#region ra_reporteasunto
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ra_reporteasuntoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ra_reporteasuntoid;	
			public String_Field ra_reporte_id;	
			public String_Field ra_asunto_esp;	
			public String_Field ra_asunto_ing;	

			public ra_reporteasuntoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ra_reporteasuntoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ra_reporte_id		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ra_asunto_esp		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ra_asunto_ing		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ra_reporteasuntoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ra_reporteasunto : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ra_reporteasunto";
	
		
		public ra_reporteasuntoRow Dat;
		public ra_reporteasuntoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ra_reporteasunto( DataTable tab ) : base() 
		{
			_dbTableName = "ra_reporteasunto";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ra_reporteasuntoRow( _dst, false );
			Old = new ra_reporteasuntoRow( _dst , true );
		}
		
		
		public ra_reporteasunto( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ra_reporteasunto";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ra_reporteasuntoRow( _dst, false );
			Old = new ra_reporteasuntoRow( _dst , true );
		}
				
		public ra_reporteasunto( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ra_reporteasunto() : base() 
		{
			Init();
		}
		
		public ra_reporteasunto( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ra_reporteasunto";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ra_reporteasuntoid", typeof( int ) );  
			_dt.Columns.Add( "ra_reporte_id", typeof( String ) );  
			_dt.Columns.Add( "ra_asunto_esp", typeof( String ) );  
			_dt.Columns.Add( "ra_asunto_ing", typeof( String ) );  
			
			

			
			_dt.Columns["ra_reporteasuntoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ra_reporteasunto",_dt.Columns["ra_reporteasuntoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ra_reporteasuntoRow( _dst, false );
			Old = new ra_reporteasuntoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ra_reporteasunto

#region rc_reclamocliente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class rc_reclamoclienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field rc_reclamoclienteid;	
			public DateTime_Field rc_fechareclamo;	
			public Int_Field rc_usuarioid;	
			public String_Field rc_textoreclamo;	
			public Decimal_Field rc_total;	
			public Int_Field rc_monedaid;	
			public Int_Field rc_clienteid;	
			public String_Field rc_from;	
			public String_Field rc_to;	
			public String_Field rc_cc;	
			public String_Field rc_bcc;	
			public String_Field rc_subject;	
			public String_Field rc_referencia;	

			public rc_reclamoclienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				rc_reclamoclienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				rc_fechareclamo		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				rc_usuarioid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				rc_textoreclamo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				rc_total		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
				rc_monedaid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				rc_clienteid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				rc_from		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				rc_to		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				rc_cc		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				rc_bcc		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				rc_subject		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				rc_referencia		= new String_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class rc_reclamoclienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class rc_reclamocliente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "rc_reclamocliente";
	
		
		public rc_reclamoclienteRow Dat;
		public rc_reclamoclienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public rc_reclamocliente( DataTable tab ) : base() 
		{
			_dbTableName = "rc_reclamocliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rc_reclamoclienteRow( _dst, false );
			Old = new rc_reclamoclienteRow( _dst , true );
		}
		
		
		public rc_reclamocliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "rc_reclamocliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rc_reclamoclienteRow( _dst, false );
			Old = new rc_reclamoclienteRow( _dst , true );
		}
				
		public rc_reclamocliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public rc_reclamocliente() : base() 
		{
			Init();
		}
		
		public rc_reclamocliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "rc_reclamocliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "rc_reclamoclienteid", typeof( int ) );  
			_dt.Columns.Add( "rc_fechareclamo", typeof( DateTime ) );  
			_dt.Columns.Add( "rc_usuarioid", typeof( int ) );  
			_dt.Columns.Add( "rc_textoreclamo", typeof( String ) );  
			_dt.Columns.Add( "rc_total", typeof( Decimal ) );  
			_dt.Columns.Add( "rc_monedaid", typeof( int ) );  
			_dt.Columns.Add( "rc_clienteid", typeof( int ) );  
			_dt.Columns.Add( "rc_from", typeof( String ) );  
			_dt.Columns.Add( "rc_to", typeof( String ) );  
			_dt.Columns.Add( "rc_cc", typeof( String ) );  
			_dt.Columns.Add( "rc_bcc", typeof( String ) );  
			_dt.Columns.Add( "rc_subject", typeof( String ) );  
			_dt.Columns.Add( "rc_referencia", typeof( String ) );  
			
			

			
			_dt.Columns["rc_reclamoclienteid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_rc_reclamocliente",_dt.Columns["rc_reclamoclienteid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rc_reclamoclienteRow( _dst, false );
			Old = new rc_reclamoclienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion rc_reclamocliente

#region rcm_relacotizamone
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class rcm_relacotizamoneRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MonedaID;	
			public Decimal_Field Factor;	

			public rcm_relacotizamoneRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MonedaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Factor		= new Decimal_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class rcm_relacotizamoneRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class rcm_relacotizamone : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "rcm_relacotizamone";
	
		
		public rcm_relacotizamoneRow Dat;
		public rcm_relacotizamoneRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public rcm_relacotizamone( DataTable tab ) : base() 
		{
			_dbTableName = "rcm_relacotizamone";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rcm_relacotizamoneRow( _dst, false );
			Old = new rcm_relacotizamoneRow( _dst , true );
		}
		
		
		public rcm_relacotizamone( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "rcm_relacotizamone";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rcm_relacotizamoneRow( _dst, false );
			Old = new rcm_relacotizamoneRow( _dst , true );
		}
				
		public rcm_relacotizamone( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public rcm_relacotizamone() : base() 
		{
			Init();
		}
		
		public rcm_relacotizamone( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "rcm_relacotizamone";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MonedaID", typeof( int ) );  
			_dt.Columns.Add( "Factor", typeof( Decimal ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_rcm_relacotizamone",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rcm_relacotizamoneRow( _dst, false );
			Old = new rcm_relacotizamoneRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion rcm_relacotizamone

#region rd_reclamoclientedetalle
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class rd_reclamoclientedetalleRow 
		{
			private  DSTab _dst;
			
			public Int_Field rd_reclamoclientedetalle;	
			public Int_Field rd_reclamoclientecabid;	
			public Int_Field rd_presupuestocabid;	
			public Decimal_Field rd_saldo;	
			public DateTime_Field rd_fecharereclamo;	

			public rd_reclamoclientedetalleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				rd_reclamoclientedetalle		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				rd_reclamoclientecabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				rd_presupuestocabid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				rd_saldo		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
				rd_fecharereclamo		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class rd_reclamoclientedetalleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class rd_reclamoclientedetalle : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "rd_reclamoclientedetalle";
	
		
		public rd_reclamoclientedetalleRow Dat;
		public rd_reclamoclientedetalleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public rd_reclamoclientedetalle( DataTable tab ) : base() 
		{
			_dbTableName = "rd_reclamoclientedetalle";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rd_reclamoclientedetalleRow( _dst, false );
			Old = new rd_reclamoclientedetalleRow( _dst , true );
		}
		
		
		public rd_reclamoclientedetalle( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "rd_reclamoclientedetalle";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rd_reclamoclientedetalleRow( _dst, false );
			Old = new rd_reclamoclientedetalleRow( _dst , true );
		}
				
		public rd_reclamoclientedetalle( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public rd_reclamoclientedetalle() : base() 
		{
			Init();
		}
		
		public rd_reclamoclientedetalle( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "rd_reclamoclientedetalle";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "rd_reclamoclientedetalle", typeof( int ) );  
			_dt.Columns.Add( "rd_reclamoclientecabid", typeof( int ) );  
			_dt.Columns.Add( "rd_presupuestocabid", typeof( int ) );  
			_dt.Columns.Add( "rd_saldo", typeof( Decimal ) );  
			_dt.Columns.Add( "rd_fecharereclamo", typeof( DateTime ) );  
			
			

			
			_dt.Columns["rd_reclamoclientedetalle"].AutoIncrement = true;
			_dt.Constraints.Add("pk_rd_reclamoclientedetalle",_dt.Columns["rd_reclamoclientedetalle"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rd_reclamoclientedetalleRow( _dst, false );
			Old = new rd_reclamoclientedetalleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion rd_reclamoclientedetalle

#region Recordatorios
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class RecordatoriosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field TipoRecordatorioID;	
			public Int_Field FuncionarioRemID;	
			public Int_Field FuncionarioRegID;	
			public String_Field Obs;	
			public Boolean_Field Acuse;	
			public DateTime_Field FecAcuse;	
			public DateTime_Field FecAlta;	
			public String_Field ContactoCliente;	
			public String_Field ContactoAcuse;	
			public String_Field Transcripcion;	

			public RecordatoriosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TipoRecordatorioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioRemID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Acuse		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				FecAcuse		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				ContactoCliente		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ContactoAcuse		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Transcripcion		= new String_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class RecordatoriosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Recordatorios : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Recordatorios";
	
		
		public RecordatoriosRow Dat;
		public RecordatoriosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Recordatorios( DataTable tab ) : base() 
		{
			_dbTableName = "Recordatorios";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new RecordatoriosRow( _dst, false );
			Old = new RecordatoriosRow( _dst , true );
		}
		
		
		public Recordatorios( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Recordatorios";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new RecordatoriosRow( _dst, false );
			Old = new RecordatoriosRow( _dst , true );
		}
				
		public Recordatorios( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Recordatorios() : base() 
		{
			Init();
		}
		
		public Recordatorios( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Recordatorios";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "TipoRecordatorioID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRemID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Acuse", typeof( Boolean ) );  
			_dt.Columns.Add( "FecAcuse", typeof( DateTime ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "ContactoCliente", typeof( String ) );  
			_dt.Columns.Add( "ContactoAcuse", typeof( String ) );  
			_dt.Columns.Add( "Transcripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Recordatorios",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new RecordatoriosRow( _dst, false );
			Old = new RecordatoriosRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Recordatorios

#region rm_rolmenu
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class rm_rolmenuRow 
		{
			private  DSTab _dst;
			
			public Int_Field rm_rolmenuid;	
			public Int_Field rm_rolid;	
			public Int_Field rm_menuid;	

			public rm_rolmenuRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				rm_rolmenuid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				rm_rolid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				rm_menuid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class rm_rolmenuRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class rm_rolmenu : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "rm_rolmenu";
	
		
		public rm_rolmenuRow Dat;
		public rm_rolmenuRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public rm_rolmenu( DataTable tab ) : base() 
		{
			_dbTableName = "rm_rolmenu";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rm_rolmenuRow( _dst, false );
			Old = new rm_rolmenuRow( _dst , true );
		}
		
		
		public rm_rolmenu( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "rm_rolmenu";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rm_rolmenuRow( _dst, false );
			Old = new rm_rolmenuRow( _dst , true );
		}
				
		public rm_rolmenu( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public rm_rolmenu() : base() 
		{
			Init();
		}
		
		public rm_rolmenu( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "rm_rolmenu";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "rm_rolmenuid", typeof( int ) );  
			_dt.Columns.Add( "rm_rolid", typeof( int ) );  
			_dt.Columns.Add( "rm_menuid", typeof( int ) );  
			
			

			
			_dt.Columns["rm_rolmenuid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_rm_rolmenu",_dt.Columns["rm_rolmenuid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rm_rolmenuRow( _dst, false );
			Old = new rm_rolmenuRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion rm_rolmenu

#region ro_rol
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ro_rolRow 
		{
			private  DSTab _dst;
			
			public Int_Field ro_rolid;	
			public Int_Field ro_sistemaid;	
			public String_Field ro_descripcion;	
			public Boolean_Field ro_administrador;	

			public ro_rolRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ro_rolid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ro_sistemaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ro_descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ro_administrador		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ro_rolRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ro_rol : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ro_rol";
	
		
		public ro_rolRow Dat;
		public ro_rolRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ro_rol( DataTable tab ) : base() 
		{
			_dbTableName = "ro_rol";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ro_rolRow( _dst, false );
			Old = new ro_rolRow( _dst , true );
		}
		
		
		public ro_rol( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ro_rol";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ro_rolRow( _dst, false );
			Old = new ro_rolRow( _dst , true );
		}
				
		public ro_rol( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ro_rol() : base() 
		{
			Init();
		}
		
		public ro_rol( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ro_rol";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ro_rolid", typeof( int ) );  
			_dt.Columns.Add( "ro_sistemaid", typeof( int ) );  
			_dt.Columns.Add( "ro_descripcion", typeof( String ) );  
			_dt.Columns.Add( "ro_administrador", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ro_rolid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ro_rol",_dt.Columns["ro_rolid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ro_rolRow( _dst, false );
			Old = new ro_rolRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ro_rol

#region rpt_reporte
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class rpt_reporteRow 
		{
			private  DSTab _dst;
			
			public Int_Field rpt_reporteid;	
			public String_Field rpt_nombre;	

			public rpt_reporteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				rpt_reporteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				rpt_nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class rpt_reporteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class rpt_reporte : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "rpt_reporte";
	
		
		public rpt_reporteRow Dat;
		public rpt_reporteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public rpt_reporte( DataTable tab ) : base() 
		{
			_dbTableName = "rpt_reporte";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rpt_reporteRow( _dst, false );
			Old = new rpt_reporteRow( _dst , true );
		}
		
		
		public rpt_reporte( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "rpt_reporte";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rpt_reporteRow( _dst, false );
			Old = new rpt_reporteRow( _dst , true );
		}
				
		public rpt_reporte( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public rpt_reporte() : base() 
		{
			Init();
		}
		
		public rpt_reporte( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "rpt_reporte";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "rpt_reporteid", typeof( int ) );  
			_dt.Columns.Add( "rpt_nombre", typeof( String ) );  
			
			

			
			_dt.Columns["rpt_reporteid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_rpt_reporte",_dt.Columns["rpt_reporteid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new rpt_reporteRow( _dst, false );
			Old = new rpt_reporteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion rpt_reporte

#region ru_rolusuario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ru_rolusuarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ru_rolusuarioid;	
			public Int_Field ru_rolid;	
			public Int_Field ru_usuarioid;	
			public Boolean_Field ru_puedevertodo;	

			public ru_rolusuarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ru_rolusuarioid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ru_rolid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ru_usuarioid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ru_puedevertodo		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ru_rolusuarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ru_rolusuario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ru_rolusuario";
	
		
		public ru_rolusuarioRow Dat;
		public ru_rolusuarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ru_rolusuario( DataTable tab ) : base() 
		{
			_dbTableName = "ru_rolusuario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ru_rolusuarioRow( _dst, false );
			Old = new ru_rolusuarioRow( _dst , true );
		}
		
		
		public ru_rolusuario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ru_rolusuario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ru_rolusuarioRow( _dst, false );
			Old = new ru_rolusuarioRow( _dst , true );
		}
				
		public ru_rolusuario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ru_rolusuario() : base() 
		{
			Init();
		}
		
		public ru_rolusuario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ru_rolusuario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ru_rolusuarioid", typeof( int ) );  
			_dt.Columns.Add( "ru_rolid", typeof( int ) );  
			_dt.Columns.Add( "ru_usuarioid", typeof( int ) );  
			_dt.Columns.Add( "ru_puedevertodo", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ru_rolusuarioid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ru_rolusuario",_dt.Columns["ru_rolusuarioid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ru_rolusuarioRow( _dst, false );
			Old = new ru_rolusuarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ru_rolusuario

#region sa_subarea
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class sa_subareaRow 
		{
			private  DSTab _dst;
			
			public Int_Field sa_subareaid;	
			public Int_Field sa_areaid;	
			public String_Field sa_descripcion;	

			public sa_subareaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				sa_subareaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				sa_areaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				sa_descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class sa_subareaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class sa_subarea : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "sa_subarea";
	
		
		public sa_subareaRow Dat;
		public sa_subareaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public sa_subarea( DataTable tab ) : base() 
		{
			_dbTableName = "sa_subarea";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sa_subareaRow( _dst, false );
			Old = new sa_subareaRow( _dst , true );
		}
		
		
		public sa_subarea( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "sa_subarea";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sa_subareaRow( _dst, false );
			Old = new sa_subareaRow( _dst , true );
		}
				
		public sa_subarea( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public sa_subarea() : base() 
		{
			Init();
		}
		
		public sa_subarea( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "sa_subarea";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "sa_subareaid", typeof( int ) );  
			_dt.Columns.Add( "sa_areaid", typeof( int ) );  
			_dt.Columns.Add( "sa_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["sa_subareaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_sa_subarea",_dt.Columns["sa_subareaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sa_subareaRow( _dst, false );
			Old = new sa_subareaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion sa_subarea

#region si_sistema
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class si_sistemaRow 
		{
			private  DSTab _dst;
			
			public Int_Field si_sistemaid;	
			public String_Field si_descripcion;	

			public si_sistemaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				si_sistemaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				si_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class si_sistemaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class si_sistema : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "si_sistema";
	
		
		public si_sistemaRow Dat;
		public si_sistemaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public si_sistema( DataTable tab ) : base() 
		{
			_dbTableName = "si_sistema";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new si_sistemaRow( _dst, false );
			Old = new si_sistemaRow( _dst , true );
		}
		
		
		public si_sistema( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "si_sistema";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new si_sistemaRow( _dst, false );
			Old = new si_sistemaRow( _dst , true );
		}
				
		public si_sistema( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public si_sistema() : base() 
		{
			Init();
		}
		
		public si_sistema( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "si_sistema";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "si_sistemaid", typeof( int ) );  
			_dt.Columns.Add( "si_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["si_sistemaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_si_sistema",_dt.Columns["si_sistemaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new si_sistemaRow( _dst, false );
			Old = new si_sistemaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion si_sistema

#region Situacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class SituacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Boolean_Field StandBy;	
			public Boolean_Field EnTramite;	
			public DateTime_Field lastUpdated;	

			public SituacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class SituacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Situacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Situacion";
	
		
		public SituacionRow Dat;
		public SituacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Situacion( DataTable tab ) : base() 
		{
			_dbTableName = "Situacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SituacionRow( _dst, false );
			Old = new SituacionRow( _dst , true );
		}
		
		
		public Situacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Situacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SituacionRow( _dst, false );
			Old = new SituacionRow( _dst , true );
		}
				
		public Situacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Situacion() : base() 
		{
			Init();
		}
		
		public Situacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Situacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Situacion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SituacionRow( _dst, false );
			Old = new SituacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Situacion

#region spc_solicitudpagocab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class spc_solicitudpagocabRow 
		{
			private  DSTab _dst;
			
			public Int_Field spc_solicitudpagocabid;	
			public Int_Field spc_expedienteid;	
			public Int_Field spc_ordentrabajoid;	
			public String_Field spc_origen;	
			public Boolean_Field spc_tiposolicitudpago;	
			public Int_Field spc_gastogeneralid;	
			public Int_Field spc_unidadnegocioid;	
			public Int_Field spc_monedaid;	
			public Int_Field spc_clienteid;	
			public Int_Field spc_tramiteid;	
			public Int_Field spc_actanro;	
			public Int_Field spc_actaanio;	
			public Int_Field spc_hinro;	
			public Int_Field spc_hianio;	
			public DateTime_Field spc_fechasol;	
			public String_Field spc_refcliente;	
			public String_Field spc_observacion;	
			public Decimal_Field spc_importe;	
			public Decimal_Field spc_saldo;	
			public String_Field spc_estado;	
			public DateTime_Field spc_fechaanulacion;	
			public Int_Field spc_areaid;	
			public String_Field spc_presupcabids;	
			public Boolean_Field spc_tipoasociacionpresup;	

			public spc_solicitudpagocabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				spc_solicitudpagocabid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				spc_expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				spc_ordentrabajoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				spc_origen		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				spc_tiposolicitudpago		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				spc_gastogeneralid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				spc_unidadnegocioid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				spc_monedaid		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				spc_clienteid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				spc_tramiteid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				spc_actanro		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				spc_actaanio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				spc_hinro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				spc_hianio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				spc_fechasol		= new DateTime_Field(	_dst, 14, IsOldDataVersion  );	
				spc_refcliente		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				spc_observacion		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				spc_importe		= new Decimal_Field(	_dst, 17, IsOldDataVersion  );	
				spc_saldo		= new Decimal_Field(	_dst, 18, IsOldDataVersion  );	
				spc_estado		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				spc_fechaanulacion		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				spc_areaid		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				spc_presupcabids		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				spc_tipoasociacionpresup		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class spc_solicitudpagocabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class spc_solicitudpagocab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "spc_solicitudpagocab";
	
		
		public spc_solicitudpagocabRow Dat;
		public spc_solicitudpagocabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public spc_solicitudpagocab( DataTable tab ) : base() 
		{
			_dbTableName = "spc_solicitudpagocab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new spc_solicitudpagocabRow( _dst, false );
			Old = new spc_solicitudpagocabRow( _dst , true );
		}
		
		
		public spc_solicitudpagocab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "spc_solicitudpagocab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new spc_solicitudpagocabRow( _dst, false );
			Old = new spc_solicitudpagocabRow( _dst , true );
		}
				
		public spc_solicitudpagocab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public spc_solicitudpagocab() : base() 
		{
			Init();
		}
		
		public spc_solicitudpagocab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "spc_solicitudpagocab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "spc_solicitudpagocabid", typeof( int ) );  
			_dt.Columns.Add( "spc_expedienteid", typeof( int ) );  
			_dt.Columns.Add( "spc_ordentrabajoid", typeof( int ) );  
			_dt.Columns.Add( "spc_origen", typeof( String ) );  
			_dt.Columns.Add( "spc_tiposolicitudpago", typeof( Boolean ) );  
			_dt.Columns.Add( "spc_gastogeneralid", typeof( int ) );  
			_dt.Columns.Add( "spc_unidadnegocioid", typeof( int ) );  
			_dt.Columns.Add( "spc_monedaid", typeof( int ) );  
			_dt.Columns.Add( "spc_clienteid", typeof( int ) );  
			_dt.Columns.Add( "spc_tramiteid", typeof( int ) );  
			_dt.Columns.Add( "spc_actanro", typeof( int ) );  
			_dt.Columns.Add( "spc_actaanio", typeof( int ) );  
			_dt.Columns.Add( "spc_hinro", typeof( int ) );  
			_dt.Columns.Add( "spc_hianio", typeof( int ) );  
			_dt.Columns.Add( "spc_fechasol", typeof( DateTime ) );  
			_dt.Columns.Add( "spc_refcliente", typeof( String ) );  
			_dt.Columns.Add( "spc_observacion", typeof( String ) );  
			_dt.Columns.Add( "spc_importe", typeof( Decimal ) );  
			_dt.Columns.Add( "spc_saldo", typeof( Decimal ) );  
			_dt.Columns.Add( "spc_estado", typeof( String ) );  
			_dt.Columns.Add( "spc_fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "spc_areaid", typeof( int ) );  
			_dt.Columns.Add( "spc_presupcabids", typeof( String ) );  
			_dt.Columns.Add( "spc_tipoasociacionpresup", typeof( Boolean ) );  
			
			

			
			_dt.Columns["spc_solicitudpagocabid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_spc_solicitudpagocab",_dt.Columns["spc_solicitudpagocabid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new spc_solicitudpagocabRow( _dst, false );
			Old = new spc_solicitudpagocabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion spc_solicitudpagocab

#region spd_solicitudpagodet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class spd_solicitudpagodetRow 
		{
			private  DSTab _dst;
			
			public Int_Field spd_solicitudpagodetid;	
			public Int_Field spd_solicitudpagocabid;	
			public Int_Field spd_tarifaid;	
			public Decimal_Field spd_cantidad;	
			public Boolean_Field spd_tipounidaddesc;	
			public Decimal_Field spd_descuentomonto;	
			public Decimal_Field spd_descuentoporcentaje;	
			public Boolean_Field spd_tipounidadimp;	
			public Decimal_Field spd_impuestomonto;	
			public Decimal_Field spd_impuestoporcentaje;	
			public Decimal_Field spd_precioventa;	
			public Decimal_Field spd_preciocosto;	
			public Decimal_Field spd_exentas;	
			public Decimal_Field spd_iva5;	
			public Decimal_Field spd_iva10;	
			public Decimal_Field spd_total;	
			public Decimal_Field spd_recargoneto;	
			public Decimal_Field spd_totalconrecargo;	
			public Int_Field spd_proveedorid;	
			public String_Field spd_nrofactura;	
			public Boolean_Field spd_facturable;	
			public Boolean_Field spd_reembolsable;	
			public Int_Field spd_solicitadopor;	
			public Int_Field spd_correspondenciaid;	
			public DateTime_Field spd_fechasol;	
			public Decimal_Field spd_saldo;	
			public DateTime_Field spd_fechafactura;	
			public Decimal_Field spd_cantidadiva10;	
			public Decimal_Field spd_precunitiva10;	
			public Decimal_Field spd_cantidadiva5;	
			public Decimal_Field spd_precunitiva5;	
			public Int_Field spd_tipofacturaid;	

			public spd_solicitudpagodetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				spd_solicitudpagodetid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				spd_solicitudpagocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				spd_tarifaid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				spd_cantidad		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
				spd_tipounidaddesc		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				spd_descuentomonto		= new Decimal_Field(	_dst, 5, IsOldDataVersion  );	
				spd_descuentoporcentaje		= new Decimal_Field(	_dst, 6, IsOldDataVersion  );	
				spd_tipounidadimp		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				spd_impuestomonto		= new Decimal_Field(	_dst, 8, IsOldDataVersion  );	
				spd_impuestoporcentaje		= new Decimal_Field(	_dst, 9, IsOldDataVersion  );	
				spd_precioventa		= new Decimal_Field(	_dst, 10, IsOldDataVersion  );	
				spd_preciocosto		= new Decimal_Field(	_dst, 11, IsOldDataVersion  );	
				spd_exentas		= new Decimal_Field(	_dst, 12, IsOldDataVersion  );	
				spd_iva5		= new Decimal_Field(	_dst, 13, IsOldDataVersion  );	
				spd_iva10		= new Decimal_Field(	_dst, 14, IsOldDataVersion  );	
				spd_total		= new Decimal_Field(	_dst, 15, IsOldDataVersion  );	
				spd_recargoneto		= new Decimal_Field(	_dst, 16, IsOldDataVersion  );	
				spd_totalconrecargo		= new Decimal_Field(	_dst, 17, IsOldDataVersion  );	
				spd_proveedorid		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				spd_nrofactura		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				spd_facturable		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				spd_reembolsable		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				spd_solicitadopor		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				spd_correspondenciaid		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				spd_fechasol		= new DateTime_Field(	_dst, 24, IsOldDataVersion  );	
				spd_saldo		= new Decimal_Field(	_dst, 25, IsOldDataVersion  );	
				spd_fechafactura		= new DateTime_Field(	_dst, 26, IsOldDataVersion  );	
				spd_cantidadiva10		= new Decimal_Field(	_dst, 27, IsOldDataVersion  );	
				spd_precunitiva10		= new Decimal_Field(	_dst, 28, IsOldDataVersion  );	
				spd_cantidadiva5		= new Decimal_Field(	_dst, 29, IsOldDataVersion  );	
				spd_precunitiva5		= new Decimal_Field(	_dst, 30, IsOldDataVersion  );	
				spd_tipofacturaid		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
			}
		} // end class spd_solicitudpagodetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class spd_solicitudpagodet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "spd_solicitudpagodet";
	
		
		public spd_solicitudpagodetRow Dat;
		public spd_solicitudpagodetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public spd_solicitudpagodet( DataTable tab ) : base() 
		{
			_dbTableName = "spd_solicitudpagodet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new spd_solicitudpagodetRow( _dst, false );
			Old = new spd_solicitudpagodetRow( _dst , true );
		}
		
		
		public spd_solicitudpagodet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "spd_solicitudpagodet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new spd_solicitudpagodetRow( _dst, false );
			Old = new spd_solicitudpagodetRow( _dst , true );
		}
				
		public spd_solicitudpagodet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public spd_solicitudpagodet() : base() 
		{
			Init();
		}
		
		public spd_solicitudpagodet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "spd_solicitudpagodet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "spd_solicitudpagodetid", typeof( int ) );  
			_dt.Columns.Add( "spd_solicitudpagocabid", typeof( int ) );  
			_dt.Columns.Add( "spd_tarifaid", typeof( int ) );  
			_dt.Columns.Add( "spd_cantidad", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_tipounidaddesc", typeof( Boolean ) );  
			_dt.Columns.Add( "spd_descuentomonto", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_descuentoporcentaje", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_tipounidadimp", typeof( Boolean ) );  
			_dt.Columns.Add( "spd_impuestomonto", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_impuestoporcentaje", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_precioventa", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_preciocosto", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_exentas", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_iva5", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_iva10", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_total", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_recargoneto", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_totalconrecargo", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_proveedorid", typeof( int ) );  
			_dt.Columns.Add( "spd_nrofactura", typeof( String ) );  
			_dt.Columns.Add( "spd_facturable", typeof( Boolean ) );  
			_dt.Columns.Add( "spd_reembolsable", typeof( Boolean ) );  
			_dt.Columns.Add( "spd_solicitadopor", typeof( int ) );  
			_dt.Columns.Add( "spd_correspondenciaid", typeof( int ) );  
			_dt.Columns.Add( "spd_fechasol", typeof( DateTime ) );  
			_dt.Columns.Add( "spd_saldo", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_fechafactura", typeof( DateTime ) );  
			_dt.Columns.Add( "spd_cantidadiva10", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_precunitiva10", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_cantidadiva5", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_precunitiva5", typeof( Decimal ) );  
			_dt.Columns.Add( "spd_tipofacturaid", typeof( int ) );  
			
			

			
			_dt.Columns["spd_solicitudpagodetid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_spd_solicitudpagodet",_dt.Columns["spd_solicitudpagodetid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new spd_solicitudpagodetRow( _dst, false );
			Old = new spd_solicitudpagodetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion spd_solicitudpagodet

#region sr_seguimientoreporte
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class sr_seguimientoreporteRow 
		{
			private  DSTab _dst;
			
			public Int_Field sr_seguimientoreporteid;	
			public Int_Field sr_reporteid;	
			public DateTime_Field sr_fechaultgen;	

			public sr_seguimientoreporteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				sr_seguimientoreporteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				sr_reporteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				sr_fechaultgen		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class sr_seguimientoreporteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class sr_seguimientoreporte : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "sr_seguimientoreporte";
	
		
		public sr_seguimientoreporteRow Dat;
		public sr_seguimientoreporteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public sr_seguimientoreporte( DataTable tab ) : base() 
		{
			_dbTableName = "sr_seguimientoreporte";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sr_seguimientoreporteRow( _dst, false );
			Old = new sr_seguimientoreporteRow( _dst , true );
		}
		
		
		public sr_seguimientoreporte( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "sr_seguimientoreporte";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sr_seguimientoreporteRow( _dst, false );
			Old = new sr_seguimientoreporteRow( _dst , true );
		}
				
		public sr_seguimientoreporte( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public sr_seguimientoreporte() : base() 
		{
			Init();
		}
		
		public sr_seguimientoreporte( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "sr_seguimientoreporte";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "sr_seguimientoreporteid", typeof( int ) );  
			_dt.Columns.Add( "sr_reporteid", typeof( int ) );  
			_dt.Columns.Add( "sr_fechaultgen", typeof( DateTime ) );  
			
			

			
			_dt.Columns["sr_seguimientoreporteid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_sr_seguimientoreporte",_dt.Columns["sr_seguimientoreporteid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sr_seguimientoreporteRow( _dst, false );
			Old = new sr_seguimientoreporteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion sr_seguimientoreporte

#region su_serieusuario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class su_serieusuarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field su_serieusuarioid;	
			public Int_Field su_usuarioid;	
			public Int_Field su_timbradoid;	

			public su_serieusuarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				su_serieusuarioid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				su_usuarioid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				su_timbradoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class su_serieusuarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class su_serieusuario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "su_serieusuario";
	
		
		public su_serieusuarioRow Dat;
		public su_serieusuarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public su_serieusuario( DataTable tab ) : base() 
		{
			_dbTableName = "su_serieusuario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new su_serieusuarioRow( _dst, false );
			Old = new su_serieusuarioRow( _dst , true );
		}
		
		
		public su_serieusuario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "su_serieusuario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new su_serieusuarioRow( _dst, false );
			Old = new su_serieusuarioRow( _dst , true );
		}
				
		public su_serieusuario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public su_serieusuario() : base() 
		{
			Init();
		}
		
		public su_serieusuario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "su_serieusuario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "su_serieusuarioid", typeof( int ) );  
			_dt.Columns.Add( "su_usuarioid", typeof( int ) );  
			_dt.Columns.Add( "su_timbradoid", typeof( int ) );  
			
			

			
			_dt.Columns["su_serieusuarioid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_su_serieusuario",_dt.Columns["su_serieusuarioid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new su_serieusuarioRow( _dst, false );
			Old = new su_serieusuarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion su_serieusuario

#region Suscripcion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class SuscripcionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public String_Field Origen;	
			public Int_Field FuncionarioRegID;	
			public Int_Field ClienteExternoID;	
			public Int_Field ClienteInternoID;	
			public String_Field Mail;	
			public String_Field Fax;	
			public DateTime_Field FecSuscripcion;	
			public DateTime_Field FecVencimiento;	
			public String_Field Estado;	
			public String_Field Msg;	
			public String_Field Obs;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecBaja;	
			public Int_Field ModoEnvioID;	

			public SuscripcionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Origen		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClienteExternoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClienteInternoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Mail		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FecSuscripcion		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FecVencimiento		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Msg		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				FecBaja		= new DateTime_Field(	_dst, 14, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class SuscripcionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Suscripcion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Suscripcion";
	
		
		public SuscripcionRow Dat;
		public SuscripcionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Suscripcion( DataTable tab ) : base() 
		{
			_dbTableName = "Suscripcion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionRow( _dst, false );
			Old = new SuscripcionRow( _dst , true );
		}
		
		
		public Suscripcion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Suscripcion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionRow( _dst, false );
			Old = new SuscripcionRow( _dst , true );
		}
				
		public Suscripcion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Suscripcion() : base() 
		{
			Init();
		}
		
		public Suscripcion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Suscripcion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Origen", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteInternoID", typeof( int ) );  
			_dt.Columns.Add( "Mail", typeof( String ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "FecSuscripcion", typeof( DateTime ) );  
			_dt.Columns.Add( "FecVencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Msg", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecBaja", typeof( DateTime ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Suscripcion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionRow( _dst, false );
			Old = new SuscripcionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Suscripcion

#region SuscripcionTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class SuscripcionTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Tipo;	
			public String_Field Nombre;	
			public String_Field Descripcion;	
			public DateTime_Field FecAlta;	
			public String_Field SituacionID;	
			public String_Field ClaseNro;	
			public String_Field TipoMarcaID;	
			public String_Field Tramites;	
			public String_Field Propietario;	
			public Int_Field Periodo;	
			public Boolean_Field FecVencSit;	
			public Boolean_Field Registrado;	
			public Int_Field PlantillaID;	
			public String_Field MailOrigen;	
			public String_Field MailSubject;	
			public String_Field AgenteLocalID;	

			public SuscripcionTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				SituacionID		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseNro		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TipoMarcaID		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Tramites		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Periodo		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				FecVencSit		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Registrado		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				MailSubject		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				AgenteLocalID		= new String_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class SuscripcionTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class SuscripcionTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "SuscripcionTipo";
	
		
		public SuscripcionTipoRow Dat;
		public SuscripcionTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public SuscripcionTipo( DataTable tab ) : base() 
		{
			_dbTableName = "SuscripcionTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionTipoRow( _dst, false );
			Old = new SuscripcionTipoRow( _dst , true );
		}
		
		
		public SuscripcionTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "SuscripcionTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionTipoRow( _dst, false );
			Old = new SuscripcionTipoRow( _dst , true );
		}
				
		public SuscripcionTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public SuscripcionTipo() : base() 
		{
			Init();
		}
		
		public SuscripcionTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "SuscripcionTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionID", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( String ) );  
			_dt.Columns.Add( "TipoMarcaID", typeof( String ) );  
			_dt.Columns.Add( "Tramites", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Periodo", typeof( int ) );  
			_dt.Columns.Add( "FecVencSit", typeof( Boolean ) );  
			_dt.Columns.Add( "Registrado", typeof( Boolean ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "MailSubject", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_SuscripcionTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionTipoRow( _dst, false );
			Old = new SuscripcionTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion SuscripcionTipo

#region SuscripcionTipoPL
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class SuscripcionTipoPLRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field PlantillaID;	
			public Boolean_Field Activo;	

			public SuscripcionTipoPLRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class SuscripcionTipoPLRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class SuscripcionTipoPL : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "SuscripcionTipoPL";
	
		
		public SuscripcionTipoPLRow Dat;
		public SuscripcionTipoPLRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public SuscripcionTipoPL( DataTable tab ) : base() 
		{
			_dbTableName = "SuscripcionTipoPL";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionTipoPLRow( _dst, false );
			Old = new SuscripcionTipoPLRow( _dst , true );
		}
		
		
		public SuscripcionTipoPL( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "SuscripcionTipoPL";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionTipoPLRow( _dst, false );
			Old = new SuscripcionTipoPLRow( _dst , true );
		}
				
		public SuscripcionTipoPL( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public SuscripcionTipoPL() : base() 
		{
			Init();
		}
		
		public SuscripcionTipoPL( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "SuscripcionTipoPL";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_SuscripcionTipoPL",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new SuscripcionTipoPLRow( _dst, false );
			Old = new SuscripcionTipoPLRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion SuscripcionTipoPL

#region sxd_solpagodetalle
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class sxd_solpagodetalleRow 
		{
			private  DSTab _dst;
			
			public Int_Field sxd_solpagodetalleid;	
			public Int_Field sxd_solxpagocabid;	
			public Int_Field sxd_solpagodetid;	
			public Decimal_Field sxd_montopagado;	

			public sxd_solpagodetalleRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				sxd_solpagodetalleid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				sxd_solxpagocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				sxd_solpagodetid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				sxd_montopagado		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class sxd_solpagodetalleRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class sxd_solpagodetalle : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "sxd_solpagodetalle";
	
		
		public sxd_solpagodetalleRow Dat;
		public sxd_solpagodetalleRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public sxd_solpagodetalle( DataTable tab ) : base() 
		{
			_dbTableName = "sxd_solpagodetalle";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sxd_solpagodetalleRow( _dst, false );
			Old = new sxd_solpagodetalleRow( _dst , true );
		}
		
		
		public sxd_solpagodetalle( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "sxd_solpagodetalle";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sxd_solpagodetalleRow( _dst, false );
			Old = new sxd_solpagodetalleRow( _dst , true );
		}
				
		public sxd_solpagodetalle( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public sxd_solpagodetalle() : base() 
		{
			Init();
		}
		
		public sxd_solpagodetalle( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "sxd_solpagodetalle";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "sxd_solpagodetalleid", typeof( int ) );  
			_dt.Columns.Add( "sxd_solxpagocabid", typeof( int ) );  
			_dt.Columns.Add( "sxd_solpagodetid", typeof( int ) );  
			_dt.Columns.Add( "sxd_montopagado", typeof( Decimal ) );  
			
			

			
			_dt.Columns["sxd_solpagodetalleid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_sxd_solpagodetalle",_dt.Columns["sxd_solpagodetalleid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sxd_solpagodetalleRow( _dst, false );
			Old = new sxd_solpagodetalleRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion sxd_solpagodetalle

#region sxp_solicitudesxpago
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class sxp_solicitudesxpagoRow 
		{
			private  DSTab _dst;
			
			public Int_Field sxp_solicitudxpagoid;	
			public Int_Field sxp_solicitudpagocabid;	
			public Int_Field sxp_pagosolicitudid;	
			public Decimal_Field sxp_monto;	

			public sxp_solicitudesxpagoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				sxp_solicitudxpagoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				sxp_solicitudpagocabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				sxp_pagosolicitudid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				sxp_monto		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class sxp_solicitudesxpagoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class sxp_solicitudesxpago : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "sxp_solicitudesxpago";
	
		
		public sxp_solicitudesxpagoRow Dat;
		public sxp_solicitudesxpagoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public sxp_solicitudesxpago( DataTable tab ) : base() 
		{
			_dbTableName = "sxp_solicitudesxpago";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sxp_solicitudesxpagoRow( _dst, false );
			Old = new sxp_solicitudesxpagoRow( _dst , true );
		}
		
		
		public sxp_solicitudesxpago( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "sxp_solicitudesxpago";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sxp_solicitudesxpagoRow( _dst, false );
			Old = new sxp_solicitudesxpagoRow( _dst , true );
		}
				
		public sxp_solicitudesxpago( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public sxp_solicitudesxpago() : base() 
		{
			Init();
		}
		
		public sxp_solicitudesxpago( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "sxp_solicitudesxpago";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "sxp_solicitudxpagoid", typeof( int ) );  
			_dt.Columns.Add( "sxp_solicitudpagocabid", typeof( int ) );  
			_dt.Columns.Add( "sxp_pagosolicitudid", typeof( int ) );  
			_dt.Columns.Add( "sxp_monto", typeof( Decimal ) );  
			
			

			
			_dt.Columns["sxp_solicitudxpagoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_sxp_solicitudesxpago",_dt.Columns["sxp_solicitudxpagoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sxp_solicitudesxpagoRow( _dst, false );
			Old = new sxp_solicitudesxpagoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion sxp_solicitudesxpago

#region sysdiagrams
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class sysdiagramsRow 
		{
			private  DSTab _dst;
			
			public String_Field name;	
			public Int_Field principal_id;	
			public Int_Field diagram_id;	
			public Int_Field version;	
			public Binary_Field definition;	

			public sysdiagramsRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				name		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				principal_id		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				diagram_id		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				version		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				definition		= new Binary_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class sysdiagramsRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class sysdiagrams : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "sysdiagrams";
	
		
		public sysdiagramsRow Dat;
		public sysdiagramsRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public sysdiagrams( DataTable tab ) : base() 
		{
			_dbTableName = "sysdiagrams";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sysdiagramsRow( _dst, false );
			Old = new sysdiagramsRow( _dst , true );
		}
		
		
		public sysdiagrams( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "sysdiagrams";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sysdiagramsRow( _dst, false );
			Old = new sysdiagramsRow( _dst , true );
		}
				
		public sysdiagrams( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public sysdiagrams() : base() 
		{
			Init();
		}
		
		public sysdiagrams( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "sysdiagrams";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "name", typeof( String ) );  
			_dt.Columns.Add( "principal_id", typeof( int ) );  
			_dt.Columns.Add( "diagram_id", typeof( int ) );  
			_dt.Columns.Add( "version", typeof( int ) );  
			_dt.Columns.Add( "definition", typeof( Byte[] ) );  
			
			

			
			_dt.Columns["diagram_id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_sysdiagrams",_dt.Columns["diagram_id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new sysdiagramsRow( _dst, false );
			Old = new sysdiagramsRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion sysdiagrams

#region ta_tipoactuacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ta_tipoactuacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ta_tipoactuacionid;	
			public String_Field ta_descripcion;	
			public Int_Field ta_plazo;	
			public Boolean_Field ta_diashabiles;	
			public Int_Field ta_tipodocescaneadoid;	
			public Int_Field ta_instanciaid;	
			public String_Field ta_codigoanterior;	

			public ta_tipoactuacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ta_tipoactuacionid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ta_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ta_plazo		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ta_diashabiles		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				ta_tipodocescaneadoid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ta_instanciaid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ta_codigoanterior		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class ta_tipoactuacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ta_tipoactuacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ta_tipoactuacion";
	
		
		public ta_tipoactuacionRow Dat;
		public ta_tipoactuacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ta_tipoactuacion( DataTable tab ) : base() 
		{
			_dbTableName = "ta_tipoactuacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ta_tipoactuacionRow( _dst, false );
			Old = new ta_tipoactuacionRow( _dst , true );
		}
		
		
		public ta_tipoactuacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ta_tipoactuacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ta_tipoactuacionRow( _dst, false );
			Old = new ta_tipoactuacionRow( _dst , true );
		}
				
		public ta_tipoactuacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ta_tipoactuacion() : base() 
		{
			Init();
		}
		
		public ta_tipoactuacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ta_tipoactuacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ta_tipoactuacionid", typeof( int ) );  
			_dt.Columns.Add( "ta_descripcion", typeof( String ) );  
			_dt.Columns.Add( "ta_plazo", typeof( int ) );  
			_dt.Columns.Add( "ta_diashabiles", typeof( Boolean ) );  
			_dt.Columns.Add( "ta_tipodocescaneadoid", typeof( int ) );  
			_dt.Columns.Add( "ta_instanciaid", typeof( int ) );  
			_dt.Columns.Add( "ta_codigoanterior", typeof( String ) );  
			
			

			
			_dt.Columns["ta_tipoactuacionid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ta_tipoactuacion",_dt.Columns["ta_tipoactuacionid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ta_tipoactuacionRow( _dst, false );
			Old = new ta_tipoactuacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ta_tipoactuacion

#region ta_tipoantecedente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ta_tipoantecedenteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ta_tipoantecedenteid;	
			public String_Field ta_descripantecedente;	

			public ta_tipoantecedenteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ta_tipoantecedenteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ta_descripantecedente		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class ta_tipoantecedenteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ta_tipoantecedente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ta_tipoantecedente";
	
		
		public ta_tipoantecedenteRow Dat;
		public ta_tipoantecedenteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ta_tipoantecedente( DataTable tab ) : base() 
		{
			_dbTableName = "ta_tipoantecedente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ta_tipoantecedenteRow( _dst, false );
			Old = new ta_tipoantecedenteRow( _dst , true );
		}
		
		
		public ta_tipoantecedente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ta_tipoantecedente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ta_tipoantecedenteRow( _dst, false );
			Old = new ta_tipoantecedenteRow( _dst , true );
		}
				
		public ta_tipoantecedente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ta_tipoantecedente() : base() 
		{
			Init();
		}
		
		public ta_tipoantecedente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ta_tipoantecedente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ta_tipoantecedenteid", typeof( int ) );  
			_dt.Columns.Add( "ta_descripantecedente", typeof( String ) );  
			
			

			
			_dt.Columns["ta_tipoantecedenteid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ta_tipoantecedente",_dt.Columns["ta_tipoantecedenteid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ta_tipoantecedenteRow( _dst, false );
			Old = new ta_tipoantecedenteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ta_tipoantecedente

#region tan_tipoanotacion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tan_tipoanotacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field tan_tipoanotacionid;	
			public String_Field tan_descripcion;	

			public tan_tipoanotacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tan_tipoanotacionid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tan_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class tan_tipoanotacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tan_tipoanotacion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tan_tipoanotacion";
	
		
		public tan_tipoanotacionRow Dat;
		public tan_tipoanotacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tan_tipoanotacion( DataTable tab ) : base() 
		{
			_dbTableName = "tan_tipoanotacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tan_tipoanotacionRow( _dst, false );
			Old = new tan_tipoanotacionRow( _dst , true );
		}
		
		
		public tan_tipoanotacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tan_tipoanotacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tan_tipoanotacionRow( _dst, false );
			Old = new tan_tipoanotacionRow( _dst , true );
		}
				
		public tan_tipoanotacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tan_tipoanotacion() : base() 
		{
			Init();
		}
		
		public tan_tipoanotacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tan_tipoanotacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tan_tipoanotacionid", typeof( int ) );  
			_dt.Columns.Add( "tan_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["tan_tipoanotacionid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tan_tipoanotacion",_dt.Columns["tan_tipoanotacionid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tan_tipoanotacionRow( _dst, false );
			Old = new tan_tipoanotacionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tan_tipoanotacion

#region TarifaDoc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TarifaDocRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Binary_Field Documento;	

			public TarifaDocRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Documento		= new Binary_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class TarifaDocRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TarifaDoc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TarifaDoc";
	
		
		public TarifaDocRow Dat;
		public TarifaDocRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TarifaDoc( DataTable tab ) : base() 
		{
			_dbTableName = "TarifaDoc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifaDocRow( _dst, false );
			Old = new TarifaDocRow( _dst , true );
		}
		
		
		public TarifaDoc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TarifaDoc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifaDocRow( _dst, false );
			Old = new TarifaDocRow( _dst , true );
		}
				
		public TarifaDoc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TarifaDoc() : base() 
		{
			Init();
		}
		
		public TarifaDoc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TarifaDoc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Documento", typeof( Byte[] ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TarifaDoc",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifaDocRow( _dst, false );
			Old = new TarifaDocRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TarifaDoc

#region Tarifas
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TarifasRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descripcion;	
			public String_Field DescripcionFactura;	
			public Decimal_Field Monto;	
			public Int_Field MonedaID;	
			public Int_Field TipoTarifaID;	
			public Boolean_Field TipoUnidadDesc;	
			public Decimal_Field DescuentoMonto;	
			public Decimal_Field DescuentoPorcentaje;	
			public Boolean_Field TipoUnidadImp;	
			public Decimal_Field ImpuestoMonto;	
			public Decimal_Field ImpuestoPorcentaje;	
			public Decimal_Field PrecioVenta;	
			public Decimal_Field TarifaExternaID;	
			public Decimal_Field ProveedorID;	
			public String_Field Grupo;	
			public Int_Field TarifaGastoID;	
			public String_Field Observacion;	
			public String_Field DescripcionFacturaIngles;	

			public TarifasRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DescripcionFactura		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Monto		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
				MonedaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				TipoTarifaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				TipoUnidadDesc		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				DescuentoMonto		= new Decimal_Field(	_dst, 7, IsOldDataVersion  );	
				DescuentoPorcentaje		= new Decimal_Field(	_dst, 8, IsOldDataVersion  );	
				TipoUnidadImp		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				ImpuestoMonto		= new Decimal_Field(	_dst, 10, IsOldDataVersion  );	
				ImpuestoPorcentaje		= new Decimal_Field(	_dst, 11, IsOldDataVersion  );	
				PrecioVenta		= new Decimal_Field(	_dst, 12, IsOldDataVersion  );	
				TarifaExternaID		= new Decimal_Field(	_dst, 13, IsOldDataVersion  );	
				ProveedorID		= new Decimal_Field(	_dst, 14, IsOldDataVersion  );	
				Grupo		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				TarifaGastoID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Observacion		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				DescripcionFacturaIngles		= new String_Field(	_dst, 18, IsOldDataVersion  );	
			}
		} // end class TarifasRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Tarifas : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Tarifas";
	
		
		public TarifasRow Dat;
		public TarifasRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Tarifas( DataTable tab ) : base() 
		{
			_dbTableName = "Tarifas";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifasRow( _dst, false );
			Old = new TarifasRow( _dst , true );
		}
		
		
		public Tarifas( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Tarifas";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifasRow( _dst, false );
			Old = new TarifasRow( _dst , true );
		}
				
		public Tarifas( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Tarifas() : base() 
		{
			Init();
		}
		
		public Tarifas( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Tarifas";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "DescripcionFactura", typeof( String ) );  
			_dt.Columns.Add( "Monto", typeof( Decimal ) );  
			_dt.Columns.Add( "MonedaID", typeof( int ) );  
			_dt.Columns.Add( "TipoTarifaID", typeof( int ) );  
			_dt.Columns.Add( "TipoUnidadDesc", typeof( Boolean ) );  
			_dt.Columns.Add( "DescuentoMonto", typeof( Decimal ) );  
			_dt.Columns.Add( "DescuentoPorcentaje", typeof( Decimal ) );  
			_dt.Columns.Add( "TipoUnidadImp", typeof( Boolean ) );  
			_dt.Columns.Add( "ImpuestoMonto", typeof( Decimal ) );  
			_dt.Columns.Add( "ImpuestoPorcentaje", typeof( Decimal ) );  
			_dt.Columns.Add( "PrecioVenta", typeof( Decimal ) );  
			_dt.Columns.Add( "TarifaExternaID", typeof( Decimal ) );  
			_dt.Columns.Add( "ProveedorID", typeof( Decimal ) );  
			_dt.Columns.Add( "Grupo", typeof( String ) );  
			_dt.Columns.Add( "TarifaGastoID", typeof( int ) );  
			_dt.Columns.Add( "Observacion", typeof( String ) );  
			_dt.Columns.Add( "DescripcionFacturaIngles", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Tarifas",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifasRow( _dst, false );
			Old = new TarifasRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Tarifas

#region TarifasxCliente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TarifasxClienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public DateTime_Field Fecha;	
			public Int_Field TarifaID;	
			public Decimal_Field Monto;	
			public String_Field Observacion;	
			public Int_Field TarifaDocID;	

			public TarifasxClienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				TarifaID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Monto		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
				Observacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				TarifaDocID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class TarifasxClienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TarifasxCliente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TarifasxCliente";
	
		
		public TarifasxClienteRow Dat;
		public TarifasxClienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TarifasxCliente( DataTable tab ) : base() 
		{
			_dbTableName = "TarifasxCliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifasxClienteRow( _dst, false );
			Old = new TarifasxClienteRow( _dst , true );
		}
		
		
		public TarifasxCliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TarifasxCliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifasxClienteRow( _dst, false );
			Old = new TarifasxClienteRow( _dst , true );
		}
				
		public TarifasxCliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TarifasxCliente() : base() 
		{
			Init();
		}
		
		public TarifasxCliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TarifasxCliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "TarifaID", typeof( int ) );  
			_dt.Columns.Add( "Monto", typeof( Decimal ) );  
			_dt.Columns.Add( "Observacion", typeof( String ) );  
			_dt.Columns.Add( "TarifaDocID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TarifasxCliente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TarifasxClienteRow( _dst, false );
			Old = new TarifasxClienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TarifasxCliente

#region Tarjeta_Atencion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Tarjeta_AtencionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AtencionID;	
			public Binary_Field Imagen;	
			public String_Field Observacion;	

			public Tarjeta_AtencionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Imagen		= new Binary_Field(	_dst, 2, IsOldDataVersion  );	
				Observacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class Tarjeta_AtencionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Tarjeta_Atencion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Tarjeta_Atencion";
	
		
		public Tarjeta_AtencionRow Dat;
		public Tarjeta_AtencionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Tarjeta_Atencion( DataTable tab ) : base() 
		{
			_dbTableName = "Tarjeta_Atencion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tarjeta_AtencionRow( _dst, false );
			Old = new Tarjeta_AtencionRow( _dst , true );
		}
		
		
		public Tarjeta_Atencion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Tarjeta_Atencion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tarjeta_AtencionRow( _dst, false );
			Old = new Tarjeta_AtencionRow( _dst , true );
		}
				
		public Tarjeta_Atencion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Tarjeta_Atencion() : base() 
		{
			Init();
		}
		
		public Tarjeta_Atencion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Tarjeta_Atencion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "Imagen", typeof( Byte[] ) );  
			_dt.Columns.Add( "Observacion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Tarjeta_Atencion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tarjeta_AtencionRow( _dst, false );
			Old = new Tarjeta_AtencionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Tarjeta_Atencion

#region tc_tarifascliente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tc_tarifasclienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field tc_id;	
			public Int_Field tc_clienteid;	
			public DateTime_Field tc_fecha;	
			public Int_Field tc_tarifaid;	
			public Decimal_Field tc_monto;	
			public String_Field tc_observacion;	
			public Int_Field tc_tarifadocid;	
			public Boolean_Field tc_tipounidaddesc;	
			public Decimal_Field tc_descuentomonto;	
			public Decimal_Field tc_descuentoporcentaje;	
			public Boolean_Field tc_tipounidadimp;	
			public Decimal_Field tc_impuestomonto;	
			public Decimal_Field tc_impuestoporcentaje;	
			public Int_Field tc_expedienteid;	
			public Int_Field tc_tramiteid;	
			public Decimal_Field tc_precioventa;	
			public Decimal_Field tc_cantidad;	
			public Decimal_Field tc_total;	
			public Boolean_Field tc_especial;	
			public Int_Field tc_monedaid;	
			public Int_Field tc_cotizacioncabid;	
			public Decimal_Field tc_recargoneto;	
			public Decimal_Field tc_totalconrecargo;	

			public tc_tarifasclienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tc_id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tc_clienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				tc_fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				tc_tarifaid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				tc_monto		= new Decimal_Field(	_dst, 4, IsOldDataVersion  );	
				tc_observacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				tc_tarifadocid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				tc_tipounidaddesc		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				tc_descuentomonto		= new Decimal_Field(	_dst, 8, IsOldDataVersion  );	
				tc_descuentoporcentaje		= new Decimal_Field(	_dst, 9, IsOldDataVersion  );	
				tc_tipounidadimp		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				tc_impuestomonto		= new Decimal_Field(	_dst, 11, IsOldDataVersion  );	
				tc_impuestoporcentaje		= new Decimal_Field(	_dst, 12, IsOldDataVersion  );	
				tc_expedienteid		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				tc_tramiteid		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				tc_precioventa		= new Decimal_Field(	_dst, 15, IsOldDataVersion  );	
				tc_cantidad		= new Decimal_Field(	_dst, 16, IsOldDataVersion  );	
				tc_total		= new Decimal_Field(	_dst, 17, IsOldDataVersion  );	
				tc_especial		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				tc_monedaid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				tc_cotizacioncabid		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				tc_recargoneto		= new Decimal_Field(	_dst, 21, IsOldDataVersion  );	
				tc_totalconrecargo		= new Decimal_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class tc_tarifasclienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tc_tarifascliente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tc_tarifascliente";
	
		
		public tc_tarifasclienteRow Dat;
		public tc_tarifasclienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tc_tarifascliente( DataTable tab ) : base() 
		{
			_dbTableName = "tc_tarifascliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tc_tarifasclienteRow( _dst, false );
			Old = new tc_tarifasclienteRow( _dst , true );
		}
		
		
		public tc_tarifascliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tc_tarifascliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tc_tarifasclienteRow( _dst, false );
			Old = new tc_tarifasclienteRow( _dst , true );
		}
				
		public tc_tarifascliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tc_tarifascliente() : base() 
		{
			Init();
		}
		
		public tc_tarifascliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tc_tarifascliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tc_id", typeof( int ) );  
			_dt.Columns.Add( "tc_clienteid", typeof( int ) );  
			_dt.Columns.Add( "tc_fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "tc_tarifaid", typeof( int ) );  
			_dt.Columns.Add( "tc_monto", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_observacion", typeof( String ) );  
			_dt.Columns.Add( "tc_tarifadocid", typeof( int ) );  
			_dt.Columns.Add( "tc_tipounidaddesc", typeof( Boolean ) );  
			_dt.Columns.Add( "tc_descuentomonto", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_descuentoporcentaje", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_tipounidadimp", typeof( Boolean ) );  
			_dt.Columns.Add( "tc_impuestomonto", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_impuestoporcentaje", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_expedienteid", typeof( int ) );  
			_dt.Columns.Add( "tc_tramiteid", typeof( int ) );  
			_dt.Columns.Add( "tc_precioventa", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_cantidad", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_total", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_especial", typeof( Boolean ) );  
			_dt.Columns.Add( "tc_monedaid", typeof( int ) );  
			_dt.Columns.Add( "tc_cotizacioncabid", typeof( int ) );  
			_dt.Columns.Add( "tc_recargoneto", typeof( Decimal ) );  
			_dt.Columns.Add( "tc_totalconrecargo", typeof( Decimal ) );  
			
			
			_dt.Columns["tc_recargoneto"].ReadOnly = true;  

			
			_dt.Columns["tc_id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tc_tarifascliente",_dt.Columns["tc_id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tc_tarifasclienteRow( _dst, false );
			Old = new tc_tarifasclienteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tc_tarifascliente

#region tc_tipocambio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tc_tipocambioRow 
		{
			private  DSTab _dst;
			
			public Int_Field tc_tipocambioid;	
			public DateTime_Field tc_fecha;	
			public Decimal_Field tc_valor;	

			public tc_tipocambioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tc_tipocambioid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tc_fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				tc_valor		= new Decimal_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class tc_tipocambioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tc_tipocambio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tc_tipocambio";
	
		
		public tc_tipocambioRow Dat;
		public tc_tipocambioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tc_tipocambio( DataTable tab ) : base() 
		{
			_dbTableName = "tc_tipocambio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tc_tipocambioRow( _dst, false );
			Old = new tc_tipocambioRow( _dst , true );
		}
		
		
		public tc_tipocambio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tc_tipocambio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tc_tipocambioRow( _dst, false );
			Old = new tc_tipocambioRow( _dst , true );
		}
				
		public tc_tipocambio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tc_tipocambio() : base() 
		{
			Init();
		}
		
		public tc_tipocambio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tc_tipocambio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tc_tipocambioid", typeof( int ) );  
			_dt.Columns.Add( "tc_fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "tc_valor", typeof( Decimal ) );  
			
			

			
			_dt.Columns["tc_tipocambioid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tc_tipocambio",_dt.Columns["tc_tipocambioid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tc_tipocambioRow( _dst, false );
			Old = new tc_tipocambioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tc_tipocambio

#region td_tipodocumento
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class td_tipodocumentoRow 
		{
			private  DSTab _dst;
			
			public Int_Field td_tipodocumentoid;	
			public String_Field td_descripcion;	
			public Boolean_Field td_controlartimbrado;	
			public Boolean_Field td_mostrar;	
			public Int_Field td_sistemaid;	

			public td_tipodocumentoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				td_tipodocumentoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				td_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				td_controlartimbrado		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				td_mostrar		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				td_sistemaid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class td_tipodocumentoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class td_tipodocumento : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "td_tipodocumento";
	
		
		public td_tipodocumentoRow Dat;
		public td_tipodocumentoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public td_tipodocumento( DataTable tab ) : base() 
		{
			_dbTableName = "td_tipodocumento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new td_tipodocumentoRow( _dst, false );
			Old = new td_tipodocumentoRow( _dst , true );
		}
		
		
		public td_tipodocumento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "td_tipodocumento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new td_tipodocumentoRow( _dst, false );
			Old = new td_tipodocumentoRow( _dst , true );
		}
				
		public td_tipodocumento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public td_tipodocumento() : base() 
		{
			Init();
		}
		
		public td_tipodocumento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "td_tipodocumento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "td_tipodocumentoid", typeof( int ) );  
			_dt.Columns.Add( "td_descripcion", typeof( String ) );  
			_dt.Columns.Add( "td_controlartimbrado", typeof( Boolean ) );  
			_dt.Columns.Add( "td_mostrar", typeof( Boolean ) );  
			_dt.Columns.Add( "td_sistemaid", typeof( int ) );  
			
			

			
			_dt.Columns["td_tipodocumentoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_td_tipodocumento",_dt.Columns["td_tipodocumentoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new td_tipodocumentoRow( _dst, false );
			Old = new td_tipodocumentoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion td_tipodocumento

#region tde_tipodocescaneado
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tde_tipodocescaneadoRow 
		{
			private  DSTab _dst;
			
			public Int_Field tde_tipodocescaneadoid;	
			public String_Field tde_descripcion;	

			public tde_tipodocescaneadoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tde_tipodocescaneadoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tde_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class tde_tipodocescaneadoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tde_tipodocescaneado : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tde_tipodocescaneado";
	
		
		public tde_tipodocescaneadoRow Dat;
		public tde_tipodocescaneadoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tde_tipodocescaneado( DataTable tab ) : base() 
		{
			_dbTableName = "tde_tipodocescaneado";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tde_tipodocescaneadoRow( _dst, false );
			Old = new tde_tipodocescaneadoRow( _dst , true );
		}
		
		
		public tde_tipodocescaneado( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tde_tipodocescaneado";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tde_tipodocescaneadoRow( _dst, false );
			Old = new tde_tipodocescaneadoRow( _dst , true );
		}
				
		public tde_tipodocescaneado( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tde_tipodocescaneado() : base() 
		{
			Init();
		}
		
		public tde_tipodocescaneado( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tde_tipodocescaneado";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tde_tipodocescaneadoid", typeof( int ) );  
			_dt.Columns.Add( "tde_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["tde_tipodocescaneadoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tde_tipodocescaneado",_dt.Columns["tde_tipodocescaneadoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tde_tipodocescaneadoRow( _dst, false );
			Old = new tde_tipodocescaneadoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tde_tipodocescaneado

#region tf_tipofactura
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tf_tipofacturaRow 
		{
			private  DSTab _dst;
			
			public Int_Field tf_tipofacturaid;	
			public String_Field tf_descripcion;	

			public tf_tipofacturaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tf_tipofacturaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tf_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class tf_tipofacturaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tf_tipofactura : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tf_tipofactura";
	
		
		public tf_tipofacturaRow Dat;
		public tf_tipofacturaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tf_tipofactura( DataTable tab ) : base() 
		{
			_dbTableName = "tf_tipofactura";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tf_tipofacturaRow( _dst, false );
			Old = new tf_tipofacturaRow( _dst , true );
		}
		
		
		public tf_tipofactura( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tf_tipofactura";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tf_tipofacturaRow( _dst, false );
			Old = new tf_tipofacturaRow( _dst , true );
		}
				
		public tf_tipofactura( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tf_tipofactura() : base() 
		{
			Init();
		}
		
		public tf_tipofactura( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tf_tipofactura";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tf_tipofacturaid", typeof( int ) );  
			_dt.Columns.Add( "tf_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["tf_tipofacturaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tf_tipofactura",_dt.Columns["tf_tipofacturaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tf_tipofacturaRow( _dst, false );
			Old = new tf_tipofacturaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tf_tipofactura

#region ti_timbrado
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class ti_timbradoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ti_timbradoid;	
			public DateTime_Field ti_vigenciadesde;	
			public DateTime_Field ti_vigenciahasta;	
			public Long_Field ti_numerodesde;	
			public Long_Field ti_numerohasta;	
			public Boolean_Field ti_vigente;	
			public String_Field ti_serie;	
			public String_Field ti_sucursal;	
			public String_Field ti_descripcion;	
			public Long_Field ti_nrotimbrado;	
			public Boolean_Field ti_facthojasuelta;	

			public ti_timbradoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ti_timbradoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ti_vigenciadesde		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				ti_vigenciahasta		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				ti_numerodesde		= new Long_Field(	_dst, 3, IsOldDataVersion  );	
				ti_numerohasta		= new Long_Field(	_dst, 4, IsOldDataVersion  );	
				ti_vigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				ti_serie		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ti_sucursal		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ti_descripcion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ti_nrotimbrado		= new Long_Field(	_dst, 9, IsOldDataVersion  );	
				ti_facthojasuelta		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class ti_timbradoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ti_timbrado : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ti_timbrado";
	
		
		public ti_timbradoRow Dat;
		public ti_timbradoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ti_timbrado( DataTable tab ) : base() 
		{
			_dbTableName = "ti_timbrado";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ti_timbradoRow( _dst, false );
			Old = new ti_timbradoRow( _dst , true );
		}
		
		
		public ti_timbrado( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ti_timbrado";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ti_timbradoRow( _dst, false );
			Old = new ti_timbradoRow( _dst , true );
		}
				
		public ti_timbrado( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ti_timbrado() : base() 
		{
			Init();
		}
		
		public ti_timbrado( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ti_timbrado";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ti_timbradoid", typeof( int ) );  
			_dt.Columns.Add( "ti_vigenciadesde", typeof( DateTime ) );  
			_dt.Columns.Add( "ti_vigenciahasta", typeof( DateTime ) );  
			_dt.Columns.Add( "ti_numerodesde", typeof( long ) );  
			_dt.Columns.Add( "ti_numerohasta", typeof( long ) );  
			_dt.Columns.Add( "ti_vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ti_serie", typeof( String ) );  
			_dt.Columns.Add( "ti_sucursal", typeof( String ) );  
			_dt.Columns.Add( "ti_descripcion", typeof( String ) );  
			_dt.Columns.Add( "ti_nrotimbrado", typeof( long ) );  
			_dt.Columns.Add( "ti_facthojasuelta", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ti_timbradoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_ti_timbrado",_dt.Columns["ti_timbradoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ti_timbradoRow( _dst, false );
			Old = new ti_timbradoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion ti_timbrado

#region TipoAntecedente
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TipoAntecedenteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	

			public TipoAntecedenteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class TipoAntecedenteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TipoAntecedente : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TipoAntecedente";
	
		
		public TipoAntecedenteRow Dat;
		public TipoAntecedenteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TipoAntecedente( DataTable tab ) : base() 
		{
			_dbTableName = "TipoAntecedente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAntecedenteRow( _dst, false );
			Old = new TipoAntecedenteRow( _dst , true );
		}
		
		
		public TipoAntecedente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TipoAntecedente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAntecedenteRow( _dst, false );
			Old = new TipoAntecedenteRow( _dst , true );
		}
				
		public TipoAntecedente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TipoAntecedente() : base() 
		{
			Init();
		}
		
		public TipoAntecedente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TipoAntecedente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TipoAntecedente",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAntecedenteRow( _dst, false );
			Old = new TipoAntecedenteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TipoAntecedente

#region TipoAviso
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TipoAvisoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	
			public Int_Field NroAviso;	
			public Int_Field PlantillaID;	
			public String_Field Tipo;	
			public String_Field MailOrigen;	
			public Int_Field TipoAvisoID;	

			public TipoAvisoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				NroAviso		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class TipoAvisoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TipoAviso : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TipoAviso";
	
		
		public TipoAvisoRow Dat;
		public TipoAvisoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TipoAviso( DataTable tab ) : base() 
		{
			_dbTableName = "TipoAviso";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoRow( _dst, false );
			Old = new TipoAvisoRow( _dst , true );
		}
		
		
		public TipoAviso( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TipoAviso";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoRow( _dst, false );
			Old = new TipoAvisoRow( _dst , true );
		}
				
		public TipoAviso( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TipoAviso() : base() 
		{
			Init();
		}
		
		public TipoAviso( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TipoAviso";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "NroAviso", typeof( int ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TipoAviso",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoRow( _dst, false );
			Old = new TipoAvisoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TipoAviso

#region TipoAvisoInstruccionTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TipoAvisoInstruccionTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TipoAvisoID;	
			public Int_Field InstruccionTipoID;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public Boolean_Field Excluir;	

			public TipoAvisoInstruccionTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Excluir		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class TipoAvisoInstruccionTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TipoAvisoInstruccionTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TipoAvisoInstruccionTipo";
	
		
		public TipoAvisoInstruccionTipoRow Dat;
		public TipoAvisoInstruccionTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TipoAvisoInstruccionTipo( DataTable tab ) : base() 
		{
			_dbTableName = "TipoAvisoInstruccionTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoInstruccionTipoRow( _dst, false );
			Old = new TipoAvisoInstruccionTipoRow( _dst , true );
		}
		
		
		public TipoAvisoInstruccionTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TipoAvisoInstruccionTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoInstruccionTipoRow( _dst, false );
			Old = new TipoAvisoInstruccionTipoRow( _dst , true );
		}
				
		public TipoAvisoInstruccionTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TipoAvisoInstruccionTipo() : base() 
		{
			Init();
		}
		
		public TipoAvisoInstruccionTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TipoAvisoInstruccionTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "Excluir", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TipoAvisoInstruccionTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoInstruccionTipoRow( _dst, false );
			Old = new TipoAvisoInstruccionTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TipoAvisoInstruccionTipo

#region TipoAvisoPl
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TipoAvisoPlRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TipoAvisoID;	
			public Int_Field PlantillaID;	
			public Boolean_Field Activo;	

			public TipoAvisoPlRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class TipoAvisoPlRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TipoAvisoPl : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TipoAvisoPl";
	
		
		public TipoAvisoPlRow Dat;
		public TipoAvisoPlRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TipoAvisoPl( DataTable tab ) : base() 
		{
			_dbTableName = "TipoAvisoPl";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoPlRow( _dst, false );
			Old = new TipoAvisoPlRow( _dst , true );
		}
		
		
		public TipoAvisoPl( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TipoAvisoPl";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoPlRow( _dst, false );
			Old = new TipoAvisoPlRow( _dst , true );
		}
				
		public TipoAvisoPl( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TipoAvisoPl() : base() 
		{
			Init();
		}
		
		public TipoAvisoPl( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TipoAvisoPl";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TipoAvisoPl",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoAvisoPlRow( _dst, false );
			Old = new TipoAvisoPlRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TipoAvisoPl

#region TipoRecordatorio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TipoRecordatorioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	

			public TipoRecordatorioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class TipoRecordatorioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TipoRecordatorio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TipoRecordatorio";
	
		
		public TipoRecordatorioRow Dat;
		public TipoRecordatorioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TipoRecordatorio( DataTable tab ) : base() 
		{
			_dbTableName = "TipoRecordatorio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoRecordatorioRow( _dst, false );
			Old = new TipoRecordatorioRow( _dst , true );
		}
		
		
		public TipoRecordatorio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TipoRecordatorio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoRecordatorioRow( _dst, false );
			Old = new TipoRecordatorioRow( _dst , true );
		}
				
		public TipoRecordatorio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TipoRecordatorio() : base() 
		{
			Init();
		}
		
		public TipoRecordatorio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TipoRecordatorio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TipoRecordatorio",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TipoRecordatorioRow( _dst, false );
			Old = new TipoRecordatorioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TipoRecordatorio

#region tm_tipomovimientocuenta
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tm_tipomovimientocuentaRow 
		{
			private  DSTab _dst;
			
			public Int_Field tm_tipomovimientoid;	
			public String_Field tm_tipomovimientodescrip;	
			public String_Field tm_tipo;	

			public tm_tipomovimientocuentaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tm_tipomovimientoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tm_tipomovimientodescrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				tm_tipo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class tm_tipomovimientocuentaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tm_tipomovimientocuenta : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tm_tipomovimientocuenta";
	
		
		public tm_tipomovimientocuentaRow Dat;
		public tm_tipomovimientocuentaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tm_tipomovimientocuenta( DataTable tab ) : base() 
		{
			_dbTableName = "tm_tipomovimientocuenta";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tm_tipomovimientocuentaRow( _dst, false );
			Old = new tm_tipomovimientocuentaRow( _dst , true );
		}
		
		
		public tm_tipomovimientocuenta( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tm_tipomovimientocuenta";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tm_tipomovimientocuentaRow( _dst, false );
			Old = new tm_tipomovimientocuentaRow( _dst , true );
		}
				
		public tm_tipomovimientocuenta( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tm_tipomovimientocuenta() : base() 
		{
			Init();
		}
		
		public tm_tipomovimientocuenta( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tm_tipomovimientocuenta";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tm_tipomovimientoid", typeof( int ) );  
			_dt.Columns.Add( "tm_tipomovimientodescrip", typeof( String ) );  
			_dt.Columns.Add( "tm_tipo", typeof( String ) );  
			
			

			
			_dt.Columns["tm_tipomovimientoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tm_tipomovimientocuenta",_dt.Columns["tm_tipomovimientoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tm_tipomovimientocuentaRow( _dst, false );
			Old = new tm_tipomovimientocuentaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tm_tipomovimientocuenta

#region tmpRosa
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tmpRosaRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field nombre;	
			public Boolean_Field multiple;	
			public String_Field correo;	
			public Int_Field idiomaid;	
			public String_Field descrip;	

			public tmpRosaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class tmpRosaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tmpRosa : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tmpRosa";
	
		
		public tmpRosaRow Dat;
		public tmpRosaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tmpRosa( DataTable tab ) : base() 
		{
			_dbTableName = "tmpRosa";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tmpRosaRow( _dst, false );
			Old = new tmpRosaRow( _dst , true );
		}
		
		
		public tmpRosa( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tmpRosa";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tmpRosaRow( _dst, false );
			Old = new tmpRosaRow( _dst , true );
		}
				
		public tmpRosa( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tmpRosa() : base() 
		{
			Init();
		}
		
		public tmpRosa( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tmpRosa";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "correo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			
			

			
			_dt.Columns["id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tmpRosa",_dt.Columns["id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tmpRosaRow( _dst, false );
			Old = new tmpRosaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tmpRosa

#region tp_tramitepatricia
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tp_tramitepatriciaRow 
		{
			private  DSTab _dst;
			
			public String_Field tp_tramitepatriciaid;	
			public String_Field tp_descripcion;	
			public Int_Field tp_tramiteid;	

			public tp_tramitepatriciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tp_tramitepatriciaid		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				tp_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				tp_tramiteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class tp_tramitepatriciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tp_tramitepatricia : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tp_tramitepatricia";
	
		
		public tp_tramitepatriciaRow Dat;
		public tp_tramitepatriciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tp_tramitepatricia( DataTable tab ) : base() 
		{
			_dbTableName = "tp_tramitepatricia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tp_tramitepatriciaRow( _dst, false );
			Old = new tp_tramitepatriciaRow( _dst , true );
		}
		
		
		public tp_tramitepatricia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tp_tramitepatricia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tp_tramitepatriciaRow( _dst, false );
			Old = new tp_tramitepatriciaRow( _dst , true );
		}
				
		public tp_tramitepatricia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tp_tramitepatricia() : base() 
		{
			Init();
		}
		
		public tp_tramitepatricia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tp_tramitepatricia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tp_tramitepatriciaid", typeof( String ) );  
			_dt.Columns.Add( "tp_descripcion", typeof( String ) );  
			_dt.Columns.Add( "tp_tramiteid", typeof( int ) );  
			
			

			
			_dt.Columns["tp_tramitepatriciaid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tp_tramitepatricia",_dt.Columns["tp_tramitepatriciaid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tp_tramitepatriciaRow( _dst, false );
			Old = new tp_tramitepatriciaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tp_tramitepatricia

#region TrabajoTipo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TrabajoTipoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public TrabajoTipoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class TrabajoTipoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TrabajoTipo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TrabajoTipo";
	
		
		public TrabajoTipoRow Dat;
		public TrabajoTipoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TrabajoTipo( DataTable tab ) : base() 
		{
			_dbTableName = "TrabajoTipo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TrabajoTipoRow( _dst, false );
			Old = new TrabajoTipoRow( _dst , true );
		}
		
		
		public TrabajoTipo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TrabajoTipo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TrabajoTipoRow( _dst, false );
			Old = new TrabajoTipoRow( _dst , true );
		}
				
		public TrabajoTipo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TrabajoTipo() : base() 
		{
			Init();
		}
		
		public TrabajoTipo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TrabajoTipo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TrabajoTipo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TrabajoTipoRow( _dst, false );
			Old = new TrabajoTipoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TrabajoTipo

#region Traduccion
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TraduccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Texto;	
			public Int_Field IdiomaID;	
			public String_Field Traducido;	

			public TraduccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Texto		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Traducido		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class TraduccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Traduccion : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Traduccion";
	
		
		public TraduccionRow Dat;
		public TraduccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Traduccion( DataTable tab ) : base() 
		{
			_dbTableName = "Traduccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TraduccionRow( _dst, false );
			Old = new TraduccionRow( _dst , true );
		}
		
		
		public Traduccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Traduccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TraduccionRow( _dst, false );
			Old = new TraduccionRow( _dst , true );
		}
				
		public Traduccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Traduccion() : base() 
		{
			Init();
		}
		
		public Traduccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Traduccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Texto", typeof( String ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "Traducido", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Traduccion",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TraduccionRow( _dst, false );
			Old = new TraduccionRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Traduccion

#region Tramite
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TramiteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ProcesoID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Int_Field TrabajoTipoID;	
			public String_Field BolAbrev;	
			public Int_Field AreaContabID;	
			public String_Field AbrevParaContabilidad;	
			public String_Field EtiquetaEsp;	
			public String_Field EtiquetaIng;	
			public DateTime_Field lastUpdated;	

			public TramiteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ProcesoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				TrabajoTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				BolAbrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				AreaContabID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AbrevParaContabilidad		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				EtiquetaEsp		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				EtiquetaIng		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class TramiteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Tramite : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Tramite";
	
		
		public TramiteRow Dat;
		public TramiteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Tramite( DataTable tab ) : base() 
		{
			_dbTableName = "Tramite";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TramiteRow( _dst, false );
			Old = new TramiteRow( _dst , true );
		}
		
		
		public Tramite( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Tramite";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TramiteRow( _dst, false );
			Old = new TramiteRow( _dst , true );
		}
				
		public Tramite( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Tramite() : base() 
		{
			Init();
		}
		
		public Tramite( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Tramite";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ProcesoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "TrabajoTipoID", typeof( int ) );  
			_dt.Columns.Add( "BolAbrev", typeof( String ) );  
			_dt.Columns.Add( "AreaContabID", typeof( int ) );  
			_dt.Columns.Add( "AbrevParaContabilidad", typeof( String ) );  
			_dt.Columns.Add( "EtiquetaEsp", typeof( String ) );  
			_dt.Columns.Add( "EtiquetaIng", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Tramite",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TramiteRow( _dst, false );
			Old = new TramiteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Tramite

#region Tramite_Sit
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Tramite_SitRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public Int_Field Plazo;	
			public Int_Field UnidadID;	
			public Boolean_Field Vigente;	
			public Boolean_Field Automatico;	
			public Int_Field Orden;	
			public DateTime_Field lastUpdated;	

			public Tramite_SitRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Plazo		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				UnidadID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Automatico		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Orden		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class Tramite_SitRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Tramite_Sit : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Tramite_Sit";
	
		
		public Tramite_SitRow Dat;
		public Tramite_SitRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Tramite_Sit( DataTable tab ) : base() 
		{
			_dbTableName = "Tramite_Sit";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tramite_SitRow( _dst, false );
			Old = new Tramite_SitRow( _dst , true );
		}
		
		
		public Tramite_Sit( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Tramite_Sit";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tramite_SitRow( _dst, false );
			Old = new Tramite_SitRow( _dst , true );
		}
				
		public Tramite_Sit( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Tramite_Sit() : base() 
		{
			Init();
		}
		
		public Tramite_Sit( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Tramite_Sit";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Plazo", typeof( int ) );  
			_dt.Columns.Add( "UnidadID", typeof( int ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "Automatico", typeof( Boolean ) );  
			_dt.Columns.Add( "Orden", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Tramite_Sit",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tramite_SitRow( _dst, false );
			Old = new Tramite_SitRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Tramite_Sit

#region Tramite_SitSgte
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class Tramite_SitSgteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteSitID;	
			public Int_Field TramiteSitSgteID;	

			public Tramite_SitSgteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitSgteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class Tramite_SitSgteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Tramite_SitSgte : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Tramite_SitSgte";
	
		
		public Tramite_SitSgteRow Dat;
		public Tramite_SitSgteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Tramite_SitSgte( DataTable tab ) : base() 
		{
			_dbTableName = "Tramite_SitSgte";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tramite_SitSgteRow( _dst, false );
			Old = new Tramite_SitSgteRow( _dst , true );
		}
		
		
		public Tramite_SitSgte( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Tramite_SitSgte";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tramite_SitSgteRow( _dst, false );
			Old = new Tramite_SitSgteRow( _dst , true );
		}
				
		public Tramite_SitSgte( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Tramite_SitSgte() : base() 
		{
			Init();
		}
		
		public Tramite_SitSgte( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Tramite_SitSgte";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitSgteID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Tramite_SitSgte",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new Tramite_SitSgteRow( _dst, false );
			Old = new Tramite_SitSgteRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Tramite_SitSgte

#region TramiteBoletin
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class TramiteBoletinRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Abrev;	
			public String_Field Descripcion;	
			public String_Field TramiteID;	

			public TramiteBoletinRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				TramiteID		= new String_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class TramiteBoletinRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class TramiteBoletin : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "TramiteBoletin";
	
		
		public TramiteBoletinRow Dat;
		public TramiteBoletinRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public TramiteBoletin( DataTable tab ) : base() 
		{
			_dbTableName = "TramiteBoletin";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TramiteBoletinRow( _dst, false );
			Old = new TramiteBoletinRow( _dst , true );
		}
		
		
		public TramiteBoletin( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "TramiteBoletin";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TramiteBoletinRow( _dst, false );
			Old = new TramiteBoletinRow( _dst , true );
		}
				
		public TramiteBoletin( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public TramiteBoletin() : base() 
		{
			Init();
		}
		
		public TramiteBoletin( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "TramiteBoletin";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_TramiteBoletin",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new TramiteBoletinRow( _dst, false );
			Old = new TramiteBoletinRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion TramiteBoletin

#region trr_tramitetarifa
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class trr_tramitetarifaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ttr_id;	
			public Int_Field ttr_tramiteid;	
			public Int_Field ttr_tarifaid;	

			public trr_tramitetarifaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ttr_id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ttr_tramiteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ttr_tarifaid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class trr_tramitetarifaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class trr_tramitetarifa : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "trr_tramitetarifa";
	
		
		public trr_tramitetarifaRow Dat;
		public trr_tramitetarifaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public trr_tramitetarifa( DataTable tab ) : base() 
		{
			_dbTableName = "trr_tramitetarifa";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new trr_tramitetarifaRow( _dst, false );
			Old = new trr_tramitetarifaRow( _dst , true );
		}
		
		
		public trr_tramitetarifa( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "trr_tramitetarifa";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new trr_tramitetarifaRow( _dst, false );
			Old = new trr_tramitetarifaRow( _dst , true );
		}
				
		public trr_tramitetarifa( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public trr_tramitetarifa() : base() 
		{
			Init();
		}
		
		public trr_tramitetarifa( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "trr_tramitetarifa";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ttr_id", typeof( int ) );  
			_dt.Columns.Add( "ttr_tramiteid", typeof( int ) );  
			_dt.Columns.Add( "ttr_tarifaid", typeof( int ) );  
			
			

			
			_dt.Columns["ttr_id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_trr_tramitetarifa",_dt.Columns["ttr_id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new trr_tramitetarifaRow( _dst, false );
			Old = new trr_tramitetarifaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion trr_tramitetarifa

#region tse_tiposistelectronico
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tse_tiposistelectronicoRow 
		{
			private  DSTab _dst;
			
			public Int_Field tse_tiposistelectronicoid;	
			public String_Field tse_descripcion;	

			public tse_tiposistelectronicoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tse_tiposistelectronicoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tse_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class tse_tiposistelectronicoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tse_tiposistelectronico : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tse_tiposistelectronico";
	
		
		public tse_tiposistelectronicoRow Dat;
		public tse_tiposistelectronicoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tse_tiposistelectronico( DataTable tab ) : base() 
		{
			_dbTableName = "tse_tiposistelectronico";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tse_tiposistelectronicoRow( _dst, false );
			Old = new tse_tiposistelectronicoRow( _dst , true );
		}
		
		
		public tse_tiposistelectronico( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tse_tiposistelectronico";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tse_tiposistelectronicoRow( _dst, false );
			Old = new tse_tiposistelectronicoRow( _dst , true );
		}
				
		public tse_tiposistelectronico( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tse_tiposistelectronico() : base() 
		{
			Init();
		}
		
		public tse_tiposistelectronico( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tse_tiposistelectronico";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tse_tiposistelectronicoid", typeof( int ) );  
			_dt.Columns.Add( "tse_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["tse_tiposistelectronicoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tse_tiposistelectronico",_dt.Columns["tse_tiposistelectronicoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tse_tiposistelectronicoRow( _dst, false );
			Old = new tse_tiposistelectronicoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tse_tiposistelectronico

#region tsp_tiposolicitudpago
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tsp_tiposolicitudpagoRow 
		{
			private  DSTab _dst;
			
			public Int_Field tsp_tiposolicitudpagoid;	
			public String_Field tsp_descripcion;	

			public tsp_tiposolicitudpagoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tsp_tiposolicitudpagoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tsp_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class tsp_tiposolicitudpagoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tsp_tiposolicitudpago : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tsp_tiposolicitudpago";
	
		
		public tsp_tiposolicitudpagoRow Dat;
		public tsp_tiposolicitudpagoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tsp_tiposolicitudpago( DataTable tab ) : base() 
		{
			_dbTableName = "tsp_tiposolicitudpago";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tsp_tiposolicitudpagoRow( _dst, false );
			Old = new tsp_tiposolicitudpagoRow( _dst , true );
		}
		
		
		public tsp_tiposolicitudpago( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tsp_tiposolicitudpago";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tsp_tiposolicitudpagoRow( _dst, false );
			Old = new tsp_tiposolicitudpagoRow( _dst , true );
		}
				
		public tsp_tiposolicitudpago( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tsp_tiposolicitudpago() : base() 
		{
			Init();
		}
		
		public tsp_tiposolicitudpago( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tsp_tiposolicitudpago";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tsp_tiposolicitudpagoid", typeof( int ) );  
			_dt.Columns.Add( "tsp_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["tsp_tiposolicitudpagoid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tsp_tiposolicitudpago",_dt.Columns["tsp_tiposolicitudpagoid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tsp_tiposolicitudpagoRow( _dst, false );
			Old = new tsp_tiposolicitudpagoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tsp_tiposolicitudpago

#region tt_tipotarifa
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class tt_tipotarifaRow 
		{
			private  DSTab _dst;
			
			public Int_Field tt_id;	
			public String_Field tt_descrip;	

			public tt_tipotarifaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tt_id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tt_descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class tt_tipotarifaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class tt_tipotarifa : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "tt_tipotarifa";
	
		
		public tt_tipotarifaRow Dat;
		public tt_tipotarifaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public tt_tipotarifa( DataTable tab ) : base() 
		{
			_dbTableName = "tt_tipotarifa";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tt_tipotarifaRow( _dst, false );
			Old = new tt_tipotarifaRow( _dst , true );
		}
		
		
		public tt_tipotarifa( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "tt_tipotarifa";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tt_tipotarifaRow( _dst, false );
			Old = new tt_tipotarifaRow( _dst , true );
		}
				
		public tt_tipotarifa( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public tt_tipotarifa() : base() 
		{
			Init();
		}
		
		public tt_tipotarifa( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "tt_tipotarifa";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tt_id", typeof( int ) );  
			_dt.Columns.Add( "tt_descrip", typeof( String ) );  
			
			

			
			_dt.Columns["tt_id"].AutoIncrement = true;
			_dt.Constraints.Add("pk_tt_tipotarifa",_dt.Columns["tt_id"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new tt_tipotarifaRow( _dst, false );
			Old = new tt_tipotarifaRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion tt_tipotarifa

#region un_unidadnegocio
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class un_unidadnegocioRow 
		{
			private  DSTab _dst;
			
			public Int_Field un_unidadnegocioid;	
			public String_Field un_descripcion;	

			public un_unidadnegocioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				un_unidadnegocioid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				un_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class un_unidadnegocioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class un_unidadnegocio : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "un_unidadnegocio";
	
		
		public un_unidadnegocioRow Dat;
		public un_unidadnegocioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public un_unidadnegocio( DataTable tab ) : base() 
		{
			_dbTableName = "un_unidadnegocio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new un_unidadnegocioRow( _dst, false );
			Old = new un_unidadnegocioRow( _dst , true );
		}
		
		
		public un_unidadnegocio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "un_unidadnegocio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new un_unidadnegocioRow( _dst, false );
			Old = new un_unidadnegocioRow( _dst , true );
		}
				
		public un_unidadnegocio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public un_unidadnegocio() : base() 
		{
			Init();
		}
		
		public un_unidadnegocio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "un_unidadnegocio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "un_unidadnegocioid", typeof( int ) );  
			_dt.Columns.Add( "un_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["un_unidadnegocioid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_un_unidadnegocio",_dt.Columns["un_unidadnegocioid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new un_unidadnegocioRow( _dst, false );
			Old = new un_unidadnegocioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion un_unidadnegocio

#region Unidad
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class UnidadRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	

			public UnidadRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class UnidadRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Unidad : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Unidad";
	
		
		public UnidadRow Dat;
		public UnidadRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Unidad( DataTable tab ) : base() 
		{
			_dbTableName = "Unidad";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UnidadRow( _dst, false );
			Old = new UnidadRow( _dst , true );
		}
		
		
		public Unidad( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Unidad";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UnidadRow( _dst, false );
			Old = new UnidadRow( _dst , true );
		}
				
		public Unidad( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Unidad() : base() 
		{
			Init();
		}
		
		public Unidad( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Unidad";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Unidad",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UnidadRow( _dst, false );
			Old = new UnidadRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Unidad

#region Usuario
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class UsuarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Usuario;	
			public String_Field Nick;	
			public String_Field Email;	
			public Int_Field AreaID;	
			public String_Field NombrePila;	
			public Boolean_Field Activo;	
			public Boolean_Field Congreso;	
			public String_Field Iniciales;	
			public String_Field PasswordEmail;	
			public String_Field UsuarioDominio2;	

			public UsuarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Usuario		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Nick		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Email		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				NombrePila		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				Congreso		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				Iniciales		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				PasswordEmail		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				UsuarioDominio2		= new String_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class UsuarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class Usuario : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "Usuario";
	
		
		public UsuarioRow Dat;
		public UsuarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public Usuario( DataTable tab ) : base() 
		{
			_dbTableName = "Usuario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioRow( _dst, false );
			Old = new UsuarioRow( _dst , true );
		}
		
		
		public Usuario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "Usuario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioRow( _dst, false );
			Old = new UsuarioRow( _dst , true );
		}
				
		public Usuario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public Usuario() : base() 
		{
			Init();
		}
		
		public Usuario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "Usuario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Usuario", typeof( String ) );  
			_dt.Columns.Add( "Nick", typeof( String ) );  
			_dt.Columns.Add( "Email", typeof( String ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "NombrePila", typeof( String ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "Congreso", typeof( Boolean ) );  
			_dt.Columns.Add( "Iniciales", typeof( String ) );  
			_dt.Columns.Add( "PasswordEmail", typeof( String ) );  
			_dt.Columns.Add( "UsuarioDominio2", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_Usuario",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioRow( _dst, false );
			Old = new UsuarioRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion Usuario

#region UsuarioXCongreso
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class UsuarioXCongresoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field CongresoID;	
			public Int_Field UsuarioID;	
			public Int_Field AtencionID;	

			public UsuarioXCongresoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				CongresoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				UsuarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class UsuarioXCongresoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class UsuarioXCongreso : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "UsuarioXCongreso";
	
		
		public UsuarioXCongresoRow Dat;
		public UsuarioXCongresoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public UsuarioXCongreso( DataTable tab ) : base() 
		{
			_dbTableName = "UsuarioXCongreso";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioXCongresoRow( _dst, false );
			Old = new UsuarioXCongresoRow( _dst , true );
		}
		
		
		public UsuarioXCongreso( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "UsuarioXCongreso";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioXCongresoRow( _dst, false );
			Old = new UsuarioXCongresoRow( _dst , true );
		}
				
		public UsuarioXCongreso( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public UsuarioXCongreso() : base() 
		{
			Init();
		}
		
		public UsuarioXCongreso( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "UsuarioXCongreso";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "CongresoID", typeof( int ) );  
			_dt.Columns.Add( "UsuarioID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_UsuarioXCongreso",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioXCongresoRow( _dst, false );
			Old = new UsuarioXCongresoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion UsuarioXCongreso

#region UsuarioXGrupo
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class UsuarioXGrupoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field GrupoID;	
			public Int_Field UsuarioID;	

			public UsuarioXGrupoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				GrupoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				UsuarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class UsuarioXGrupoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class UsuarioXGrupo : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "UsuarioXGrupo";
	
		
		public UsuarioXGrupoRow Dat;
		public UsuarioXGrupoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public UsuarioXGrupo( DataTable tab ) : base() 
		{
			_dbTableName = "UsuarioXGrupo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioXGrupoRow( _dst, false );
			Old = new UsuarioXGrupoRow( _dst , true );
		}
		
		
		public UsuarioXGrupo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "UsuarioXGrupo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioXGrupoRow( _dst, false );
			Old = new UsuarioXGrupoRow( _dst , true );
		}
				
		public UsuarioXGrupo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public UsuarioXGrupo() : base() 
		{
			Init();
		}
		
		public UsuarioXGrupo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "UsuarioXGrupo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "GrupoID", typeof( int ) );  
			_dt.Columns.Add( "UsuarioID", typeof( int ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_UsuarioXGrupo",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new UsuarioXGrupoRow( _dst, false );
			Old = new UsuarioXGrupoRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion UsuarioXGrupo

#region VigilanciaDoc
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class VigilanciaDocRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Obs;	
			public String_Field Estado;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public Binary_Field Doc;	
			public String_Field PathDoc;	

			public VigilanciaDocRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Doc		= new Binary_Field(	_dst, 5, IsOldDataVersion  );	
				PathDoc		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class VigilanciaDocRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class VigilanciaDoc : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "VigilanciaDoc";
	
		
		public VigilanciaDocRow Dat;
		public VigilanciaDocRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public VigilanciaDoc( DataTable tab ) : base() 
		{
			_dbTableName = "VigilanciaDoc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VigilanciaDocRow( _dst, false );
			Old = new VigilanciaDocRow( _dst , true );
		}
		
		
		public VigilanciaDoc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "VigilanciaDoc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VigilanciaDocRow( _dst, false );
			Old = new VigilanciaDocRow( _dst , true );
		}
				
		public VigilanciaDoc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public VigilanciaDoc() : base() 
		{
			Init();
		}
		
		public VigilanciaDoc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "VigilanciaDoc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "Doc", typeof( Byte[] ) );  
			_dt.Columns.Add( "PathDoc", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_VigilanciaDoc",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VigilanciaDocRow( _dst, false );
			Old = new VigilanciaDocRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion VigilanciaDoc

#region VigParamConfig
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class VigParamConfigRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field VigBuzon;	
			public String_Field VigUsuario;	
			public String_Field VigPasswd;	
			public String_Field VigSubject;	
			public String_Field FaxBuzon;	
			public Int_Field DiasParaPubFict;	
			public String_Field PublicacionesPath;	
			public Boolean_Field Activo;	
			public String_Field VigCC;	
			public String_Field VigBCC;	

			public VigParamConfigRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				VigBuzon		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				VigUsuario		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				VigPasswd		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				VigSubject		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				FaxBuzon		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				DiasParaPubFict		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				PublicacionesPath		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				VigCC		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				VigBCC		= new String_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class VigParamConfigRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class VigParamConfig : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "VigParamConfig";
	
		
		public VigParamConfigRow Dat;
		public VigParamConfigRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public VigParamConfig( DataTable tab ) : base() 
		{
			_dbTableName = "VigParamConfig";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VigParamConfigRow( _dst, false );
			Old = new VigParamConfigRow( _dst , true );
		}
		
		
		public VigParamConfig( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "VigParamConfig";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VigParamConfigRow( _dst, false );
			Old = new VigParamConfigRow( _dst , true );
		}
				
		public VigParamConfig( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public VigParamConfig() : base() 
		{
			Init();
		}
		
		public VigParamConfig( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "VigParamConfig";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "VigBuzon", typeof( String ) );  
			_dt.Columns.Add( "VigUsuario", typeof( String ) );  
			_dt.Columns.Add( "VigPasswd", typeof( String ) );  
			_dt.Columns.Add( "VigSubject", typeof( String ) );  
			_dt.Columns.Add( "FaxBuzon", typeof( String ) );  
			_dt.Columns.Add( "DiasParaPubFict", typeof( int ) );  
			_dt.Columns.Add( "PublicacionesPath", typeof( String ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "VigCC", typeof( String ) );  
			_dt.Columns.Add( "VigBCC", typeof( String ) );  
			
			

			
			_dt.Columns["ID"].AutoIncrement = true;
			_dt.Constraints.Add("pk_VigParamConfig",_dt.Columns["ID"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VigParamConfigRow( _dst, false );
			Old = new VigParamConfigRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion VigParamConfig

#region wc_workflowcab
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class wc_workflowcabRow 
		{
			private  DSTab _dst;
			
			public Int_Field wc_workflowcabid;	
			public String_Field wc_nombre;	
			public String_Field wc_descripcion;	

			public wc_workflowcabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				wc_workflowcabid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				wc_nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				wc_descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class wc_workflowcabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class wc_workflowcab : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "wc_workflowcab";
	
		
		public wc_workflowcabRow Dat;
		public wc_workflowcabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public wc_workflowcab( DataTable tab ) : base() 
		{
			_dbTableName = "wc_workflowcab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wc_workflowcabRow( _dst, false );
			Old = new wc_workflowcabRow( _dst , true );
		}
		
		
		public wc_workflowcab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "wc_workflowcab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wc_workflowcabRow( _dst, false );
			Old = new wc_workflowcabRow( _dst , true );
		}
				
		public wc_workflowcab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public wc_workflowcab() : base() 
		{
			Init();
		}
		
		public wc_workflowcab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "wc_workflowcab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "wc_workflowcabid", typeof( int ) );  
			_dt.Columns.Add( "wc_nombre", typeof( String ) );  
			_dt.Columns.Add( "wc_descripcion", typeof( String ) );  
			
			

			
			_dt.Columns["wc_workflowcabid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_wc_workflowcab",_dt.Columns["wc_workflowcabid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wc_workflowcabRow( _dst, false );
			Old = new wc_workflowcabRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion wc_workflowcab

#region wct_workflowcontrol
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class wct_workflowcontrolRow 
		{
			private  DSTab _dst;
			
			public Int_Field wct_workflowcontrolid;	
			public String_Field wct_descripcion;	
			public Int_Field wct_workflowcabid;	

			public wct_workflowcontrolRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				wct_workflowcontrolid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				wct_descripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				wct_workflowcabid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class wct_workflowcontrolRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class wct_workflowcontrol : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "wct_workflowcontrol";
	
		
		public wct_workflowcontrolRow Dat;
		public wct_workflowcontrolRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public wct_workflowcontrol( DataTable tab ) : base() 
		{
			_dbTableName = "wct_workflowcontrol";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wct_workflowcontrolRow( _dst, false );
			Old = new wct_workflowcontrolRow( _dst , true );
		}
		
		
		public wct_workflowcontrol( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "wct_workflowcontrol";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wct_workflowcontrolRow( _dst, false );
			Old = new wct_workflowcontrolRow( _dst , true );
		}
				
		public wct_workflowcontrol( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public wct_workflowcontrol() : base() 
		{
			Init();
		}
		
		public wct_workflowcontrol( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "wct_workflowcontrol";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "wct_workflowcontrolid", typeof( int ) );  
			_dt.Columns.Add( "wct_descripcion", typeof( String ) );  
			_dt.Columns.Add( "wct_workflowcabid", typeof( int ) );  
			
			

			
			_dt.Columns["wct_workflowcontrolid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_wct_workflowcontrol",_dt.Columns["wct_workflowcontrolid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wct_workflowcontrolRow( _dst, false );
			Old = new wct_workflowcontrolRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion wct_workflowcontrol

#region wd_wordflowdet
namespace Berke.DG.DBTab
{
	using Berke.DG.Base;
	using Berke.DG.DBTab.Row;
	
	#region Row
   	namespace Row{
		public class wd_wordflowdetRow 
		{
			private  DSTab _dst;
			
			public Int_Field wd_workflowdetid;	
			public Int_Field wd_workflowcabid;	
			public Int_Field wd_tipoactuacionorigenid;	
			public Int_Field wd_tipoactuaciondestinoid;	
			public Int_Field wd_ordenpaso;	
			public Int_Field wd_usuariorespid;	
			public Int_Field wd_documentoid;	
			public Int_Field wd_alertaid;	
			public Boolean_Field wd_obligatorio;	

			public wd_wordflowdetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				wd_workflowdetid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				wd_workflowcabid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				wd_tipoactuacionorigenid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				wd_tipoactuaciondestinoid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				wd_ordenpaso		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				wd_usuariorespid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				wd_documentoid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				wd_alertaid		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				wd_obligatorio		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class wd_wordflowdetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class wd_wordflowdet : TableBase 
	{
		#region Datos Miembro
		
		private string _tableName = "wd_wordflowdet";
	
		
		public wd_wordflowdetRow Dat;
		public wd_wordflowdetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public wd_wordflowdet( DataTable tab ) : base() 
		{
			_dbTableName = "wd_wordflowdet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wd_wordflowdetRow( _dst, false );
			Old = new wd_wordflowdetRow( _dst , true );
		}
		
		
		public wd_wordflowdet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "wd_wordflowdet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wd_wordflowdetRow( _dst, false );
			Old = new wd_wordflowdetRow( _dst , true );
		}
				
		public wd_wordflowdet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public wd_wordflowdet() : base() 
		{
			Init();
		}
		
		public wd_wordflowdet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "wd_wordflowdet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "wd_workflowdetid", typeof( int ) );  
			_dt.Columns.Add( "wd_workflowcabid", typeof( int ) );  
			_dt.Columns.Add( "wd_tipoactuacionorigenid", typeof( int ) );  
			_dt.Columns.Add( "wd_tipoactuaciondestinoid", typeof( int ) );  
			_dt.Columns.Add( "wd_ordenpaso", typeof( int ) );  
			_dt.Columns.Add( "wd_usuariorespid", typeof( int ) );  
			_dt.Columns.Add( "wd_documentoid", typeof( int ) );  
			_dt.Columns.Add( "wd_alertaid", typeof( int ) );  
			_dt.Columns.Add( "wd_obligatorio", typeof( Boolean ) );  
			
			

			
			_dt.Columns["wd_workflowdetid"].AutoIncrement = true;
			_dt.Constraints.Add("pk_wd_wordflowdet",_dt.Columns["wd_workflowdetid"], true ); 

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new wd_wordflowdetRow( _dst, false );
			Old = new wd_wordflowdetRow( _dst , true );
		
		}
		#endregion Constructor 

		


	}
	#endregion Table
	

} // namespace  Berke.DG.DBTab
#endregion wd_wordflowdet

#endregion Tablas


#region Vistas

#region vClase_Distinct
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClase_DistinctRow 
		{
			private  DSTab _dst;
			
			public Int_Field Nro;	

			public vClase_DistinctRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Nro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
			}
		} // end class vClase_DistinctRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClase_Distinct : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClase_Distinct";
	
		
		public vClase_DistinctRow Dat;
		public vClase_DistinctRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClase_Distinct( DataTable tab ) : base() 
		{
			_dbTableName = "vClase_Distinct";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClase_DistinctRow( _dst, false );
			Old = new vClase_DistinctRow( _dst , true );
		}
		
		
		public vClase_Distinct( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClase_Distinct";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClase_DistinctRow( _dst, false );
			Old = new vClase_DistinctRow( _dst , true );
		}
				
		public vClase_Distinct( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClase_Distinct() : base() 
		{
			Init();
		}
		
		public vClase_Distinct( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClase_Distinct";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Nro", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClase_DistinctRow( _dst, false );
			Old = new vClase_DistinctRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClase_DistinctAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClase_Distinct

#region vClase
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClaseRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public String_Field Descrip;	
			public Int_Field NizaEdicionID;	
			public String_Field NizaAbrev;	

			public vClaseRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				NizaAbrev		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vClaseRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClase : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClase";
	
		
		public vClaseRow Dat;
		public vClaseRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClase( DataTable tab ) : base() 
		{
			_dbTableName = "vClase";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseRow( _dst, false );
			Old = new vClaseRow( _dst , true );
		}
		
		
		public vClase( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClase";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseRow( _dst, false );
			Old = new vClaseRow( _dst , true );
		}
				
		public vClase( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClase() : base() 
		{
			Init();
		}
		
		public vClase( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClase";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "NizaAbrev", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseRow( _dst, false );
			Old = new vClaseRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClaseAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClase

#region vOrdenTrabajoList
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOrdenTrabajoListRow 
		{
			private  DSTab _dst;
			
			public Int_Field OrdenTrabajoID;	
			public String_Field OrdenTrabajo;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public Int_Field TramiteID;	
			public String_Field Tramite;	
			public Int_Field FuncionarioID;	
			public String_Field Denominacion;	
			public Int_Field Clase;	
			public String_Field Edicion;	
			public Boolean_Field Sustituida;	
			public Int_Field AgenteLocalID;	

			public vOrdenTrabajoListRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				OrdenTrabajoID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Edicion		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class vOrdenTrabajoListRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOrdenTrabajoList : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOrdenTrabajoList";
	
		
		public vOrdenTrabajoListRow Dat;
		public vOrdenTrabajoListRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOrdenTrabajoList( DataTable tab ) : base() 
		{
			_dbTableName = "vOrdenTrabajoList";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajoListRow( _dst, false );
			Old = new vOrdenTrabajoListRow( _dst , true );
		}
		
		
		public vOrdenTrabajoList( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOrdenTrabajoList";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajoListRow( _dst, false );
			Old = new vOrdenTrabajoListRow( _dst , true );
		}
				
		public vOrdenTrabajoList( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOrdenTrabajoList() : base() 
		{
			Init();
		}
		
		public vOrdenTrabajoList( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOrdenTrabajoList";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "Edicion", typeof( String ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajoListRow( _dst, false );
			Old = new vOrdenTrabajoListRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOrdenTrabajoListAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOrdenTrabajoList

#region vTramiteSit
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTramiteSitRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public String_Field Descrip;	
			public Boolean_Field Vigente;	
			public Boolean_Field Automatico;	

			public vTramiteSitRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				Automatico		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vTramiteSitRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTramiteSit : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTramiteSit";
	
		
		public vTramiteSitRow Dat;
		public vTramiteSitRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTramiteSit( DataTable tab ) : base() 
		{
			_dbTableName = "vTramiteSit";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteSitRow( _dst, false );
			Old = new vTramiteSitRow( _dst , true );
		}
		
		
		public vTramiteSit( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTramiteSit";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteSitRow( _dst, false );
			Old = new vTramiteSitRow( _dst , true );
		}
				
		public vTramiteSit( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTramiteSit() : base() 
		{
			Init();
		}
		
		public vTramiteSit( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTramiteSit";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "Automatico", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteSitRow( _dst, false );
			Old = new vTramiteSitRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTramiteSitAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTramiteSit

#region vOrdenTrabajoNroAnio
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOrdenTrabajoNroAnioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field Anio;	

			public vOrdenTrabajoNroAnioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vOrdenTrabajoNroAnioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOrdenTrabajoNroAnio : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOrdenTrabajoNroAnio";
	
		
		public vOrdenTrabajoNroAnioRow Dat;
		public vOrdenTrabajoNroAnioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOrdenTrabajoNroAnio( DataTable tab ) : base() 
		{
			_dbTableName = "vOrdenTrabajoNroAnio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajoNroAnioRow( _dst, false );
			Old = new vOrdenTrabajoNroAnioRow( _dst , true );
		}
		
		
		public vOrdenTrabajoNroAnio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOrdenTrabajoNroAnio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajoNroAnioRow( _dst, false );
			Old = new vOrdenTrabajoNroAnioRow( _dst , true );
		}
				
		public vOrdenTrabajoNroAnio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOrdenTrabajoNroAnio() : base() 
		{
			Init();
		}
		
		public vOrdenTrabajoNroAnio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOrdenTrabajoNroAnio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajoNroAnioRow( _dst, false );
			Old = new vOrdenTrabajoNroAnioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOrdenTrabajoNroAnioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOrdenTrabajoNroAnio

#region vOrdenTrabajo_Propietarios
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOrdenTrabajo_PropietariosRow 
		{
			private  DSTab _dst;
			
			public Int_Field OrdenTrabajoID;	
			public Int_Field PropietarioID;	
			public Int_Field PoderdanteID;	
			public String_Field Denominacion;	
			public Int_Field PoderDomicilioID;	
			public String_Field Domicilio;	
			public String_Field Ciudad;	
			public String_Field Inscripcion;	
			public String_Field Acta;	
			public Boolean_Field Origen;	

			public vOrdenTrabajo_PropietariosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				OrdenTrabajoID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PoderdanteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				PoderDomicilioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Ciudad		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Origen		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vOrdenTrabajo_PropietariosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOrdenTrabajo_Propietarios : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOrdenTrabajo_Propietarios";
	
		
		public vOrdenTrabajo_PropietariosRow Dat;
		public vOrdenTrabajo_PropietariosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOrdenTrabajo_Propietarios( DataTable tab ) : base() 
		{
			_dbTableName = "vOrdenTrabajo_Propietarios";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajo_PropietariosRow( _dst, false );
			Old = new vOrdenTrabajo_PropietariosRow( _dst , true );
		}
		
		
		public vOrdenTrabajo_Propietarios( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOrdenTrabajo_Propietarios";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajo_PropietariosRow( _dst, false );
			Old = new vOrdenTrabajo_PropietariosRow( _dst , true );
		}
				
		public vOrdenTrabajo_Propietarios( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOrdenTrabajo_Propietarios() : base() 
		{
			Init();
		}
		
		public vOrdenTrabajo_Propietarios( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOrdenTrabajo_Propietarios";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PoderdanteID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "PoderDomicilioID", typeof( int ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "Ciudad", typeof( String ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Origen", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajo_PropietariosRow( _dst, false );
			Old = new vOrdenTrabajo_PropietariosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOrdenTrabajo_PropietariosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOrdenTrabajo_Propietarios

#region vOrdenTrabajo_Documento
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOrdenTrabajo_DocumentoRow 
		{
			private  DSTab _dst;
			
			public Int_Field OrdenTrabajoID;	
			public Int_Field DocumentoID;	
			public Int_Field DocumentoTipoID;	
			public Int_Field IdentificadorNro;	
			public Int_Field IdentificadorAnio;	
			public String_Field ReferenciaExterna;	
			public String_Field Path;	

			public vOrdenTrabajo_DocumentoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				OrdenTrabajoID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				DocumentoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				DocumentoTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				IdentificadorNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				IdentificadorAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ReferenciaExterna		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Path		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vOrdenTrabajo_DocumentoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOrdenTrabajo_Documento : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOrdenTrabajo_Documento";
	
		
		public vOrdenTrabajo_DocumentoRow Dat;
		public vOrdenTrabajo_DocumentoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOrdenTrabajo_Documento( DataTable tab ) : base() 
		{
			_dbTableName = "vOrdenTrabajo_Documento";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajo_DocumentoRow( _dst, false );
			Old = new vOrdenTrabajo_DocumentoRow( _dst , true );
		}
		
		
		public vOrdenTrabajo_Documento( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOrdenTrabajo_Documento";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajo_DocumentoRow( _dst, false );
			Old = new vOrdenTrabajo_DocumentoRow( _dst , true );
		}
				
		public vOrdenTrabajo_Documento( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOrdenTrabajo_Documento() : base() 
		{
			Init();
		}
		
		public vOrdenTrabajo_Documento( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOrdenTrabajo_Documento";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoTipoID", typeof( int ) );  
			_dt.Columns.Add( "IdentificadorNro", typeof( int ) );  
			_dt.Columns.Add( "IdentificadorAnio", typeof( int ) );  
			_dt.Columns.Add( "ReferenciaExterna", typeof( String ) );  
			_dt.Columns.Add( "Path", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenTrabajo_DocumentoRow( _dst, false );
			Old = new vOrdenTrabajo_DocumentoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOrdenTrabajo_DocumentoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOrdenTrabajo_Documento

#region vExpedienteSitList
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpedienteSitListRow 
		{
			private  DSTab _dst;
			
			public Int_Field Marca_ID;	
			public String_Field Denominacion;	
			public Int_Field ClaseID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigente;	
			public Int_Field ExpID;	
			public String_Field Publicacion;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Acta;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field AgenteLocalID;	
			public Int_Field DiarioID;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Boolean_Field ExpNuestra;	
			public Boolean_Field ExpStandBy;	
			public DateTime_Field VencimientoFecha;	
			public Boolean_Field Concluido;	
			public Int_Field MarcaRegRenID;	
			public Int_Field ExpedienteID;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public String_Field Registro;	
			public DateTime_Field ConcesionFecha;	
			public String_Field OrdenTrabajo;	
			public Int_Field OrdenTrabajoNro;	
			public Int_Field OrdenTrabajoAnio;	

			public vExpedienteSitListRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Marca_ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				ExpID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Publicacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				DiarioID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				ExpNuestra		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				ExpStandBy		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 29, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				OrdenTrabajoNro		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				OrdenTrabajoAnio		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
			}
		} // end class vExpedienteSitListRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpedienteSitList : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpedienteSitList";
	
		
		public vExpedienteSitListRow Dat;
		public vExpedienteSitListRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpedienteSitList( DataTable tab ) : base() 
		{
			_dbTableName = "vExpedienteSitList";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteSitListRow( _dst, false );
			Old = new vExpedienteSitListRow( _dst , true );
		}
		
		
		public vExpedienteSitList( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpedienteSitList";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteSitListRow( _dst, false );
			Old = new vExpedienteSitListRow( _dst , true );
		}
				
		public vExpedienteSitList( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpedienteSitList() : base() 
		{
			Init();
		}
		
		public vExpedienteSitList( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpedienteSitList";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Marca_ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpID", typeof( int ) );  
			_dt.Columns.Add( "Publicacion", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "DiarioID", typeof( int ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "ExpNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpStandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajoNro", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoAnio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteSitListRow( _dst, false );
			Old = new vExpedienteSitListRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpedienteSitListAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpedienteSitList

#region vMarcaBusqFonResul
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaBusqFonResulRow 
		{
			private  DSTab _dst;
			
			public Int_Field BusqFonDetID;	
			public Int_Field MarcaID;	
			public String_Field Patron;	
			public String_Field Denominacion;	
			public String_Field Clave;	
			public Int_Field ClaseID;	
			public Int_Field ClaseNro;	
			public Int_Field NizaEdicionID;	
			public String_Field Clase;	
			public Int_Field ClienteID;	
			public String_Field Edicion;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Int_Field ExpedienteVigenteID;	
			public Int_Field MarcaTipoID;	

			public vMarcaBusqFonResulRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				BusqFonDetID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Patron		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clave		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Edicion		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				ExpedienteVigenteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class vMarcaBusqFonResulRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaBusqFonResul : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaBusqFonResul";
	
		
		public vMarcaBusqFonResulRow Dat;
		public vMarcaBusqFonResulRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaBusqFonResul( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaBusqFonResul";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaBusqFonResulRow( _dst, false );
			Old = new vMarcaBusqFonResulRow( _dst , true );
		}
		
		
		public vMarcaBusqFonResul( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaBusqFonResul";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaBusqFonResulRow( _dst, false );
			Old = new vMarcaBusqFonResulRow( _dst , true );
		}
				
		public vMarcaBusqFonResul( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaBusqFonResul() : base() 
		{
			Init();
		}
		
		public vMarcaBusqFonResul( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaBusqFonResul";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "BusqFonDetID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Patron", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clave", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "Edicion", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteVigenteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaBusqFonResulRow( _dst, false );
			Old = new vMarcaBusqFonResulRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaBusqFonResulAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaBusqFonResul

#region vPoderSitList
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderSitListRow 
		{
			private  DSTab _dst;
			
			public Int_Field PoderID;	
			public Boolean_Field Nuestra;	
			public Int_Field PoderInscID;	
			public String_Field Inscripcion;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field OrdenTrabajoNro;	
			public Int_Field OrdenTrabajoAnio;	
			public String_Field OrdenTrabajo;	

			public vPoderSitListRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				PoderID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				OrdenTrabajoNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				OrdenTrabajoAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vPoderSitListRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderSitList : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderSitList";
	
		
		public vPoderSitListRow Dat;
		public vPoderSitListRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderSitList( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderSitList";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderSitListRow( _dst, false );
			Old = new vPoderSitListRow( _dst , true );
		}
		
		
		public vPoderSitList( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderSitList";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderSitListRow( _dst, false );
			Old = new vPoderSitListRow( _dst , true );
		}
				
		public vPoderSitList( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderSitList() : base() 
		{
			Init();
		}
		
		public vPoderSitList( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderSitList";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoNro", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderSitListRow( _dst, false );
			Old = new vPoderSitListRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderSitListAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderSitList

#region vExpedienteMensaje
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpedienteMensajeRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public String_Field Acta;	
			public DateTime_Field Vencimiento;	
			public Int_Field menID;	
			public Int_Field InstruccionTipoID;	
			public Int_Field InstruccionTipoID1;	
			public Int_Field MensajeTipoID;	
			public DateTime_Field MensajeFecha;	
			public Int_Field ViaComID;	

			public vExpedienteMensajeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Vencimiento		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				menID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				InstruccionTipoID1		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				MensajeTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				MensajeFecha		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				ViaComID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class vExpedienteMensajeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpedienteMensaje : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpedienteMensaje";
	
		
		public vExpedienteMensajeRow Dat;
		public vExpedienteMensajeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpedienteMensaje( DataTable tab ) : base() 
		{
			_dbTableName = "vExpedienteMensaje";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteMensajeRow( _dst, false );
			Old = new vExpedienteMensajeRow( _dst , true );
		}
		
		
		public vExpedienteMensaje( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpedienteMensaje";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteMensajeRow( _dst, false );
			Old = new vExpedienteMensajeRow( _dst , true );
		}
				
		public vExpedienteMensaje( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpedienteMensaje() : base() 
		{
			Init();
		}
		
		public vExpedienteMensaje( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpedienteMensaje";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Vencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "menID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID1", typeof( int ) );  
			_dt.Columns.Add( "MensajeTipoID", typeof( int ) );  
			_dt.Columns.Add( "MensajeFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ViaComID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteMensajeRow( _dst, false );
			Old = new vExpedienteMensajeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpedienteMensajeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpedienteMensaje

#region vPoderdante
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderdanteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field descrip;	
			public Int_Field MarcaID;	

			public vPoderdanteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vPoderdanteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderdante : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderdante";
	
		
		public vPoderdanteRow Dat;
		public vPoderdanteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderdante( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderdante";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderdanteRow( _dst, false );
			Old = new vPoderdanteRow( _dst , true );
		}
		
		
		public vPoderdante( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderdante";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderdanteRow( _dst, false );
			Old = new vPoderdanteRow( _dst , true );
		}
				
		public vPoderdante( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderdante() : base() 
		{
			Init();
		}
		
		public vPoderdante( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderdante";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderdanteRow( _dst, false );
			Old = new vPoderdanteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderdanteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderdante

#region ParamTab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class ParamTabRow 
		{
			private  DSTab _dst;
			
			public Int_Field Entero;	
			public String_Field Alfa;	
			public DateTime_Field Fecha;	
			public Boolean_Field Logico;	

			public ParamTabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Entero		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Alfa		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				Logico		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ParamTabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ParamTab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ParamTab";
	
		
		public ParamTabRow Dat;
		public ParamTabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ParamTab( DataTable tab ) : base() 
		{
			_dbTableName = "ParamTab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ParamTabRow( _dst, false );
			Old = new ParamTabRow( _dst , true );
		}
		
		
		public ParamTab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ParamTab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ParamTabRow( _dst, false );
			Old = new ParamTabRow( _dst , true );
		}
				
		public ParamTab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ParamTab() : base() 
		{
			Init();
		}
		
		public ParamTab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ParamTab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Entero", typeof( int ) );  
			_dt.Columns.Add( "Alfa", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Logico", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ParamTabRow( _dst, false );
			Old = new ParamTabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.ParamTabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion ParamTab

#region ListTab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class ListTabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	

			public ListTabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class ListTabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ListTab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ListTab";
	
		
		public ListTabRow Dat;
		public ListTabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ListTab( DataTable tab ) : base() 
		{
			_dbTableName = "ListTab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListTabRow( _dst, false );
			Old = new ListTabRow( _dst , true );
		}
		
		
		public ListTab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ListTab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListTabRow( _dst, false );
			Old = new ListTabRow( _dst , true );
		}
				
		public ListTab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ListTab() : base() 
		{
			Init();
		}
		
		public ListTab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ListTab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ListTabRow( _dst, false );
			Old = new ListTabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.ListTabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion ListTab

#region CambioSitParam
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class CambioSitParamRow 
		{
			private  DSTab _dst;
			
			public Int_Field TramiteSitDestinoID;	
			public DateTime_Field SitFecha;	
			public String_Field SitHora;	
			public Int_Field Plazo;	
			public Int_Field UnidadID;	
			public DateTime_Field SitVencim;	
			public Int_Field AgenteLocalID;	
			public Int_Field NroActa;	
			public Int_Field NroRegistro;	
			public Int_Field DiarioID;	
			public Int_Field PublicPagina;	
			public Int_Field PublicAnio;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Int_Field ExpedienteID;	
			public DateTime_Field RegVencim;	
			public String_Field Obs;	
			public Int_Field AnioRegistro;	
			public Int_Field AnioActa;	

			public CambioSitParamRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				TramiteSitDestinoID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SitFecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				SitHora		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Plazo		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				UnidadID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				SitVencim		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				NroActa		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				NroRegistro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				DiarioID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PublicPagina		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RegVencim		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				AnioRegistro		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				AnioActa		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
			}
		} // end class CambioSitParamRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class CambioSitParam : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "CambioSitParam";
	
		
		public CambioSitParamRow Dat;
		public CambioSitParamRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public CambioSitParam( DataTable tab ) : base() 
		{
			_dbTableName = "CambioSitParam";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CambioSitParamRow( _dst, false );
			Old = new CambioSitParamRow( _dst , true );
		}
		
		
		public CambioSitParam( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "CambioSitParam";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CambioSitParamRow( _dst, false );
			Old = new CambioSitParamRow( _dst , true );
		}
				
		public CambioSitParam( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public CambioSitParam() : base() 
		{
			Init();
		}
		
		public CambioSitParam( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "CambioSitParam";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "TramiteSitDestinoID", typeof( int ) );  
			_dt.Columns.Add( "SitFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SitHora", typeof( String ) );  
			_dt.Columns.Add( "Plazo", typeof( int ) );  
			_dt.Columns.Add( "UnidadID", typeof( int ) );  
			_dt.Columns.Add( "SitVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "NroActa", typeof( int ) );  
			_dt.Columns.Add( "NroRegistro", typeof( int ) );  
			_dt.Columns.Add( "DiarioID", typeof( int ) );  
			_dt.Columns.Add( "PublicPagina", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "RegVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "AnioRegistro", typeof( int ) );  
			_dt.Columns.Add( "AnioActa", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new CambioSitParamRow( _dst, false );
			Old = new CambioSitParamRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.CambioSitParamAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion CambioSitParam

#region vExpePoder
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpePoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Boolean_Field Concluido;	
			public DateTime_Field VencimientoFecha;	
			public String_Field Acta;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Int_Field ExpeAnteriorID;	
			public Int_Field PoderInscID;	
			public String_Field Obs;	
			public Int_Field DiarioID;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field Documento;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public String_Field Inscripcion;	

			public vExpePoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ExpeAnteriorID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				DiarioID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Documento		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vExpePoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpePoder : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpePoder";
	
		
		public vExpePoderRow Dat;
		public vExpePoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpePoder( DataTable tab ) : base() 
		{
			_dbTableName = "vExpePoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpePoderRow( _dst, false );
			Old = new vExpePoderRow( _dst , true );
		}
		
		
		public vExpePoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpePoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpePoderRow( _dst, false );
			Old = new vExpePoderRow( _dst , true );
		}
				
		public vExpePoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpePoder() : base() 
		{
			Init();
		}
		
		public vExpePoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpePoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "ExpeAnteriorID", typeof( int ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "DiarioID", typeof( int ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "Documento", typeof( Boolean ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpePoderRow( _dst, false );
			Old = new vExpePoderRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpePoderAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpePoder

#region vRenovacionLimitadas
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRenovacionLimitadasRow 
		{
			private  DSTab _dst;
			
			public String_Field Denominacion;	
			public String_Field Clase;	
			public Int_Field ClaseID;	
			public Int_Field MarcaID;	
			public Int_Field IdiomaID;	
			public String_Field Idioma;	
			public String_Field Descrip;	

			public vRenovacionLimitadasRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Denominacion		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Idioma		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vRenovacionLimitadasRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRenovacionLimitadas : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRenovacionLimitadas";
	
		
		public vRenovacionLimitadasRow Dat;
		public vRenovacionLimitadasRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRenovacionLimitadas( DataTable tab ) : base() 
		{
			_dbTableName = "vRenovacionLimitadas";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovacionLimitadasRow( _dst, false );
			Old = new vRenovacionLimitadasRow( _dst , true );
		}
		
		
		public vRenovacionLimitadas( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRenovacionLimitadas";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovacionLimitadasRow( _dst, false );
			Old = new vRenovacionLimitadasRow( _dst , true );
		}
				
		public vRenovacionLimitadas( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRenovacionLimitadas() : base() 
		{
			Init();
		}
		
		public vRenovacionLimitadas( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRenovacionLimitadas";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "Idioma", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovacionLimitadasRow( _dst, false );
			Old = new vRenovacionLimitadasRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRenovacionLimitadasAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRenovacionLimitadas

#region ActaRegistroPoder
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class ActaRegistroPoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field Acta;	
			public Int_Field Anio;	
			public Int_Field Registro;	
			public Int_Field Poder;	

			public ActaRegistroPoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Acta		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Registro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Poder		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class ActaRegistroPoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class ActaRegistroPoder : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "ActaRegistroPoder";
	
		
		public ActaRegistroPoderRow Dat;
		public ActaRegistroPoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public ActaRegistroPoder( DataTable tab ) : base() 
		{
			_dbTableName = "ActaRegistroPoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ActaRegistroPoderRow( _dst, false );
			Old = new ActaRegistroPoderRow( _dst , true );
		}
		
		
		public ActaRegistroPoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "ActaRegistroPoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ActaRegistroPoderRow( _dst, false );
			Old = new ActaRegistroPoderRow( _dst , true );
		}
				
		public ActaRegistroPoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public ActaRegistroPoder() : base() 
		{
			Init();
		}
		
		public ActaRegistroPoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "ActaRegistroPoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Acta", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( int ) );  
			_dt.Columns.Add( "Poder", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new ActaRegistroPoderRow( _dst, false );
			Old = new ActaRegistroPoderRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.ActaRegistroPoderAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion ActaRegistroPoder

#region vExpedienteGral
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpedienteGralRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field procesoID;	
			public Int_Field trmiteSitID;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionAbrev;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Concluido;	
			public DateTime_Field Vencimiento;	
			public String_Field Observacion;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field OtID;	
			public String_Field SituacionDescrip;	
			public String_Field Descrip;	

			public vExpedienteGralRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				procesoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				trmiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				SituacionAbrev		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				Vencimiento		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				Observacion		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				OtID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 19, IsOldDataVersion  );	
			}
		} // end class vExpedienteGralRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpedienteGral : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpedienteGral";
	
		
		public vExpedienteGralRow Dat;
		public vExpedienteGralRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpedienteGral( DataTable tab ) : base() 
		{
			_dbTableName = "vExpedienteGral";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteGralRow( _dst, false );
			Old = new vExpedienteGralRow( _dst , true );
		}
		
		
		public vExpedienteGral( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpedienteGral";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteGralRow( _dst, false );
			Old = new vExpedienteGralRow( _dst , true );
		}
				
		public vExpedienteGral( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpedienteGral() : base() 
		{
			Init();
		}
		
		public vExpedienteGral( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpedienteGral";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "procesoID", typeof( int ) );  
			_dt.Columns.Add( "trmiteSitID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionAbrev", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "Vencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "Observacion", typeof( String ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "OtID", typeof( int ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteGralRow( _dst, false );
			Old = new vExpedienteGralRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpedienteGralAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpedienteGral

#region vPoderActual
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderActualRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Denominacion;	
			public String_Field Domicilio;	
			public String_Field Concepto;	
			public String_Field Obs;	

			public vPoderActualRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Concepto		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vPoderActualRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderActual : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderActual";
	
		
		public vPoderActualRow Dat;
		public vPoderActualRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderActual( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderActual";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderActualRow( _dst, false );
			Old = new vPoderActualRow( _dst , true );
		}
		
		
		public vPoderActual( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderActual";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderActualRow( _dst, false );
			Old = new vPoderActualRow( _dst , true );
		}
				
		public vPoderActual( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderActual() : base() 
		{
			Init();
		}
		
		public vPoderActual( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderActual";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "Concepto", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderActualRow( _dst, false );
			Old = new vPoderActualRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderActualAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderActual

#region vPoderAnterior
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderAnteriorRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public Int_Field ID;	
			public String_Field Denominacion;	
			public String_Field Domicilio;	
			public String_Field Concepto;	
			public String_Field Obs;	

			public vPoderAnteriorRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Concepto		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vPoderAnteriorRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderAnterior : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderAnterior";
	
		
		public vPoderAnteriorRow Dat;
		public vPoderAnteriorRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderAnterior( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderAnterior";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderAnteriorRow( _dst, false );
			Old = new vPoderAnteriorRow( _dst , true );
		}
		
		
		public vPoderAnterior( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderAnterior";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderAnteriorRow( _dst, false );
			Old = new vPoderAnteriorRow( _dst , true );
		}
				
		public vPoderAnterior( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderAnterior() : base() 
		{
			Init();
		}
		
		public vPoderAnterior( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderAnterior";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "Concepto", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderAnteriorRow( _dst, false );
			Old = new vPoderAnteriorRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderAnteriorAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderAnterior

#region vMarcaPoderdante
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaPoderdanteRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public Int_Field PoderdanteID;	
			public String_Field Poderdante;	
			public String_Field Domicilio;	
			public Int_Field idciudad;	
			public String_Field CiudadNombre;	
			public Int_Field idpais;	
			public String_Field PaisCodigo;	
			public String_Field PaisNombre;	
			public Int_Field PropietarioID;	
			public Int_Field PoderDomicilioID;	

			public vMarcaPoderdanteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PoderdanteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Poderdante		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				idciudad		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				CiudadNombre		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				idpais		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				PaisCodigo		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				PaisNombre		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PoderDomicilioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class vMarcaPoderdanteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaPoderdante : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaPoderdante";
	
		
		public vMarcaPoderdanteRow Dat;
		public vMarcaPoderdanteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaPoderdante( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaPoderdante";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaPoderdanteRow( _dst, false );
			Old = new vMarcaPoderdanteRow( _dst , true );
		}
		
		
		public vMarcaPoderdante( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaPoderdante";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaPoderdanteRow( _dst, false );
			Old = new vMarcaPoderdanteRow( _dst , true );
		}
				
		public vMarcaPoderdante( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaPoderdante() : base() 
		{
			Init();
		}
		
		public vMarcaPoderdante( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaPoderdante";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "PoderdanteID", typeof( int ) );  
			_dt.Columns.Add( "Poderdante", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "idciudad", typeof( int ) );  
			_dt.Columns.Add( "CiudadNombre", typeof( String ) );  
			_dt.Columns.Add( "idpais", typeof( int ) );  
			_dt.Columns.Add( "PaisCodigo", typeof( String ) );  
			_dt.Columns.Add( "PaisNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PoderDomicilioID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaPoderdanteRow( _dst, false );
			Old = new vMarcaPoderdanteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaPoderdanteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaPoderdante

#region vClaseClase
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClaseClaseRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClaseID;	
			public String_Field ClaseDescrip;	
			public Int_Field ClaseRelacID;	
			public String_Field ClaseRelacDescrip;	
			public Boolean_Field Ancestro;	

			public vClaseClaseRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseDescrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseRelacID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseRelacDescrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Ancestro		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vClaseClaseRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClaseClase : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClaseClase";
	
		
		public vClaseClaseRow Dat;
		public vClaseClaseRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClaseClase( DataTable tab ) : base() 
		{
			_dbTableName = "vClaseClase";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseClaseRow( _dst, false );
			Old = new vClaseClaseRow( _dst , true );
		}
		
		
		public vClaseClase( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClaseClase";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseClaseRow( _dst, false );
			Old = new vClaseClaseRow( _dst , true );
		}
				
		public vClaseClase( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClaseClase() : base() 
		{
			Init();
		}
		
		public vClaseClase( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClaseClase";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClaseRelacID", typeof( int ) );  
			_dt.Columns.Add( "ClaseRelacDescrip", typeof( String ) );  
			_dt.Columns.Add( "Ancestro", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseClaseRow( _dst, false );
			Old = new vClaseClaseRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClaseClaseAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClaseClase

#region RegistrosActasClientePropietario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class RegistrosActasClientePropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public String_Field Registros;	
			public String_Field Actas;	
			public String_Field EsTVS;	

			public RegistrosActasClientePropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ClienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Registros		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Actas		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				EsTVS		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class RegistrosActasClientePropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class RegistrosActasClientePropietario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "RegistrosActasClientePropietario";
	
		
		public RegistrosActasClientePropietarioRow Dat;
		public RegistrosActasClientePropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public RegistrosActasClientePropietario( DataTable tab ) : base() 
		{
			_dbTableName = "RegistrosActasClientePropietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new RegistrosActasClientePropietarioRow( _dst, false );
			Old = new RegistrosActasClientePropietarioRow( _dst , true );
		}
		
		
		public RegistrosActasClientePropietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "RegistrosActasClientePropietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new RegistrosActasClientePropietarioRow( _dst, false );
			Old = new RegistrosActasClientePropietarioRow( _dst , true );
		}
				
		public RegistrosActasClientePropietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public RegistrosActasClientePropietario() : base() 
		{
			Init();
		}
		
		public RegistrosActasClientePropietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "RegistrosActasClientePropietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Registros", typeof( String ) );  
			_dt.Columns.Add( "Actas", typeof( String ) );  
			_dt.Columns.Add( "EsTVS", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new RegistrosActasClientePropietarioRow( _dst, false );
			Old = new RegistrosActasClientePropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.RegistrosActasClientePropietarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion RegistrosActasClientePropietario

#region vExpeDocum
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeDocumRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpeDocumID;	
			public Int_Field ExpedienteID;	
			public Int_Field DocumentoID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Acta;	
			public Int_Field DocTipoID;	
			public Int_Field DocNro;	
			public Int_Field DocAnio;	
			public String_Field DocRefExt;	
			public String_Field DocPath;	
			public String_Field Descrip;	
			public DateTime_Field Fecha;	
			public String_Field DocTipo;	
			public String_Field DocTipoAbrev;	
			public String_Field DocTipoIdentficador;	

			public vExpeDocumRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpeDocumID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				DocumentoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				DocTipoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				DocNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				DocAnio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				DocRefExt		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				DocPath		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				DocTipo		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				DocTipoAbrev		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				DocTipoIdentficador		= new String_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vExpeDocumRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeDocum : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeDocum";
	
		
		public vExpeDocumRow Dat;
		public vExpeDocumRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeDocum( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeDocum";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeDocumRow( _dst, false );
			Old = new vExpeDocumRow( _dst , true );
		}
		
		
		public vExpeDocum( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeDocum";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeDocumRow( _dst, false );
			Old = new vExpeDocumRow( _dst , true );
		}
				
		public vExpeDocum( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeDocum() : base() 
		{
			Init();
		}
		
		public vExpeDocum( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeDocum";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpeDocumID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "DocTipoID", typeof( int ) );  
			_dt.Columns.Add( "DocNro", typeof( int ) );  
			_dt.Columns.Add( "DocAnio", typeof( int ) );  
			_dt.Columns.Add( "DocRefExt", typeof( String ) );  
			_dt.Columns.Add( "DocPath", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "DocTipo", typeof( String ) );  
			_dt.Columns.Add( "DocTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "DocTipoIdentficador", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeDocumRow( _dst, false );
			Old = new vExpeDocumRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeDocumAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeDocum

#region vDocum
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vDocumRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field Fecha;	
			public String_Field DocTipoAbrev;	
			public Int_Field DocNro;	
			public Int_Field DocAnio;	
			public String_Field Descrip;	
			public String_Field DocRefExt;	
			public String_Field DocPath;	
			public Int_Field DocTipoID;	
			public String_Field DocTipo;	
			public String_Field Identficador;	
			public Boolean_Field EsEscritoVario;	
			public Int_Field ExpeID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Acta;	

			public vDocumRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				DocTipoAbrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				DocNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				DocAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				DocRefExt		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				DocPath		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				DocTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				DocTipo		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Identficador		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				EsEscritoVario		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				ExpeID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vDocumRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vDocum : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vDocum";
	
		
		public vDocumRow Dat;
		public vDocumRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vDocum( DataTable tab ) : base() 
		{
			_dbTableName = "vDocum";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vDocumRow( _dst, false );
			Old = new vDocumRow( _dst , true );
		}
		
		
		public vDocum( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vDocum";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vDocumRow( _dst, false );
			Old = new vDocumRow( _dst , true );
		}
				
		public vDocum( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vDocum() : base() 
		{
			Init();
		}
		
		public vDocum( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vDocum";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "DocTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "DocNro", typeof( int ) );  
			_dt.Columns.Add( "DocAnio", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "DocRefExt", typeof( String ) );  
			_dt.Columns.Add( "DocPath", typeof( String ) );  
			_dt.Columns.Add( "DocTipoID", typeof( int ) );  
			_dt.Columns.Add( "DocTipo", typeof( String ) );  
			_dt.Columns.Add( "Identficador", typeof( String ) );  
			_dt.Columns.Add( "EsEscritoVario", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpeID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vDocumRow( _dst, false );
			Old = new vDocumRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vDocumAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vDocum

#region vBoletin_SinBusqFon
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBoletin_SinBusqFonRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public String_Field Complemento;	
			public DateTime_Field Fecha;	
			public String_Field Boletin;	

			public vBoletin_SinBusqFonRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Complemento		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Boletin		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vBoletin_SinBusqFonRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBoletin_SinBusqFon : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBoletin_SinBusqFon";
	
		
		public vBoletin_SinBusqFonRow Dat;
		public vBoletin_SinBusqFonRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBoletin_SinBusqFon( DataTable tab ) : base() 
		{
			_dbTableName = "vBoletin_SinBusqFon";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletin_SinBusqFonRow( _dst, false );
			Old = new vBoletin_SinBusqFonRow( _dst , true );
		}
		
		
		public vBoletin_SinBusqFon( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBoletin_SinBusqFon";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletin_SinBusqFonRow( _dst, false );
			Old = new vBoletin_SinBusqFonRow( _dst , true );
		}
				
		public vBoletin_SinBusqFon( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBoletin_SinBusqFon() : base() 
		{
			Init();
		}
		
		public vBoletin_SinBusqFon( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBoletin_SinBusqFon";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Complemento", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Boletin", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletin_SinBusqFonRow( _dst, false );
			Old = new vBoletin_SinBusqFonRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBoletin_SinBusqFonAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBoletin_SinBusqFon

#region vBusqFon
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBusqFonRow 
		{
			private  DSTab _dst;
			
			public Int_Field PedidoID;	
			public Int_Field Id;	
			public String_Field Clave;	
			public Int_Field FuncionarioID;	
			public Int_Field DetalleID;	
			public Boolean_Field Relac;	
			public String_Field Registro;	
			public String_Field Denominacion;	
			public String_Field Fonetizado;	
			public Int_Field Puntaje;	
			public String_Field Patron;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Int_Field CLienteID;	
			public String_Field ClienteNombre;	
			public String_Field Propietarios;	
			public String_Field Acta;	
			public String_Field MarcaTipo;	
			public Boolean_Field Imprimir;	
			public String_Field Tramite;	
			public Int_Field ClaseNumero;	
			public String_Field ClaseDescrip;	
			public DateTime_Field FConcesion;	
			public DateTime_Field FVencimiento;	

			public vBusqFonRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				PedidoID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Id		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Clave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				DetalleID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Relac		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Fonetizado		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Puntaje		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Patron		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				CLienteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Propietarios		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				Imprimir		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				ClaseNumero		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				ClaseDescrip		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				FConcesion		= new DateTime_Field(	_dst, 24, IsOldDataVersion  );	
				FVencimiento		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
			}
		} // end class vBusqFonRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBusqFon : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBusqFon";
	
		
		public vBusqFonRow Dat;
		public vBusqFonRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBusqFon( DataTable tab ) : base() 
		{
			_dbTableName = "vBusqFon";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusqFonRow( _dst, false );
			Old = new vBusqFonRow( _dst , true );
		}
		
		
		public vBusqFon( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBusqFon";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusqFonRow( _dst, false );
			Old = new vBusqFonRow( _dst , true );
		}
				
		public vBusqFon( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBusqFon() : base() 
		{
			Init();
		}
		
		public vBusqFon( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBusqFon";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "PedidoID", typeof( int ) );  
			_dt.Columns.Add( "Id", typeof( int ) );  
			_dt.Columns.Add( "Clave", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "DetalleID", typeof( int ) );  
			_dt.Columns.Add( "Relac", typeof( Boolean ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Fonetizado", typeof( String ) );  
			_dt.Columns.Add( "Puntaje", typeof( int ) );  
			_dt.Columns.Add( "Patron", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "CLienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "Propietarios", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Imprimir", typeof( Boolean ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "ClaseNumero", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescrip", typeof( String ) );  
			_dt.Columns.Add( "FConcesion", typeof( DateTime ) );  
			_dt.Columns.Add( "FVencimiento", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusqFonRow( _dst, false );
			Old = new vBusqFonRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBusqFonAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBusqFon

#region vHIresu
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vHIresuRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public DateTime_Field AltaFecha;	
			public String_Field OrdenTrabajo;	
			public Int_Field TipoTrabajoID;	
			public String_Field Descrip;	

			public vHIresuRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				TipoTrabajoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vHIresuRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vHIresu : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vHIresu";
	
		
		public vHIresuRow Dat;
		public vHIresuRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vHIresu( DataTable tab ) : base() 
		{
			_dbTableName = "vHIresu";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIresuRow( _dst, false );
			Old = new vHIresuRow( _dst , true );
		}
		
		
		public vHIresu( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vHIresu";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIresuRow( _dst, false );
			Old = new vHIresuRow( _dst , true );
		}
				
		public vHIresu( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vHIresu() : base() 
		{
			Init();
		}
		
		public vHIresu( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vHIresu";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "TipoTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIresuRow( _dst, false );
			Old = new vHIresuRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vHIresuAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vHIresu

#region vExpeMarcaL
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeMarcaLRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public String_Field Registro;	
			public String_Field OrdenTrabajo;	
			public String_Field Denominacion;	
			public String_Field Clase;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDecrip;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Int_Field ClaseID;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public Int_Field MarcaID;	
			public Boolean_Field ExpeNuestro;	
			public Boolean_Field MarcaNuestra;	
			public Boolean_Field MarcaActiva;	
			public DateTime_Field VencimientoFecha;	
			public Boolean_Field RegVigente;	

			public vExpeMarcaLRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				SituacionDecrip		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				ExpeNuestro		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				MarcaNuestra		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
				MarcaActiva		= new Boolean_Field(	_dst, 24, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
				RegVigente		= new Boolean_Field(	_dst, 26, IsOldDataVersion  );	
			}
		} // end class vExpeMarcaLRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeMarcaL : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeMarcaL";
	
		
		public vExpeMarcaLRow Dat;
		public vExpeMarcaLRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeMarcaL( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeMarcaL";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaLRow( _dst, false );
			Old = new vExpeMarcaLRow( _dst , true );
		}
		
		
		public vExpeMarcaL( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeMarcaL";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaLRow( _dst, false );
			Old = new vExpeMarcaLRow( _dst , true );
		}
				
		public vExpeMarcaL( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeMarcaL() : base() 
		{
			Init();
		}
		
		public vExpeMarcaL( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeMarcaL";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDecrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "ExpeNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaActiva", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigente", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaLRow( _dst, false );
			Old = new vExpeMarcaLRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeMarcaLAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeMarcaL

#region vPropietarioResumida
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioResumidaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	

			public vPropietarioResumidaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vPropietarioResumidaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietarioResumida : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietarioResumida";
	
		
		public vPropietarioResumidaRow Dat;
		public vPropietarioResumidaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietarioResumida( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietarioResumida";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioResumidaRow( _dst, false );
			Old = new vPropietarioResumidaRow( _dst , true );
		}
		
		
		public vPropietarioResumida( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietarioResumida";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioResumidaRow( _dst, false );
			Old = new vPropietarioResumidaRow( _dst , true );
		}
				
		public vPropietarioResumida( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietarioResumida() : base() 
		{
			Init();
		}
		
		public vPropietarioResumida( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietarioResumida";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioResumidaRow( _dst, false );
			Old = new vPropietarioResumidaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioResumidaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietarioResumida

#region vHIPoder
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vHIPoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field PoderID;	
			public Int_Field OrdenTrabajoID;	
			public Boolean_Field Anterior;	

			public vHIPoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				PoderID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Anterior		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vHIPoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vHIPoder : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vHIPoder";
	
		
		public vHIPoderRow Dat;
		public vHIPoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vHIPoder( DataTable tab ) : base() 
		{
			_dbTableName = "vHIPoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIPoderRow( _dst, false );
			Old = new vHIPoderRow( _dst , true );
		}
		
		
		public vHIPoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vHIPoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIPoderRow( _dst, false );
			Old = new vHIPoderRow( _dst , true );
		}
				
		public vHIPoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vHIPoder() : base() 
		{
			Init();
		}
		
		public vHIPoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vHIPoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "Anterior", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIPoderRow( _dst, false );
			Old = new vHIPoderRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vHIPoderAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vHIPoder

#region vHIPropietario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vHIPropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field PropietarioID;	
			public Int_Field OrdenTrabajoID;	
			public Boolean_Field Anterior;	

			public vHIPropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				PropietarioID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Anterior		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vHIPropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vHIPropietario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vHIPropietario";
	
		
		public vHIPropietarioRow Dat;
		public vHIPropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vHIPropietario( DataTable tab ) : base() 
		{
			_dbTableName = "vHIPropietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIPropietarioRow( _dst, false );
			Old = new vHIPropietarioRow( _dst , true );
		}
		
		
		public vHIPropietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vHIPropietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIPropietarioRow( _dst, false );
			Old = new vHIPropietarioRow( _dst , true );
		}
				
		public vHIPropietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vHIPropietario() : base() 
		{
			Init();
		}
		
		public vHIPropietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vHIPropietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "Anterior", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vHIPropietarioRow( _dst, false );
			Old = new vHIPropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vHIPropietarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vHIPropietario

#region vPoderExpe
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderExpeRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Inscripcion;	
			public String_Field Acta;	
			public String_Field Denominacion;	
			public String_Field Domicilio;	
			public String_Field Concepto;	
			public String_Field Obs;	
			public String_Field Pais;	

			public vPoderExpeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Concepto		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Pais		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vPoderExpeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderExpe : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderExpe";
	
		
		public vPoderExpeRow Dat;
		public vPoderExpeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderExpe( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderExpe";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderExpeRow( _dst, false );
			Old = new vPoderExpeRow( _dst , true );
		}
		
		
		public vPoderExpe( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderExpe";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderExpeRow( _dst, false );
			Old = new vPoderExpeRow( _dst , true );
		}
				
		public vPoderExpe( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderExpe() : base() 
		{
			Init();
		}
		
		public vPoderExpe( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderExpe";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "Concepto", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Pais", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderExpeRow( _dst, false );
			Old = new vPoderExpeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderExpeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderExpe

#region vPoderList
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderListRow 
		{
			private  DSTab _dst;
			
			public Int_Field PoderID;	
			public Int_Field PoderTipoID;	
			public Boolean_Field Nuestra;	
			public String_Field PoderTipo;	
			public Int_Field PropietarioID;	
			public Int_Field PoderdanteID;	
			public String_Field Acta;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field OrdenTrabajoNro;	
			public Int_Field OrdenTrabajoAnio;	
			public String_Field OrdenTrabajo;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public String_Field Inscripcion;	
			public String_Field Poderdante;	
			public String_Field Domicilio;	

			public vPoderListRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				PoderID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PoderTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				PoderTipo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				PoderdanteID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				OrdenTrabajoNro		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				OrdenTrabajoAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				Poderdante		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 17, IsOldDataVersion  );	
			}
		} // end class vPoderListRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderList : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderList";
	
		
		public vPoderListRow Dat;
		public vPoderListRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderList( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderList";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderListRow( _dst, false );
			Old = new vPoderListRow( _dst , true );
		}
		
		
		public vPoderList( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderList";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderListRow( _dst, false );
			Old = new vPoderListRow( _dst , true );
		}
				
		public vPoderList( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderList() : base() 
		{
			Init();
		}
		
		public vPoderList( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderList";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "PoderTipoID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "PoderTipo", typeof( String ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PoderdanteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoNro", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "Poderdante", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderListRow( _dst, false );
			Old = new vPoderListRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderListAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderList

#region vSituacionSigte
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSituacionSigteRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field TramiteID;	
			public String_Field T_Orig;	
			public Int_Field TramiteSitID;	
			public String_Field Origen;	
			public Int_Field TramiteSitSgteID;	
			public String_Field Destino;	

			public vSituacionSigteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				T_Orig		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Origen		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				TramiteSitSgteID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Destino		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vSituacionSigteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSituacionSigte : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSituacionSigte";
	
		
		public vSituacionSigteRow Dat;
		public vSituacionSigteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSituacionSigte( DataTable tab ) : base() 
		{
			_dbTableName = "vSituacionSigte";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionSigteRow( _dst, false );
			Old = new vSituacionSigteRow( _dst , true );
		}
		
		
		public vSituacionSigte( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSituacionSigte";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionSigteRow( _dst, false );
			Old = new vSituacionSigteRow( _dst , true );
		}
				
		public vSituacionSigte( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSituacionSigte() : base() 
		{
			Init();
		}
		
		public vSituacionSigte( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSituacionSigte";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "T_Orig", typeof( String ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "Origen", typeof( String ) );  
			_dt.Columns.Add( "TramiteSitSgteID", typeof( int ) );  
			_dt.Columns.Add( "Destino", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionSigteRow( _dst, false );
			Old = new vSituacionSigteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSituacionSigteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSituacionSigte

#region vExpeCorresp
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeCorrespRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field ReferenciaExterna;	
			public DateTime_Field FechaAlta;	
			public Int_Field CorrespNro;	
			public Int_Field CorrespAnio;	
			public String_Field RefCorresp;	
			public String_Field RefCliente;	
			public String_Field Obs;	

			public vExpeCorrespRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ReferenciaExterna		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				CorrespNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				CorrespAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				RefCorresp		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				RefCliente		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vExpeCorrespRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeCorresp : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeCorresp";
	
		
		public vExpeCorrespRow Dat;
		public vExpeCorrespRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeCorresp( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeCorresp";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeCorrespRow( _dst, false );
			Old = new vExpeCorrespRow( _dst , true );
		}
		
		
		public vExpeCorresp( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeCorresp";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeCorrespRow( _dst, false );
			Old = new vExpeCorrespRow( _dst , true );
		}
				
		public vExpeCorresp( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeCorresp() : base() 
		{
			Init();
		}
		
		public vExpeCorresp( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeCorresp";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ReferenciaExterna", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "CorrespNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespAnio", typeof( int ) );  
			_dt.Columns.Add( "RefCorresp", typeof( String ) );  
			_dt.Columns.Add( "RefCliente", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeCorrespRow( _dst, false );
			Old = new vExpeCorrespRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeCorrespAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeCorresp

#region vExpeEscritoVario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeEscritoVarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public Int_Field DocumentoID;	
			public String_Field Descrip;	
			public DateTime_Field Fecha;	
			public Int_Field DocTipoID;	
			public String_Field DocTipoDescrip;	
			public String_Field DocTipoAbrev;	
			public String_Field IdentifNombre;	
			public Int_Field IdentificadorNro;	
			public Int_Field IdentificadorAnio;	

			public vExpeEscritoVarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				DocumentoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				DocTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				DocTipoDescrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				DocTipoAbrev		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				IdentifNombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				IdentificadorNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				IdentificadorAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vExpeEscritoVarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeEscritoVario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeEscritoVario";
	
		
		public vExpeEscritoVarioRow Dat;
		public vExpeEscritoVarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeEscritoVario( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeEscritoVario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeEscritoVarioRow( _dst, false );
			Old = new vExpeEscritoVarioRow( _dst , true );
		}
		
		
		public vExpeEscritoVario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeEscritoVario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeEscritoVarioRow( _dst, false );
			Old = new vExpeEscritoVarioRow( _dst , true );
		}
				
		public vExpeEscritoVario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeEscritoVario() : base() 
		{
			Init();
		}
		
		public vExpeEscritoVario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeEscritoVario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "DocTipoID", typeof( int ) );  
			_dt.Columns.Add( "DocTipoDescrip", typeof( String ) );  
			_dt.Columns.Add( "DocTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "IdentifNombre", typeof( String ) );  
			_dt.Columns.Add( "IdentificadorNro", typeof( int ) );  
			_dt.Columns.Add( "IdentificadorAnio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeEscritoVarioRow( _dst, false );
			Old = new vExpeEscritoVarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeEscritoVarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeEscritoVario

#region vMerge
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeRow 
		{
			private  DSTab _dst;
			
			public Int_Field expeID;	
			public String_Field HI;	
			public String_Field Tramite;	
			public String_Field Marca;	
			public String_Field Clase;	
			public Int_Field ClaseNro;	
			public String_Field Cliente;	
			public Int_Field ClienteID;	
			public Boolean_Field Gen;	
			public String_Field Url;	
			public Boolean_Field Fin;	
			public Int_Field Link;	
			public Int_Field MergeID;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field MarcaID;	
			public Boolean_Field Nuestra;	
			public DateTime_Field Vencimiento;	

			public vMergeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				expeID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				HI		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Marca		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Cliente		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Gen		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				Url		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Fin		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				Link		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Vencimiento		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
			}
		} // end class vMergeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMerge : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMerge";
	
		
		public vMergeRow Dat;
		public vMergeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMerge( DataTable tab ) : base() 
		{
			_dbTableName = "vMerge";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeRow( _dst, false );
			Old = new vMergeRow( _dst , true );
		}
		
		
		public vMerge( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMerge";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeRow( _dst, false );
			Old = new vMergeRow( _dst , true );
		}
				
		public vMerge( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMerge() : base() 
		{
			Init();
		}
		
		public vMerge( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMerge";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "expeID", typeof( int ) );  
			_dt.Columns.Add( "HI", typeof( String ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "Marca", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "Cliente", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "Gen", typeof( Boolean ) );  
			_dt.Columns.Add( "Url", typeof( String ) );  
			_dt.Columns.Add( "Fin", typeof( Boolean ) );  
			_dt.Columns.Add( "Link", typeof( int ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vencimiento", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeRow( _dst, false );
			Old = new vMergeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMerge

#region vClienteXVia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field ViaID;	
			public String_Field ValorVia;	
			public String_Field DescripcionVia;	

			public vClienteXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ValorVia		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				DescripcionVia		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vClienteXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClienteXVia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClienteXVia";
	
		
		public vClienteXViaRow Dat;
		public vClienteXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClienteXVia( DataTable tab ) : base() 
		{
			_dbTableName = "vClienteXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteXViaRow( _dst, false );
			Old = new vClienteXViaRow( _dst , true );
		}
		
		
		public vClienteXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClienteXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteXViaRow( _dst, false );
			Old = new vClienteXViaRow( _dst , true );
		}
				
		public vClienteXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClienteXVia() : base() 
		{
			Init();
		}
		
		public vClienteXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClienteXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "ValorVia", typeof( String ) );  
			_dt.Columns.Add( "DescripcionVia", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteXViaRow( _dst, false );
			Old = new vClienteXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteXViaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClienteXVia

#region vClienteObs
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteObsRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field AreaID;	
			public String_Field Obs;	
			public String_Field Descrip;	

			public vClienteObsRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vClienteObsRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClienteObs : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClienteObs";
	
		
		public vClienteObsRow Dat;
		public vClienteObsRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClienteObs( DataTable tab ) : base() 
		{
			_dbTableName = "vClienteObs";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteObsRow( _dst, false );
			Old = new vClienteObsRow( _dst , true );
		}
		
		
		public vClienteObs( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClienteObs";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteObsRow( _dst, false );
			Old = new vClienteObsRow( _dst , true );
		}
				
		public vClienteObs( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClienteObs() : base() 
		{
			Init();
		}
		
		public vClienteObs( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClienteObs";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteObsRow( _dst, false );
			Old = new vClienteObsRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteObsAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClienteObs

#region vAtencionXVia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAtencionXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AtencionID;	
			public Int_Field ViaID;	
			public String_Field ValorVia;	
			public String_Field DescripcionVia;	

			public vAtencionXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ValorVia		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				DescripcionVia		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vAtencionXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAtencionXVia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAtencionXVia";
	
		
		public vAtencionXViaRow Dat;
		public vAtencionXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAtencionXVia( DataTable tab ) : base() 
		{
			_dbTableName = "vAtencionXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionXViaRow( _dst, false );
			Old = new vAtencionXViaRow( _dst , true );
		}
		
		
		public vAtencionXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAtencionXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionXViaRow( _dst, false );
			Old = new vAtencionXViaRow( _dst , true );
		}
				
		public vAtencionXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAtencionXVia() : base() 
		{
			Init();
		}
		
		public vAtencionXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAtencionXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "ValorVia", typeof( String ) );  
			_dt.Columns.Add( "DescripcionVia", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionXViaRow( _dst, false );
			Old = new vAtencionXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAtencionXViaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAtencionXVia

#region vMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field Tipo;	
			public String_Field Clase;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Vigente;	
			public String_Field PropNombre;	
			public String_Field PropDir;	
			public String_Field PropPais;	
			public Int_Field RegNro;	
			public Int_Field regAnio;	
			public String_Field Tram;	
			public String_Field Sit;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	

			public vMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				PropNombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				PropDir		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				PropPais		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				RegNro		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				regAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Tram		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				Sit		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarca";
	
		
		public vMarcaRow Dat;
		public vMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRow( _dst, false );
			Old = new vMarcaRow( _dst , true );
		}
		
		
		public vMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRow( _dst, false );
			Old = new vMarcaRow( _dst , true );
		}
				
		public vMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarca() : base() 
		{
			Init();
		}
		
		public vMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "PropNombre", typeof( String ) );  
			_dt.Columns.Add( "PropDir", typeof( String ) );  
			_dt.Columns.Add( "PropPais", typeof( String ) );  
			_dt.Columns.Add( "RegNro", typeof( int ) );  
			_dt.Columns.Add( "regAnio", typeof( int ) );  
			_dt.Columns.Add( "Tram", typeof( String ) );  
			_dt.Columns.Add( "Sit", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRow( _dst, false );
			Old = new vMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarca

#region vPropietarioXVia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioXViaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field ViaID;	
			public String_Field ValorVia;	
			public String_Field DescripcionVia;	

			public vPropietarioXViaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ValorVia		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				DescripcionVia		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vPropietarioXViaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietarioXVia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietarioXVia";
	
		
		public vPropietarioXViaRow Dat;
		public vPropietarioXViaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietarioXVia( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietarioXVia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXViaRow( _dst, false );
			Old = new vPropietarioXViaRow( _dst , true );
		}
		
		
		public vPropietarioXVia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietarioXVia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXViaRow( _dst, false );
			Old = new vPropietarioXViaRow( _dst , true );
		}
				
		public vPropietarioXVia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietarioXVia() : base() 
		{
			Init();
		}
		
		public vPropietarioXVia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietarioXVia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "ValorVia", typeof( String ) );  
			_dt.Columns.Add( "DescripcionVia", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXViaRow( _dst, false );
			Old = new vPropietarioXViaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioXViaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietarioXVia

#region vPropietarioDatos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioDatosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Int_Field GrupoEmpresarialID;	
			public Int_Field CiudadID;	
			public String_Field pais;	
			public String_Field idioma;	
			public String_Field nomciudad;	
			public String_Field grupo;	

			public vPropietarioDatosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				pais		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				nomciudad		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				grupo		= new String_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class vPropietarioDatosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietarioDatos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietarioDatos";
	
		
		public vPropietarioDatosRow Dat;
		public vPropietarioDatosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietarioDatos( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietarioDatos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioDatosRow( _dst, false );
			Old = new vPropietarioDatosRow( _dst , true );
		}
		
		
		public vPropietarioDatos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietarioDatos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioDatosRow( _dst, false );
			Old = new vPropietarioDatosRow( _dst , true );
		}
				
		public vPropietarioDatos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietarioDatos() : base() 
		{
			Init();
		}
		
		public vPropietarioDatos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietarioDatos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			_dt.Columns.Add( "pais", typeof( String ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "nomciudad", typeof( String ) );  
			_dt.Columns.Add( "grupo", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioDatosRow( _dst, false );
			Old = new vPropietarioDatosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioDatosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietarioDatos

#region vPropietarioXPoder
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioXPoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field PoderID;	
			public String_Field nombre;	
			public String_Field direccion;	
			public DateTime_Field fechaalta;	
			public String_Field pais;	
			public String_Field grupo;	

			public vPropietarioXPoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PoderID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				direccion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				fechaalta		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				pais		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				grupo		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vPropietarioXPoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietarioXPoder : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietarioXPoder";
	
		
		public vPropietarioXPoderRow Dat;
		public vPropietarioXPoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietarioXPoder( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietarioXPoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXPoderRow( _dst, false );
			Old = new vPropietarioXPoderRow( _dst , true );
		}
		
		
		public vPropietarioXPoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietarioXPoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXPoderRow( _dst, false );
			Old = new vPropietarioXPoderRow( _dst , true );
		}
				
		public vPropietarioXPoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietarioXPoder() : base() 
		{
			Init();
		}
		
		public vPropietarioXPoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietarioXPoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "direccion", typeof( String ) );  
			_dt.Columns.Add( "fechaalta", typeof( DateTime ) );  
			_dt.Columns.Add( "pais", typeof( String ) );  
			_dt.Columns.Add( "grupo", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXPoderRow( _dst, false );
			Old = new vPropietarioXPoderRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioXPoderAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietarioXPoder

#region vClienteXUsuario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteXUsuarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field UsuarioID;	
			public String_Field Nombre;	
			public String_Field email;	

			public vClienteXUsuarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				UsuarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				email		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vClienteXUsuarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClienteXUsuario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClienteXUsuario";
	
		
		public vClienteXUsuarioRow Dat;
		public vClienteXUsuarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClienteXUsuario( DataTable tab ) : base() 
		{
			_dbTableName = "vClienteXUsuario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteXUsuarioRow( _dst, false );
			Old = new vClienteXUsuarioRow( _dst , true );
		}
		
		
		public vClienteXUsuario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClienteXUsuario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteXUsuarioRow( _dst, false );
			Old = new vClienteXUsuarioRow( _dst , true );
		}
				
		public vClienteXUsuario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClienteXUsuario() : base() 
		{
			Init();
		}
		
		public vClienteXUsuario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClienteXUsuario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "UsuarioID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "email", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteXUsuarioRow( _dst, false );
			Old = new vClienteXUsuarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteXUsuarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClienteXUsuario

#region vAgenteLocalDatos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAgenteLocalDatosRow 
		{
			private  DSTab _dst;
			
			public Int_Field idagloc;	
			public Int_Field identidad;	
			public Int_Field idestado;	
			public Int_Field nromatricula;	
			public String_Field obs;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public Int_Field GrupoID;	
			public Boolean_Field Nuestro;	
			public String_Field estudio;	

			public vAgenteLocalDatosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				idagloc		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				identidad		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				idestado		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nromatricula		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				GrupoID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Nuestro		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				estudio		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vAgenteLocalDatosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAgenteLocalDatos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAgenteLocalDatos";
	
		
		public vAgenteLocalDatosRow Dat;
		public vAgenteLocalDatosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAgenteLocalDatos( DataTable tab ) : base() 
		{
			_dbTableName = "vAgenteLocalDatos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteLocalDatosRow( _dst, false );
			Old = new vAgenteLocalDatosRow( _dst , true );
		}
		
		
		public vAgenteLocalDatos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAgenteLocalDatos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteLocalDatosRow( _dst, false );
			Old = new vAgenteLocalDatosRow( _dst , true );
		}
				
		public vAgenteLocalDatos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAgenteLocalDatos() : base() 
		{
			Init();
		}
		
		public vAgenteLocalDatos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAgenteLocalDatos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "idagloc", typeof( int ) );  
			_dt.Columns.Add( "identidad", typeof( int ) );  
			_dt.Columns.Add( "idestado", typeof( int ) );  
			_dt.Columns.Add( "nromatricula", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "GrupoID", typeof( int ) );  
			_dt.Columns.Add( "Nuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "estudio", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteLocalDatosRow( _dst, false );
			Old = new vAgenteLocalDatosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAgenteLocalDatosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAgenteLocalDatos

#region vCliente
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field PaisAlfa;	
			public String_Field Direccion;	
			public String_Field Obs;	

			public vClienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				PaisAlfa		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vClienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCliente : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCliente";
	
		
		public vClienteRow Dat;
		public vClienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCliente( DataTable tab ) : base() 
		{
			_dbTableName = "vCliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteRow( _dst, false );
			Old = new vClienteRow( _dst , true );
		}
		
		
		public vCliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteRow( _dst, false );
			Old = new vClienteRow( _dst , true );
		}
				
		public vCliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCliente() : base() 
		{
			Init();
		}
		
		public vCliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "PaisAlfa", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteRow( _dst, false );
			Old = new vClienteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCliente

#region vAviso
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaAviso;	
			public Boolean_Field Pendiente;	
			public String_Field Asunto;	
			public String_Field Contenido;	
			public Int_Field Remitente;	
			public Int_Field Destinatario;	
			public String_Field Indicaciones;	
			public String_Field Origen;	
			public String_Field Destino;	
			public Boolean_Field Leido;	
			public Int_Field PrioridadID;	

			public vAvisoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				FechaAviso		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				Pendiente		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				Asunto		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Contenido		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Remitente		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Destinatario		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Indicaciones		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Origen		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Destino		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Leido		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				PrioridadID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vAvisoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAviso : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAviso";
	
		
		public vAvisoRow Dat;
		public vAvisoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAviso( DataTable tab ) : base() 
		{
			_dbTableName = "vAviso";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoRow( _dst, false );
			Old = new vAvisoRow( _dst , true );
		}
		
		
		public vAviso( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAviso";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoRow( _dst, false );
			Old = new vAvisoRow( _dst , true );
		}
				
		public vAviso( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAviso() : base() 
		{
			Init();
		}
		
		public vAviso( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAviso";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaAviso", typeof( DateTime ) );  
			_dt.Columns.Add( "Pendiente", typeof( Boolean ) );  
			_dt.Columns.Add( "Asunto", typeof( String ) );  
			_dt.Columns.Add( "Contenido", typeof( String ) );  
			_dt.Columns.Add( "Remitente", typeof( int ) );  
			_dt.Columns.Add( "Destinatario", typeof( int ) );  
			_dt.Columns.Add( "Indicaciones", typeof( String ) );  
			_dt.Columns.Add( "Origen", typeof( String ) );  
			_dt.Columns.Add( "Destino", typeof( String ) );  
			_dt.Columns.Add( "Leido", typeof( Boolean ) );  
			_dt.Columns.Add( "PrioridadID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoRow( _dst, false );
			Old = new vAvisoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAviso

#region vPropietario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Direccion;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Int_Field GrupoEmpresarialID;	
			public Int_Field CiudadID;	

			public vPropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vPropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietario";
	
		
		public vPropietarioRow Dat;
		public vPropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietario( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioRow( _dst, false );
			Old = new vPropietarioRow( _dst , true );
		}
		
		
		public vPropietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioRow( _dst, false );
			Old = new vPropietarioRow( _dst , true );
		}
				
		public vPropietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietario() : base() 
		{
			Init();
		}
		
		public vPropietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioRow( _dst, false );
			Old = new vPropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietario

#region vAgenteBerke
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAgenteBerkeRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field NroMatricula;	
			public String_Field nombre;	

			public vAgenteBerkeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				NroMatricula		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vAgenteBerkeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAgenteBerke : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAgenteBerke";
	
		
		public vAgenteBerkeRow Dat;
		public vAgenteBerkeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAgenteBerke( DataTable tab ) : base() 
		{
			_dbTableName = "vAgenteBerke";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteBerkeRow( _dst, false );
			Old = new vAgenteBerkeRow( _dst , true );
		}
		
		
		public vAgenteBerke( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAgenteBerke";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteBerkeRow( _dst, false );
			Old = new vAgenteBerkeRow( _dst , true );
		}
				
		public vAgenteBerke( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAgenteBerke() : base() 
		{
			Init();
		}
		
		public vAgenteBerke( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAgenteBerke";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "NroMatricula", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteBerkeRow( _dst, false );
			Old = new vAgenteBerkeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAgenteBerkeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAgenteBerke

#region vAgenteLocal
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAgenteLocalRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public Int_Field NroMatricula;	

			public vAgenteLocalRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				NroMatricula		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vAgenteLocalRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAgenteLocal : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAgenteLocal";
	
		
		public vAgenteLocalRow Dat;
		public vAgenteLocalRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAgenteLocal( DataTable tab ) : base() 
		{
			_dbTableName = "vAgenteLocal";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteLocalRow( _dst, false );
			Old = new vAgenteLocalRow( _dst , true );
		}
		
		
		public vAgenteLocal( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAgenteLocal";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteLocalRow( _dst, false );
			Old = new vAgenteLocalRow( _dst , true );
		}
				
		public vAgenteLocal( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAgenteLocal() : base() 
		{
			Init();
		}
		
		public vAgenteLocal( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAgenteLocal";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "NroMatricula", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAgenteLocalRow( _dst, false );
			Old = new vAgenteLocalRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAgenteLocalAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAgenteLocal

#region vExpeSituacion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeSituacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field TramiteSitID;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field SituacionFecha;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field FuncionarioID;	
			public String_Field Obs;	
			public String_Field Datos;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public String_Field Nombre;	
			public Int_Field Orden;	
			public Boolean_Field SitStandBy;	

			public vExpeSituacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Datos		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Orden		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				SitStandBy		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vExpeSituacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeSituacion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeSituacion";
	
		
		public vExpeSituacionRow Dat;
		public vExpeSituacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeSituacion( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeSituacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeSituacionRow( _dst, false );
			Old = new vExpeSituacionRow( _dst , true );
		}
		
		
		public vExpeSituacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeSituacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeSituacionRow( _dst, false );
			Old = new vExpeSituacionRow( _dst , true );
		}
				
		public vExpeSituacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeSituacion() : base() 
		{
			Init();
		}
		
		public vExpeSituacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeSituacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Datos", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Orden", typeof( int ) );  
			_dt.Columns.Add( "SitStandBy", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeSituacionRow( _dst, false );
			Old = new vExpeSituacionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeSituacionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeSituacion

#region vMaxBoletinFecha
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMaxBoletinFechaRow 
		{
			private  DSTab _dst;
			
			public DateTime_Field Fecha;	

			public vMaxBoletinFechaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Fecha		= new DateTime_Field(	_dst, 0, IsOldDataVersion  );	
			}
		} // end class vMaxBoletinFechaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMaxBoletinFecha : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMaxBoletinFecha";
	
		
		public vMaxBoletinFechaRow Dat;
		public vMaxBoletinFechaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMaxBoletinFecha( DataTable tab ) : base() 
		{
			_dbTableName = "vMaxBoletinFecha";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMaxBoletinFechaRow( _dst, false );
			Old = new vMaxBoletinFechaRow( _dst , true );
		}
		
		
		public vMaxBoletinFecha( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMaxBoletinFecha";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMaxBoletinFechaRow( _dst, false );
			Old = new vMaxBoletinFechaRow( _dst , true );
		}
				
		public vMaxBoletinFecha( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMaxBoletinFecha() : base() 
		{
			Init();
		}
		
		public vMaxBoletinFecha( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMaxBoletinFecha";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMaxBoletinFechaRow( _dst, false );
			Old = new vMaxBoletinFechaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMaxBoletinFechaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMaxBoletinFecha

#region vInstruccion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaID;	
			public Int_Field ExpedienteID;	
			public Int_Field CorrespondenciaMovID;	
			public Int_Field InstruccionTipoID;	
			public DateTime_Field Fecha;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Int_Field CorrespNro;	
			public Int_Field CorrespAnio;	
			public DateTime_Field CorrespFechaAlta;	
			public String_Field Obs;	
			public Int_Field FuncionarioID;	
			public String_Field userName;	
			public String_Field Nick;	

			public vInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				CorrespondenciaMovID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Fecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				CorrespNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				CorrespAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				CorrespFechaAlta		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				userName		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				Nick		= new String_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vInstruccion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vInstruccion";
	
		
		public vInstruccionRow Dat;
		public vInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "vInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vInstruccionRow( _dst, false );
			Old = new vInstruccionRow( _dst , true );
		}
		
		
		public vInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vInstruccionRow( _dst, false );
			Old = new vInstruccionRow( _dst , true );
		}
				
		public vInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vInstruccion() : base() 
		{
			Init();
		}
		
		public vInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaMovID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "CorrespNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespAnio", typeof( int ) );  
			_dt.Columns.Add( "CorrespFechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "userName", typeof( String ) );  
			_dt.Columns.Add( "Nick", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vInstruccionRow( _dst, false );
			Old = new vInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vInstruccionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vInstruccion

#region vMergeOrdenT
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeOrdenTRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field expedienteid;	
			public Int_Field mergeid;	
			public Int_Field tramiteid;	
			public Boolean_Field generado;	
			public Int_Field ordentrabajoID;	

			public vMergeOrdenTRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				ordentrabajoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vMergeOrdenTRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeOrdenT : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeOrdenT";
	
		
		public vMergeOrdenTRow Dat;
		public vMergeOrdenTRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeOrdenT( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeOrdenT";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeOrdenTRow( _dst, false );
			Old = new vMergeOrdenTRow( _dst , true );
		}
		
		
		public vMergeOrdenT( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeOrdenT";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeOrdenTRow( _dst, false );
			Old = new vMergeOrdenTRow( _dst , true );
		}
				
		public vMergeOrdenT( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeOrdenT() : base() 
		{
			Init();
		}
		
		public vMergeOrdenT( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeOrdenT";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "ordentrabajoID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeOrdenTRow( _dst, false );
			Old = new vMergeOrdenTRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeOrdenTAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeOrdenT

#region vPoderesPropietario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderesPropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field propietarioid;	
			public Int_Field id;	
			public Int_Field actanro;	
			public String_Field inscripcion;	
			public String_Field denominacion;	
			public String_Field domicilio;	
			public Int_Field paisid;	
			public String_Field descrip;	

			public vPoderesPropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				propietarioid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				id		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				actanro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				inscripcion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				domicilio		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				paisid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vPoderesPropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderesPropietario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderesPropietario";
	
		
		public vPoderesPropietarioRow Dat;
		public vPoderesPropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderesPropietario( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderesPropietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderesPropietarioRow( _dst, false );
			Old = new vPoderesPropietarioRow( _dst , true );
		}
		
		
		public vPoderesPropietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderesPropietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderesPropietarioRow( _dst, false );
			Old = new vPoderesPropietarioRow( _dst , true );
		}
				
		public vPoderesPropietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderesPropietario() : base() 
		{
			Init();
		}
		
		public vPoderesPropietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderesPropietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "propietarioid", typeof( int ) );  
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "actanro", typeof( int ) );  
			_dt.Columns.Add( "inscripcion", typeof( String ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "domicilio", typeof( String ) );  
			_dt.Columns.Add( "paisid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderesPropietarioRow( _dst, false );
			Old = new vPoderesPropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderesPropietarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderesPropietario

#region vMergeCliente
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeClienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field expedienteid;	
			public Int_Field mergeid;	
			public Int_Field tramiteid;	
			public Boolean_Field generado;	
			public Int_Field clienteid;	

			public vMergeClienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vMergeClienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeCliente : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeCliente";
	
		
		public vMergeClienteRow Dat;
		public vMergeClienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeCliente( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeCliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeClienteRow( _dst, false );
			Old = new vMergeClienteRow( _dst , true );
		}
		
		
		public vMergeCliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeCliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeClienteRow( _dst, false );
			Old = new vMergeClienteRow( _dst , true );
		}
				
		public vMergeCliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeCliente() : base() 
		{
			Init();
		}
		
		public vMergeCliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeCliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeClienteRow( _dst, false );
			Old = new vMergeClienteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeClienteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeCliente

#region vBoletin
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBoletinRow 
		{
			private  DSTab _dst;
			
			public Int_Field BolAnio;	
			public Int_Field BoletinID;	
			public Int_Field BolNro;	

			public vBoletinRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				BolAnio		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BoletinID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vBoletinRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBoletin : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBoletin";
	
		
		public vBoletinRow Dat;
		public vBoletinRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBoletin( DataTable tab ) : base() 
		{
			_dbTableName = "vBoletin";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinRow( _dst, false );
			Old = new vBoletinRow( _dst , true );
		}
		
		
		public vBoletin( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBoletin";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinRow( _dst, false );
			Old = new vBoletinRow( _dst , true );
		}
				
		public vBoletin( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBoletin() : base() 
		{
			Init();
		}
		
		public vBoletin( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBoletin";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BoletinID", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinRow( _dst, false );
			Old = new vBoletinRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBoletinAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBoletin

#region vPreMerge
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPreMergeRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field expedienteid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	
			public Boolean_Field terminado;	
			public Int_Field funcionarioid;	
			public Int_Field tramiteid;	
			public DateTime_Field fecha;	
			public Int_Field expedienteIDPadre;	
			public Boolean_Field anulado;	
			public Boolean_Field entramite;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field clienteID;	
			public Int_Field registronro;	
			public Int_Field registroanio;	
			public Int_Field nro;	
			public Int_Field anio;	
			public Int_Field atencionid;	
			public Int_Field ordentrabajoid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public DateTime_Field fechacorresp;	

			public vPreMergeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				terminado		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				funcionarioid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				fecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				expedienteIDPadre		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				anulado		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				entramite		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				clienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				registronro		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				registroanio		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				ordentrabajoid		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				fechacorresp		= new DateTime_Field(	_dst, 27, IsOldDataVersion  );	
			}
		} // end class vPreMergeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPreMerge : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPreMerge";
	
		
		public vPreMergeRow Dat;
		public vPreMergeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPreMerge( DataTable tab ) : base() 
		{
			_dbTableName = "vPreMerge";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeRow( _dst, false );
			Old = new vPreMergeRow( _dst , true );
		}
		
		
		public vPreMerge( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPreMerge";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeRow( _dst, false );
			Old = new vPreMergeRow( _dst , true );
		}
				
		public vPreMerge( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPreMerge() : base() 
		{
			Init();
		}
		
		public vPreMerge( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPreMerge";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			_dt.Columns.Add( "terminado", typeof( Boolean ) );  
			_dt.Columns.Add( "funcionarioid", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "expedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "entramite", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "clienteID", typeof( int ) );  
			_dt.Columns.Add( "registronro", typeof( int ) );  
			_dt.Columns.Add( "registroanio", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "ordentrabajoid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "fechacorresp", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeRow( _dst, false );
			Old = new vPreMergeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPreMergeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPreMerge

#region vcd_registros_duplicados
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_registros_duplicadosRow 
		{
			private  DSTab _dst;
			
			public Int_Field registronro;	
			public Int_Field Column1;	

			public vcd_registros_duplicadosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				registronro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Column1		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class vcd_registros_duplicadosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_registros_duplicados : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_registros_duplicados";
	
		
		public vcd_registros_duplicadosRow Dat;
		public vcd_registros_duplicadosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_registros_duplicados( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_registros_duplicados";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_registros_duplicadosRow( _dst, false );
			Old = new vcd_registros_duplicadosRow( _dst , true );
		}
		
		
		public vcd_registros_duplicados( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_registros_duplicados";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_registros_duplicadosRow( _dst, false );
			Old = new vcd_registros_duplicadosRow( _dst , true );
		}
				
		public vcd_registros_duplicados( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_registros_duplicados() : base() 
		{
			Init();
		}
		
		public vcd_registros_duplicados( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_registros_duplicados";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "registronro", typeof( int ) );  
			_dt.Columns.Add( "Column1", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_registros_duplicadosRow( _dst, false );
			Old = new vcd_registros_duplicadosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_registros_duplicadosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_registros_duplicados

#region vMergePresCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergePresCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field clienteid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public Boolean_Field multiple;	
			public Boolean_Field traduccionauto;	
			public Int_Field paisid;	
			public String_Field nompais;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public Int_Field atencionid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	

			public vMergePresCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				clienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				traduccionauto		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				paisid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				nompais		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vMergePresCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergePresCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergePresCab";
	
		
		public vMergePresCabRow Dat;
		public vMergePresCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergePresCab( DataTable tab ) : base() 
		{
			_dbTableName = "vMergePresCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresCabRow( _dst, false );
			Old = new vMergePresCabRow( _dst , true );
		}
		
		
		public vMergePresCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergePresCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresCabRow( _dst, false );
			Old = new vMergePresCabRow( _dst , true );
		}
				
		public vMergePresCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergePresCab() : base() 
		{
			Init();
		}
		
		public vMergePresCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergePresCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "traduccionauto", typeof( Boolean ) );  
			_dt.Columns.Add( "paisid", typeof( int ) );  
			_dt.Columns.Add( "nompais", typeof( String ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresCabRow( _dst, false );
			Old = new vMergePresCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergePresCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergePresCab

#region vRepVencidas
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRepVencidasRow 
		{
			private  DSTab _dst;
			
			public Int_Field MergeConsID;	
			public DateTime_Field fechainf;	
			public DateTime_Field fechasup;	
			public DateTime_Field consultafecha;	
			public Int_Field MergeCabID;	
			public String_Field envioModo;	
			public DateTime_Field envioFecha;	
			public Int_Field MergeID;	
			public Int_Field MergeDocID;	
			public Int_Field ClienteID;	
			public Int_Field MergeDetID;	
			public Int_Field ExpedienteID;	
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field ClienteNombre;	
			public String_Field propietarioNombre;	
			public String_Field idiomaAbrev;	
			public String_Field idiomaDescrip;	
			public DateTime_Field Vencimientofecha;	
			public Int_Field RegistroNro;	
			public Int_Field ClaseNro;	
			public String_Field marcaTipo;	

			public vRepVencidasRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MergeConsID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fechainf		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				fechasup		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				consultafecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				MergeCabID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				envioModo		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				envioFecha		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				MergeDocID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				MergeDetID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				propietarioNombre		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				idiomaAbrev		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				idiomaDescrip		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				Vencimientofecha		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				marcaTipo		= new String_Field(	_dst, 21, IsOldDataVersion  );	
			}
		} // end class vRepVencidasRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRepVencidas : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRepVencidas";
	
		
		public vRepVencidasRow Dat;
		public vRepVencidasRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRepVencidas( DataTable tab ) : base() 
		{
			_dbTableName = "vRepVencidas";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRepVencidasRow( _dst, false );
			Old = new vRepVencidasRow( _dst , true );
		}
		
		
		public vRepVencidas( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRepVencidas";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRepVencidasRow( _dst, false );
			Old = new vRepVencidasRow( _dst , true );
		}
				
		public vRepVencidas( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRepVencidas() : base() 
		{
			Init();
		}
		
		public vRepVencidas( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRepVencidas";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MergeConsID", typeof( int ) );  
			_dt.Columns.Add( "fechainf", typeof( DateTime ) );  
			_dt.Columns.Add( "fechasup", typeof( DateTime ) );  
			_dt.Columns.Add( "consultafecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MergeCabID", typeof( int ) );  
			_dt.Columns.Add( "envioModo", typeof( String ) );  
			_dt.Columns.Add( "envioFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "MergeDocID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "MergeDetID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "propietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "idiomaAbrev", typeof( String ) );  
			_dt.Columns.Add( "idiomaDescrip", typeof( String ) );  
			_dt.Columns.Add( "Vencimientofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "marcaTipo", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRepVencidasRow( _dst, false );
			Old = new vRepVencidasRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRepVencidasAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRepVencidas

#region vcd_actas_duplicadas
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_actas_duplicadasRow 
		{
			private  DSTab _dst;
			
			public Int_Field actaanio;	
			public Int_Field actanro;	
			public Int_Field cnt;	

			public vcd_actas_duplicadasRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				actaanio		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				actanro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				cnt		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vcd_actas_duplicadasRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_actas_duplicadas : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_actas_duplicadas";
	
		
		public vcd_actas_duplicadasRow Dat;
		public vcd_actas_duplicadasRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_actas_duplicadas( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_actas_duplicadas";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_actas_duplicadasRow( _dst, false );
			Old = new vcd_actas_duplicadasRow( _dst , true );
		}
		
		
		public vcd_actas_duplicadas( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_actas_duplicadas";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_actas_duplicadasRow( _dst, false );
			Old = new vcd_actas_duplicadasRow( _dst , true );
		}
				
		public vcd_actas_duplicadas( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_actas_duplicadas() : base() 
		{
			Init();
		}
		
		public vcd_actas_duplicadas( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_actas_duplicadas";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "actaanio", typeof( int ) );  
			_dt.Columns.Add( "actanro", typeof( int ) );  
			_dt.Columns.Add( "cnt", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_actas_duplicadasRow( _dst, false );
			Old = new vcd_actas_duplicadasRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_actas_duplicadasAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_actas_duplicadas

#region vMergePresDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergePresDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field expedienteid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	
			public Boolean_Field terminado;	
			public Int_Field funcionarioid;	
			public Int_Field tramiteid;	
			public DateTime_Field fecha;	
			public Int_Field expedienteIDPadre;	
			public Boolean_Field anulado;	
			public Boolean_Field entramite;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field clienteID;	
			public DateTime_Field presentacionfecha;	
			public Int_Field registronro;	
			public Int_Field registroanio;	
			public Int_Field nro;	
			public Int_Field anio;	
			public Int_Field atencionid;	
			public Int_Field ordentrabajoid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public DateTime_Field fechacorresp;	
			public Int_Field nropresupuesto;	

			public vMergePresDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				terminado		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				funcionarioid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				fecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				expedienteIDPadre		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				anulado		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				entramite		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				clienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				presentacionfecha		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				registronro		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				registroanio		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				ordentrabajoid		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				fechacorresp		= new DateTime_Field(	_dst, 28, IsOldDataVersion  );	
				nropresupuesto		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
			}
		} // end class vMergePresDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergePresDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergePresDet";
	
		
		public vMergePresDetRow Dat;
		public vMergePresDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergePresDet( DataTable tab ) : base() 
		{
			_dbTableName = "vMergePresDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresDetRow( _dst, false );
			Old = new vMergePresDetRow( _dst , true );
		}
		
		
		public vMergePresDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergePresDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresDetRow( _dst, false );
			Old = new vMergePresDetRow( _dst , true );
		}
				
		public vMergePresDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergePresDet() : base() 
		{
			Init();
		}
		
		public vMergePresDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergePresDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			_dt.Columns.Add( "terminado", typeof( Boolean ) );  
			_dt.Columns.Add( "funcionarioid", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "expedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "entramite", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "clienteID", typeof( int ) );  
			_dt.Columns.Add( "presentacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "registronro", typeof( int ) );  
			_dt.Columns.Add( "registroanio", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "ordentrabajoid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "fechacorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "nropresupuesto", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresDetRow( _dst, false );
			Old = new vMergePresDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergePresDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergePresDet

#region vPresupuestos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPresupuestosRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public DateTime_Field fecha;	
			public Binary_Field contenido;	
			public Int_Field funcionarioid;	
			public String_Field serie;	
			public Int_Field nropresupuesto;	
			public Int_Field anio;	
			public Boolean_Field anulado;	
			public DateTime_Field fechaanulacion;	
			public Int_Field mergeid;	
			public String_Field obs;	
			public String_Field usuario;	

			public vPresupuestosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				contenido		= new Binary_Field(	_dst, 2, IsOldDataVersion  );	
				funcionarioid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				serie		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				nropresupuesto		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				anulado		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				fechaanulacion		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				usuario		= new String_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class vPresupuestosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPresupuestos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPresupuestos";
	
		
		public vPresupuestosRow Dat;
		public vPresupuestosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPresupuestos( DataTable tab ) : base() 
		{
			_dbTableName = "vPresupuestos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPresupuestosRow( _dst, false );
			Old = new vPresupuestosRow( _dst , true );
		}
		
		
		public vPresupuestos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPresupuestos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPresupuestosRow( _dst, false );
			Old = new vPresupuestosRow( _dst , true );
		}
				
		public vPresupuestos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPresupuestos() : base() 
		{
			Init();
		}
		
		public vPresupuestos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPresupuestos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "contenido", typeof( Byte[] ) );  
			_dt.Columns.Add( "funcionarioid", typeof( int ) );  
			_dt.Columns.Add( "serie", typeof( String ) );  
			_dt.Columns.Add( "nropresupuesto", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "anulado", typeof( Boolean ) );  
			_dt.Columns.Add( "fechaanulacion", typeof( DateTime ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "usuario", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPresupuestosRow( _dst, false );
			Old = new vPresupuestosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPresupuestosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPresupuestos

#region vcd_marcadf
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_marcadfRow 
		{
			private  DSTab _dst;
			
			public Decimal_Field regac2;	
			public Decimal_Field nroac1;	
			public Decimal_Field nroac2;	
			public Decimal_Field regan2;	

			public vcd_marcadfRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				regac2		= new Decimal_Field(	_dst, 0, IsOldDataVersion  );	
				nroac1		= new Decimal_Field(	_dst, 1, IsOldDataVersion  );	
				nroac2		= new Decimal_Field(	_dst, 2, IsOldDataVersion  );	
				regan2		= new Decimal_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vcd_marcadfRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_marcadf : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_marcadf";
	
		
		public vcd_marcadfRow Dat;
		public vcd_marcadfRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_marcadf( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_marcadf";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_marcadfRow( _dst, false );
			Old = new vcd_marcadfRow( _dst , true );
		}
		
		
		public vcd_marcadf( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_marcadf";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_marcadfRow( _dst, false );
			Old = new vcd_marcadfRow( _dst , true );
		}
				
		public vcd_marcadf( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_marcadf() : base() 
		{
			Init();
		}
		
		public vcd_marcadf( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_marcadf";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "regac2", typeof( Decimal ) );  
			_dt.Columns.Add( "nroac1", typeof( Decimal ) );  
			_dt.Columns.Add( "nroac2", typeof( Decimal ) );  
			_dt.Columns.Add( "regan2", typeof( Decimal ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_marcadfRow( _dst, false );
			Old = new vcd_marcadfRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_marcadfAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_marcadf

#region vMergePresXMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergePresXMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ordentrabajoid;	
			public Int_Field nro;	
			public Int_Field anio;	
			public Int_Field atencionid;	
			public String_Field refcorr;	
			public String_Field refcliente;	
			public Int_Field clienteid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public Boolean_Field multiple;	
			public Boolean_Field traduccionauto;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public Int_Field atencionid1;	
			public DateTime_Field fechacorresp;	
			public Int_Field nrocorresp;	
			public Int_Field aniocorresp;	
			public Int_Field meid;	
			public Int_Field tramiteid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	
			public Int_Field marcaid;	
			public String_Field denominacion;	

			public vMergePresXMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ordentrabajoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				refcorr		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				refcliente		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				traduccionauto		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				atencionid1		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				fechacorresp		= new DateTime_Field(	_dst, 16, IsOldDataVersion  );	
				nrocorresp		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				aniocorresp		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				meid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				marcaid		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 25, IsOldDataVersion  );	
			}
		} // end class vMergePresXMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergePresXMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergePresXMarca";
	
		
		public vMergePresXMarcaRow Dat;
		public vMergePresXMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergePresXMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vMergePresXMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresXMarcaRow( _dst, false );
			Old = new vMergePresXMarcaRow( _dst , true );
		}
		
		
		public vMergePresXMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergePresXMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresXMarcaRow( _dst, false );
			Old = new vMergePresXMarcaRow( _dst , true );
		}
				
		public vMergePresXMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergePresXMarca() : base() 
		{
			Init();
		}
		
		public vMergePresXMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergePresXMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ordentrabajoid", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "refcorr", typeof( String ) );  
			_dt.Columns.Add( "refcliente", typeof( String ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "traduccionauto", typeof( Boolean ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "atencionid1", typeof( int ) );  
			_dt.Columns.Add( "fechacorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "nrocorresp", typeof( int ) );  
			_dt.Columns.Add( "aniocorresp", typeof( int ) );  
			_dt.Columns.Add( "meid", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergePresXMarcaRow( _dst, false );
			Old = new vMergePresXMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergePresXMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergePresXMarca

#region vMergeVencCabDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeVencCabDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MergeVencimientoConsID;	
			public String_Field envioModo;	
			public DateTime_Field enviofecha;	
			public Int_Field MergeID;	
			public Int_Field MergeDocID;	
			public Int_Field ClienteID;	
			public Int_Field MergeDetID;	
			public Int_Field ExpedienteID;	

			public vMergeVencCabDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MergeVencimientoConsID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				envioModo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				enviofecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				MergeID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MergeDocID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				MergeDetID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class vMergeVencCabDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeVencCabDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeVencCabDet";
	
		
		public vMergeVencCabDetRow Dat;
		public vMergeVencCabDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeVencCabDet( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeVencCabDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeVencCabDetRow( _dst, false );
			Old = new vMergeVencCabDetRow( _dst , true );
		}
		
		
		public vMergeVencCabDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeVencCabDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeVencCabDetRow( _dst, false );
			Old = new vMergeVencCabDetRow( _dst , true );
		}
				
		public vMergeVencCabDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeVencCabDet() : base() 
		{
			Init();
		}
		
		public vMergeVencCabDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeVencCabDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MergeVencimientoConsID", typeof( int ) );  
			_dt.Columns.Add( "envioModo", typeof( String ) );  
			_dt.Columns.Add( "enviofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MergeID", typeof( int ) );  
			_dt.Columns.Add( "MergeDocID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "MergeDetID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeVencCabDetRow( _dst, false );
			Old = new vMergeVencCabDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeVencCabDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeVencCabDet

#region vcd_expecampo
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_expecampoRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field nomact;	
			public String_Field diract;	
			public String_Field paisact;	
			public String_Field nomant;	
			public String_Field dirant;	
			public Int_Field propidant;	
			public String_Field paisant;	

			public vcd_expecampoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nomact		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				diract		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				paisact		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				nomant		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				dirant		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				propidant		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				paisant		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vcd_expecampoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_expecampo : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_expecampo";
	
		
		public vcd_expecampoRow Dat;
		public vcd_expecampoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_expecampo( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_expecampo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_expecampoRow( _dst, false );
			Old = new vcd_expecampoRow( _dst , true );
		}
		
		
		public vcd_expecampo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_expecampo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_expecampoRow( _dst, false );
			Old = new vcd_expecampoRow( _dst , true );
		}
				
		public vcd_expecampo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_expecampo() : base() 
		{
			Init();
		}
		
		public vcd_expecampo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_expecampo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "nomact", typeof( String ) );  
			_dt.Columns.Add( "diract", typeof( String ) );  
			_dt.Columns.Add( "paisact", typeof( String ) );  
			_dt.Columns.Add( "nomant", typeof( String ) );  
			_dt.Columns.Add( "dirant", typeof( String ) );  
			_dt.Columns.Add( "propidant", typeof( int ) );  
			_dt.Columns.Add( "paisant", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_expecampoRow( _dst, false );
			Old = new vcd_expecampoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_expecampoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_expecampo

#region vcd_ren7ma8va
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_ren7ma8vaRow 
		{
			private  DSTab _dst;
			
			public Int_Field marcaid;	
			public Int_Field expedienteid;	

			public vcd_ren7ma8vaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				marcaid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class vcd_ren7ma8vaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_ren7ma8va : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_ren7ma8va";
	
		
		public vcd_ren7ma8vaRow Dat;
		public vcd_ren7ma8vaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_ren7ma8va( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_ren7ma8va";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_ren7ma8vaRow( _dst, false );
			Old = new vcd_ren7ma8vaRow( _dst , true );
		}
		
		
		public vcd_ren7ma8va( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_ren7ma8va";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_ren7ma8vaRow( _dst, false );
			Old = new vcd_ren7ma8vaRow( _dst , true );
		}
				
		public vcd_ren7ma8va( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_ren7ma8va() : base() 
		{
			Init();
		}
		
		public vcd_ren7ma8va( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_ren7ma8va";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_ren7ma8vaRow( _dst, false );
			Old = new vcd_ren7ma8vaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_ren7ma8vaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_ren7ma8va

#region vcd_auditexpe
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_auditexpeRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field marcaregrenid;	
			public Int_Field marcaid;	
			public Int_Field numfecha;	

			public vcd_auditexpeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				marcaregrenid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				marcaid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				numfecha		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vcd_auditexpeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_auditexpe : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_auditexpe";
	
		
		public vcd_auditexpeRow Dat;
		public vcd_auditexpeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_auditexpe( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_auditexpe";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditexpeRow( _dst, false );
			Old = new vcd_auditexpeRow( _dst , true );
		}
		
		
		public vcd_auditexpe( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_auditexpe";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditexpeRow( _dst, false );
			Old = new vcd_auditexpeRow( _dst , true );
		}
				
		public vcd_auditexpe( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_auditexpe() : base() 
		{
			Init();
		}
		
		public vcd_auditexpe( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_auditexpe";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "marcaregrenid", typeof( int ) );  
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			_dt.Columns.Add( "numfecha", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditexpeRow( _dst, false );
			Old = new vcd_auditexpeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_auditexpeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_auditexpe

#region vcd_auditmarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_auditmarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field denominacion;	
			public String_Field denominacionclave;	
			public String_Field fonetizada;	
			public Int_Field marcatipoid;	
			public Int_Field claseid;	
			public String_Field clasedescripesp;	
			public Boolean_Field limitada;	
			public Int_Field clienteid;	
			public Int_Field agentelocalid;	
			public Boolean_Field nuestra;	
			public Boolean_Field vigilada;	
			public Boolean_Field sustituida;	
			public Boolean_Field standby;	
			public Boolean_Field vigente;	
			public Int_Field logotipoid;	
			public Int_Field expedientevigenteid;	
			public Boolean_Field otrosclientes;	
			public Int_Field marcaregrenid;	
			public Int_Field marcaregrenant;	
			public String_Field propietario;	
			public String_Field prodir;	
			public String_Field propais;	
			public String_Field obs;	
			public Int_Field numfecha;	

			public vcd_auditmarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				denominacionclave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				fonetizada		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				marcatipoid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				claseid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				clasedescripesp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				limitada		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				agentelocalid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				vigilada		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				sustituida		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				standby		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				vigente		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				logotipoid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				expedientevigenteid		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				otrosclientes		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				marcaregrenid		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				marcaregrenant		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				propietario		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				prodir		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				propais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				numfecha		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
			}
		} // end class vcd_auditmarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_auditmarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_auditmarca";
	
		
		public vcd_auditmarcaRow Dat;
		public vcd_auditmarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_auditmarca( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_auditmarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditmarcaRow( _dst, false );
			Old = new vcd_auditmarcaRow( _dst , true );
		}
		
		
		public vcd_auditmarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_auditmarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditmarcaRow( _dst, false );
			Old = new vcd_auditmarcaRow( _dst , true );
		}
				
		public vcd_auditmarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_auditmarca() : base() 
		{
			Init();
		}
		
		public vcd_auditmarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_auditmarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "denominacionclave", typeof( String ) );  
			_dt.Columns.Add( "fonetizada", typeof( String ) );  
			_dt.Columns.Add( "marcatipoid", typeof( int ) );  
			_dt.Columns.Add( "claseid", typeof( int ) );  
			_dt.Columns.Add( "clasedescripesp", typeof( String ) );  
			_dt.Columns.Add( "limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "agentelocalid", typeof( int ) );  
			_dt.Columns.Add( "nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "standby", typeof( Boolean ) );  
			_dt.Columns.Add( "vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "logotipoid", typeof( int ) );  
			_dt.Columns.Add( "expedientevigenteid", typeof( int ) );  
			_dt.Columns.Add( "otrosclientes", typeof( Boolean ) );  
			_dt.Columns.Add( "marcaregrenid", typeof( int ) );  
			_dt.Columns.Add( "marcaregrenant", typeof( int ) );  
			_dt.Columns.Add( "propietario", typeof( String ) );  
			_dt.Columns.Add( "prodir", typeof( String ) );  
			_dt.Columns.Add( "propais", typeof( String ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "numfecha", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditmarcaRow( _dst, false );
			Old = new vcd_auditmarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_auditmarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_auditmarca

#region vcd_auditpropxmarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vcd_auditpropxmarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field propietarioid;	
			public Int_Field marcaid;	
			public Int_Field numfecha;	

			public vcd_auditpropxmarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				propietarioid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				marcaid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				numfecha		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vcd_auditpropxmarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vcd_auditpropxmarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vcd_auditpropxmarca";
	
		
		public vcd_auditpropxmarcaRow Dat;
		public vcd_auditpropxmarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vcd_auditpropxmarca( DataTable tab ) : base() 
		{
			_dbTableName = "vcd_auditpropxmarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditpropxmarcaRow( _dst, false );
			Old = new vcd_auditpropxmarcaRow( _dst , true );
		}
		
		
		public vcd_auditpropxmarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vcd_auditpropxmarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditpropxmarcaRow( _dst, false );
			Old = new vcd_auditpropxmarcaRow( _dst , true );
		}
				
		public vcd_auditpropxmarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vcd_auditpropxmarca() : base() 
		{
			Init();
		}
		
		public vcd_auditpropxmarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vcd_auditpropxmarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "propietarioid", typeof( int ) );  
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			_dt.Columns.Add( "numfecha", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vcd_auditpropxmarcaRow( _dst, false );
			Old = new vcd_auditpropxmarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vcd_auditpropxmarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vcd_auditpropxmarca

#region vBoletinPartes
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBoletinPartesRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public DateTime_Field fecha;	
			public String_Field boletin;	
			public Int_Field bolnro;	
			public Int_Field bolanio;	

			public vBoletinPartesRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				fecha		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				boletin		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				bolnro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				bolanio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vBoletinPartesRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBoletinPartes : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBoletinPartes";
	
		
		public vBoletinPartesRow Dat;
		public vBoletinPartesRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBoletinPartes( DataTable tab ) : base() 
		{
			_dbTableName = "vBoletinPartes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinPartesRow( _dst, false );
			Old = new vBoletinPartesRow( _dst , true );
		}
		
		
		public vBoletinPartes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBoletinPartes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinPartesRow( _dst, false );
			Old = new vBoletinPartesRow( _dst , true );
		}
				
		public vBoletinPartes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBoletinPartes() : base() 
		{
			Init();
		}
		
		public vBoletinPartes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBoletinPartes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "boletin", typeof( String ) );  
			_dt.Columns.Add( "bolnro", typeof( int ) );  
			_dt.Columns.Add( "bolanio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinPartesRow( _dst, false );
			Old = new vBoletinPartesRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBoletinPartesAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBoletinPartes

#region vListaHI
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListaHIRow 
		{
			private  DSTab _dst;
			
			public Int_Field mergedocid;	
			public Int_Field nro;	
			public Int_Field anio;	

			public vListaHIRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				mergedocid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vListaHIRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListaHI : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListaHI";
	
		
		public vListaHIRow Dat;
		public vListaHIRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListaHI( DataTable tab ) : base() 
		{
			_dbTableName = "vListaHI";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListaHIRow( _dst, false );
			Old = new vListaHIRow( _dst , true );
		}
		
		
		public vListaHI( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListaHI";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListaHIRow( _dst, false );
			Old = new vListaHIRow( _dst , true );
		}
				
		public vListaHI( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListaHI() : base() 
		{
			Init();
		}
		
		public vListaHI( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListaHI";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListaHIRow( _dst, false );
			Old = new vListaHIRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListaHIAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListaHI

#region vMarcaVencim
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaVencimRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpeID;	
			public Int_Field ClienteID;	
			public Int_Field ClaseNro;	
			public String_Field ClaseDescripBreve;	
			public Int_Field RegistroNro;	
			public Boolean_Field RegRenVigente;	
			public DateTime_Field ConcesionFecha;	
			public DateTime_Field VencimientoFecha;	
			public String_Field Denominacion;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Nuestra;	
			public Int_Field PropietarioID;	
			public Int_Field TramiteID;	
			public String_Field Abrev;	

			public vMarcaVencimRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpeID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseDescripBreve		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				RegRenVigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vMarcaVencimRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaVencim : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaVencim";
	
		
		public vMarcaVencimRow Dat;
		public vMarcaVencimRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaVencim( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaVencim";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaVencimRow( _dst, false );
			Old = new vMarcaVencimRow( _dst , true );
		}
		
		
		public vMarcaVencim( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaVencim";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaVencimRow( _dst, false );
			Old = new vMarcaVencimRow( _dst , true );
		}
				
		public vMarcaVencim( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaVencim() : base() 
		{
			Init();
		}
		
		public vMarcaVencim( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaVencim";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpeID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescripBreve", typeof( String ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegRenVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaVencimRow( _dst, false );
			Old = new vMarcaVencimRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaVencimAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaVencim

#region vRepMarcasTramites
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRepMarcasTramitesRow 
		{
			private  DSTab _dst;
			
			public Int_Field AgenteLocal;	
			public String_Field Nombre;	
			public String_Field tramite;	
			public Int_Field numTramites;	

			public vRepMarcasTramitesRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				AgenteLocal		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				tramite		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				numTramites		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vRepMarcasTramitesRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRepMarcasTramites : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRepMarcasTramites";
	
		
		public vRepMarcasTramitesRow Dat;
		public vRepMarcasTramitesRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRepMarcasTramites( DataTable tab ) : base() 
		{
			_dbTableName = "vRepMarcasTramites";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRepMarcasTramitesRow( _dst, false );
			Old = new vRepMarcasTramitesRow( _dst , true );
		}
		
		
		public vRepMarcasTramites( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRepMarcasTramites";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRepMarcasTramitesRow( _dst, false );
			Old = new vRepMarcasTramitesRow( _dst , true );
		}
				
		public vRepMarcasTramites( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRepMarcasTramites() : base() 
		{
			Init();
		}
		
		public vRepMarcasTramites( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRepMarcasTramites";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "AgenteLocal", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "tramite", typeof( String ) );  
			_dt.Columns.Add( "numTramites", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRepMarcasTramitesRow( _dst, false );
			Old = new vRepMarcasTramitesRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRepMarcasTramitesAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRepMarcasTramites

#region VIstaPrimera
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class VIstaPrimeraRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field descrip;	
			public Int_Field clienteid;	
			public String_Field nombre;	
			public String_Field descrip1;	
			public String_Field denominacion;	
			public Int_Field nro;	
			public Int_Field actaanio;	
			public Int_Field actanro;	
			public DateTime_Field presentacionfecha;	
			public DateTime_Field Column1;	
			public String_Field abrev;	
			public DateTime_Field situacionfecha;	
			public String_Field propietario;	
			public String_Field propais;	
			public Int_Field tramitesitid;	
			public DateTime_Field concesionfecha;	
			public Int_Field registronro;	

			public VIstaPrimeraRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				descrip1		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				actaanio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				actanro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				presentacionfecha		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				Column1		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				situacionfecha		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				propietario		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				propais		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				tramitesitid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				concesionfecha		= new DateTime_Field(	_dst, 16, IsOldDataVersion  );	
				registronro		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
			}
		} // end class VIstaPrimeraRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class VIstaPrimera : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "VIstaPrimera";
	
		
		public VIstaPrimeraRow Dat;
		public VIstaPrimeraRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public VIstaPrimera( DataTable tab ) : base() 
		{
			_dbTableName = "VIstaPrimera";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VIstaPrimeraRow( _dst, false );
			Old = new VIstaPrimeraRow( _dst , true );
		}
		
		
		public VIstaPrimera( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "VIstaPrimera";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VIstaPrimeraRow( _dst, false );
			Old = new VIstaPrimeraRow( _dst , true );
		}
				
		public VIstaPrimera( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public VIstaPrimera() : base() 
		{
			Init();
		}
		
		public VIstaPrimera( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "VIstaPrimera";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "descrip1", typeof( String ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "actaanio", typeof( int ) );  
			_dt.Columns.Add( "actanro", typeof( int ) );  
			_dt.Columns.Add( "presentacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Column1", typeof( DateTime ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "situacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "propietario", typeof( String ) );  
			_dt.Columns.Add( "propais", typeof( String ) );  
			_dt.Columns.Add( "tramitesitid", typeof( int ) );  
			_dt.Columns.Add( "concesionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "registronro", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new VIstaPrimeraRow( _dst, false );
			Old = new VIstaPrimeraRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.VIstaPrimeraAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion VIstaPrimera

#region vMarcasPropTram
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcasPropTramRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field paisalfa;	
			public Int_Field clienteid;	
			public String_Field nombre;	
			public String_Field situacion_descrip;	
			public String_Field denominacion;	
			public Int_Field nro;	
			public Int_Field actaanio;	
			public Int_Field actanro;	
			public DateTime_Field presentacionfecha;	
			public DateTime_Field publicacionfecha;	
			public String_Field abrev;	
			public DateTime_Field situacionfecha;	
			public String_Field propietario;	
			public String_Field propais;	
			public Int_Field tramitesitid;	
			public DateTime_Field concesionfecha;	
			public Int_Field registronro;	
			public Boolean_Field multiple;	
			public Int_Field tramiteid;	

			public vMarcasPropTramRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				paisalfa		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				situacion_descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				actaanio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				actanro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				presentacionfecha		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				publicacionfecha		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				situacionfecha		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				propietario		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				propais		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				tramitesitid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				concesionfecha		= new DateTime_Field(	_dst, 16, IsOldDataVersion  );	
				registronro		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
			}
		} // end class vMarcasPropTramRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcasPropTram : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcasPropTram";
	
		
		public vMarcasPropTramRow Dat;
		public vMarcasPropTramRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcasPropTram( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcasPropTram";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcasPropTramRow( _dst, false );
			Old = new vMarcasPropTramRow( _dst , true );
		}
		
		
		public vMarcasPropTram( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcasPropTram";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcasPropTramRow( _dst, false );
			Old = new vMarcasPropTramRow( _dst , true );
		}
				
		public vMarcasPropTram( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcasPropTram() : base() 
		{
			Init();
		}
		
		public vMarcasPropTram( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcasPropTram";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "paisalfa", typeof( String ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "situacion_descrip", typeof( String ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "actaanio", typeof( int ) );  
			_dt.Columns.Add( "actanro", typeof( int ) );  
			_dt.Columns.Add( "presentacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "publicacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "situacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "propietario", typeof( String ) );  
			_dt.Columns.Add( "propais", typeof( String ) );  
			_dt.Columns.Add( "tramitesitid", typeof( int ) );  
			_dt.Columns.Add( "concesionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "registronro", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcasPropTramRow( _dst, false );
			Old = new vMarcasPropTramRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcasPropTramAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcasPropTram

#region vRenovadoPorOtro
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRenovadoPorOtroRow 
		{
			private  DSTab _dst;
			
			public Int_Field expedienteIDHijo;	
			public String_Field Descrip;	
			public DateTime_Field FechaInstruccion;	
			public DateTime_Field PresentacionFecha;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field RegistroNro;	
			public Int_Field Clase;	
			public String_Field Marcatipo;	
			public String_Field Denominacion;	
			public Boolean_Field Nuestra;	
			public Int_Field marcaid;	
			public Boolean_Field Vigilada;	
			public Int_Field clienteID;	
			public String_Field nombre;	
			public DateTime_Field Vencimientofecha;	
			public String_Field Obs;	
			public Int_Field expedienteIDPadre;	
			public String_Field ObsInstruccion;	
			public String_Field AgenteAnterior;	
			public Int_Field IDRenovadoPor;	
			public String_Field RenovadoPorAgenteLocal;	
			public String_Field Propietario;	
			public String_Field ProPais;	
			public String_Field DenominacionNueva;	

			public vRenovadoPorOtroRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				expedienteIDHijo		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FechaInstruccion		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Marcatipo		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				marcaid		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				clienteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				Vencimientofecha		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				expedienteIDPadre		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				ObsInstruccion		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				AgenteAnterior		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				IDRenovadoPor		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				RenovadoPorAgenteLocal		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				DenominacionNueva		= new String_Field(	_dst, 24, IsOldDataVersion  );	
			}
		} // end class vRenovadoPorOtroRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRenovadoPorOtro : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRenovadoPorOtro";
	
		
		public vRenovadoPorOtroRow Dat;
		public vRenovadoPorOtroRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRenovadoPorOtro( DataTable tab ) : base() 
		{
			_dbTableName = "vRenovadoPorOtro";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadoPorOtroRow( _dst, false );
			Old = new vRenovadoPorOtroRow( _dst , true );
		}
		
		
		public vRenovadoPorOtro( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRenovadoPorOtro";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadoPorOtroRow( _dst, false );
			Old = new vRenovadoPorOtroRow( _dst , true );
		}
				
		public vRenovadoPorOtro( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRenovadoPorOtro() : base() 
		{
			Init();
		}
		
		public vRenovadoPorOtro( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRenovadoPorOtro";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "expedienteIDHijo", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "FechaInstruccion", typeof( DateTime ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "Marcatipo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "clienteID", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "Vencimientofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "expedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "ObsInstruccion", typeof( String ) );  
			_dt.Columns.Add( "AgenteAnterior", typeof( String ) );  
			_dt.Columns.Add( "IDRenovadoPor", typeof( int ) );  
			_dt.Columns.Add( "RenovadoPorAgenteLocal", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "DenominacionNueva", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadoPorOtroRow( _dst, false );
			Old = new vRenovadoPorOtroRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRenovadoPorOtroAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRenovadoPorOtro

#region vPoder
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PoderID;	
			public Int_Field PoderInscID;	
			public Int_Field PoderTipoID;	
			public Int_Field ExpedienteID;	
			public Int_Field PaisID;	
			public String_Field Concepto;	
			public String_Field Denominacion;	
			public String_Field Domicilio;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field FechaModificacion;	
			public Int_Field AgenteLocalID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field LegNot;	
			public Boolean_Field LegCons;	
			public Boolean_Field LegRelExt;	
			public String_Field Obs;	
			public String_Field Inscripcion;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Boolean_Field Original;	

			public vPoderRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PoderID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				PoderTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Concepto		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				LegNot		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				LegCons		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				LegRelExt		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Original		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vPoderRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoder : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoder";
	
		
		public vPoderRow Dat;
		public vPoderRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoder( DataTable tab ) : base() 
		{
			_dbTableName = "vPoder";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderRow( _dst, false );
			Old = new vPoderRow( _dst , true );
		}
		
		
		public vPoder( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoder";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderRow( _dst, false );
			Old = new vPoderRow( _dst , true );
		}
				
		public vPoder( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoder() : base() 
		{
			Init();
		}
		
		public vPoder( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoder";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "PoderTipoID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Concepto", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "LegNot", typeof( Boolean ) );  
			_dt.Columns.Add( "LegCons", typeof( Boolean ) );  
			_dt.Columns.Add( "LegRelExt", typeof( Boolean ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Original", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderRow( _dst, false );
			Old = new vPoderRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoder

#region vPoderDatos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPoderDatosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PoderID;	
			public String_Field PoderStr;	
			public Int_Field PoderInscID;	
			public Int_Field ExpedienteID;	
			public Int_Field PaisID;	
			public String_Field Concepto;	
			public String_Field Denominacion;	
			public String_Field Domicilio;	
			public Int_Field InscripcionNro;	
			public Int_Field InscripcionAnio;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field FechaModificacion;	
			public Boolean_Field Nuestra;	
			public Boolean_Field LegNot;	
			public Boolean_Field LegCons;	
			public Boolean_Field LegRelExt;	
			public String_Field Obs;	
			public String_Field Inscripcion;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Boolean_Field Original;	
			public String_Field pais;	

			public vPoderDatosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PoderID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PoderStr		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Concepto		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Domicilio		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				InscripcionNro		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				InscripcionAnio		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				LegNot		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				LegCons		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				LegRelExt		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				Inscripcion		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				Original		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				pais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vPoderDatosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPoderDatos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPoderDatos";
	
		
		public vPoderDatosRow Dat;
		public vPoderDatosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPoderDatos( DataTable tab ) : base() 
		{
			_dbTableName = "vPoderDatos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderDatosRow( _dst, false );
			Old = new vPoderDatosRow( _dst , true );
		}
		
		
		public vPoderDatos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPoderDatos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderDatosRow( _dst, false );
			Old = new vPoderDatosRow( _dst , true );
		}
				
		public vPoderDatos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPoderDatos() : base() 
		{
			Init();
		}
		
		public vPoderDatos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPoderDatos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PoderID", typeof( int ) );  
			_dt.Columns.Add( "PoderStr", typeof( String ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Concepto", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Domicilio", typeof( String ) );  
			_dt.Columns.Add( "InscripcionNro", typeof( int ) );  
			_dt.Columns.Add( "InscripcionAnio", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "LegNot", typeof( Boolean ) );  
			_dt.Columns.Add( "LegCons", typeof( Boolean ) );  
			_dt.Columns.Add( "LegRelExt", typeof( Boolean ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Inscripcion", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Original", typeof( Boolean ) );  
			_dt.Columns.Add( "pais", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPoderDatosRow( _dst, false );
			Old = new vPoderDatosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPoderDatosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPoderDatos

#region vVerMerge
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vVerMergeRow 
		{
			private  DSTab _dst;
			
			public Int_Field expedienteid;	
			public Int_Field mergeid;	
			public String_Field descrip;	
			public Int_Field mergedocid;	
			public Boolean_Field generado;	
			public Int_Field tramiteid;	
			public DateTime_Field fechagen;	
			public Binary_Field contenido;	
			public DateTime_Field fecha;	
			public String_Field nick;	

			public vVerMergeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				expedienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				fechagen		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				contenido		= new Binary_Field(	_dst, 7, IsOldDataVersion  );	
				fecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				nick		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vVerMergeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vVerMerge : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vVerMerge";
	
		
		public vVerMergeRow Dat;
		public vVerMergeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vVerMerge( DataTable tab ) : base() 
		{
			_dbTableName = "vVerMerge";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vVerMergeRow( _dst, false );
			Old = new vVerMergeRow( _dst , true );
		}
		
		
		public vVerMerge( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vVerMerge";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vVerMergeRow( _dst, false );
			Old = new vVerMergeRow( _dst , true );
		}
				
		public vVerMerge( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vVerMerge() : base() 
		{
			Init();
		}
		
		public vVerMerge( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vVerMerge";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "fechagen", typeof( DateTime ) );  
			_dt.Columns.Add( "contenido", typeof( Byte[] ) );  
			_dt.Columns.Add( "fecha", typeof( DateTime ) );  
			_dt.Columns.Add( "nick", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vVerMergeRow( _dst, false );
			Old = new vVerMergeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vVerMergeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vVerMerge

#region vVerMergeAvisos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vVerMergeAvisosRow 
		{
			private  DSTab _dst;
			
			public Int_Field expedienteid;	
			public Int_Field mergeid;	
			public Int_Field mergedocid;	
			public String_Field enviomodo;	
			public DateTime_Field enviofecha;	
			public Int_Field clienteid;	
			public String_Field descrip;	
			public Binary_Field contenido;	
			public DateTime_Field fechagen;	
			public String_Field nick;	

			public vVerMergeAvisosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				expedienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				enviomodo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				enviofecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				contenido		= new Binary_Field(	_dst, 7, IsOldDataVersion  );	
				fechagen		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				nick		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vVerMergeAvisosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vVerMergeAvisos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vVerMergeAvisos";
	
		
		public vVerMergeAvisosRow Dat;
		public vVerMergeAvisosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vVerMergeAvisos( DataTable tab ) : base() 
		{
			_dbTableName = "vVerMergeAvisos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vVerMergeAvisosRow( _dst, false );
			Old = new vVerMergeAvisosRow( _dst , true );
		}
		
		
		public vVerMergeAvisos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vVerMergeAvisos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vVerMergeAvisosRow( _dst, false );
			Old = new vVerMergeAvisosRow( _dst , true );
		}
				
		public vVerMergeAvisos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vVerMergeAvisos() : base() 
		{
			Init();
		}
		
		public vVerMergeAvisos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vVerMergeAvisos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			_dt.Columns.Add( "enviomodo", typeof( String ) );  
			_dt.Columns.Add( "enviofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "contenido", typeof( Byte[] ) );  
			_dt.Columns.Add( "fechagen", typeof( DateTime ) );  
			_dt.Columns.Add( "nick", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vVerMergeAvisosRow( _dst, false );
			Old = new vVerMergeAvisosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vVerMergeAvisosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vVerMergeAvisos

#region vClientesXTramite
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClientesXTramiteRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field nombre;	
			public Int_Field tramiteid;	
			public Int_Field clientemultipleid;	
			public String_Field descrip;	

			public vClientesXTramiteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				clientemultipleid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vClientesXTramiteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClientesXTramite : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClientesXTramite";
	
		
		public vClientesXTramiteRow Dat;
		public vClientesXTramiteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClientesXTramite( DataTable tab ) : base() 
		{
			_dbTableName = "vClientesXTramite";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientesXTramiteRow( _dst, false );
			Old = new vClientesXTramiteRow( _dst , true );
		}
		
		
		public vClientesXTramite( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClientesXTramite";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientesXTramiteRow( _dst, false );
			Old = new vClientesXTramiteRow( _dst , true );
		}
				
		public vClientesXTramite( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClientesXTramite() : base() 
		{
			Init();
		}
		
		public vClientesXTramite( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClientesXTramite";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "clientemultipleid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientesXTramiteRow( _dst, false );
			Old = new vClientesXTramiteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClientesXTramiteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClientesXTramite

#region vConsCliente
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vConsClienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field nombre;	
			public Int_Field ddi;	
			public String_Field direccion;	
			public String_Field correo;	
			public Boolean_Field activo;	
			public Boolean_Field multiple;	
			public Boolean_Field inubicable;	
			public String_Field obs;	
			public Boolean_Field pgeneral;	
			public Boolean_Field pintelectual;	
			public String_Field paisalfa;	
			public String_Field paistel;	
			public Int_Field codciudad;	
			public String_Field nomciudad;	
			public Int_Field idViaComCte;	
			public String_Field viaComCte;	
			public String_Field valorViaComCte;	
			public String_Field atencionCliente;	
			public Int_Field idArea;	
			public String_Field areaAtencion;	
			public Int_Field idViaComAtencion;	
			public String_Field viaComAtencion;	
			public String_Field valorViaComAtencion;	
			public String_Field nombre1;	
			public String_Field usuario;	

			public vConsClienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ddi		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				direccion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				correo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				activo		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				inubicable		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				pgeneral		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				pintelectual		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				paisalfa		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				paistel		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				codciudad		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				nomciudad		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				idViaComCte		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				viaComCte		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				valorViaComCte		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				atencionCliente		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				idArea		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				areaAtencion		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				idViaComAtencion		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				viaComAtencion		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				valorViaComAtencion		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				nombre1		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				usuario		= new String_Field(	_dst, 25, IsOldDataVersion  );	
			}
		} // end class vConsClienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vConsCliente : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vConsCliente";
	
		
		public vConsClienteRow Dat;
		public vConsClienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vConsCliente( DataTable tab ) : base() 
		{
			_dbTableName = "vConsCliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsClienteRow( _dst, false );
			Old = new vConsClienteRow( _dst , true );
		}
		
		
		public vConsCliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vConsCliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsClienteRow( _dst, false );
			Old = new vConsClienteRow( _dst , true );
		}
				
		public vConsCliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vConsCliente() : base() 
		{
			Init();
		}
		
		public vConsCliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vConsCliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "ddi", typeof( int ) );  
			_dt.Columns.Add( "direccion", typeof( String ) );  
			_dt.Columns.Add( "correo", typeof( String ) );  
			_dt.Columns.Add( "activo", typeof( Boolean ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "inubicable", typeof( Boolean ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "pgeneral", typeof( Boolean ) );  
			_dt.Columns.Add( "pintelectual", typeof( Boolean ) );  
			_dt.Columns.Add( "paisalfa", typeof( String ) );  
			_dt.Columns.Add( "paistel", typeof( String ) );  
			_dt.Columns.Add( "codciudad", typeof( int ) );  
			_dt.Columns.Add( "nomciudad", typeof( String ) );  
			_dt.Columns.Add( "idViaComCte", typeof( int ) );  
			_dt.Columns.Add( "viaComCte", typeof( String ) );  
			_dt.Columns.Add( "valorViaComCte", typeof( String ) );  
			_dt.Columns.Add( "atencionCliente", typeof( String ) );  
			_dt.Columns.Add( "idArea", typeof( int ) );  
			_dt.Columns.Add( "areaAtencion", typeof( String ) );  
			_dt.Columns.Add( "idViaComAtencion", typeof( int ) );  
			_dt.Columns.Add( "viaComAtencion", typeof( String ) );  
			_dt.Columns.Add( "valorViaComAtencion", typeof( String ) );  
			_dt.Columns.Add( "nombre1", typeof( String ) );  
			_dt.Columns.Add( "usuario", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsClienteRow( _dst, false );
			Old = new vConsClienteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vConsClienteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vConsCliente

#region vCorrespNro
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vCorrespNroRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field nrodesde;	
			public Int_Field nrohasta;	
			public Boolean_Field vigente;	
			public DateTime_Field fechains;	
			public Int_Field funcionarioID;	
			public Int_Field IDArea;	

			public vCorrespNroRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nrodesde		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				nrohasta		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				vigente		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				fechains		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				funcionarioID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				IDArea		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vCorrespNroRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCorrespNro : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCorrespNro";
	
		
		public vCorrespNroRow Dat;
		public vCorrespNroRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCorrespNro( DataTable tab ) : base() 
		{
			_dbTableName = "vCorrespNro";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespNroRow( _dst, false );
			Old = new vCorrespNroRow( _dst , true );
		}
		
		
		public vCorrespNro( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCorrespNro";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespNroRow( _dst, false );
			Old = new vCorrespNroRow( _dst , true );
		}
				
		public vCorrespNro( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCorrespNro() : base() 
		{
			Init();
		}
		
		public vCorrespNro( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCorrespNro";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "nrodesde", typeof( int ) );  
			_dt.Columns.Add( "nrohasta", typeof( int ) );  
			_dt.Columns.Add( "vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "fechains", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioID", typeof( int ) );  
			_dt.Columns.Add( "IDArea", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespNroRow( _dst, false );
			Old = new vCorrespNroRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vCorrespNroAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCorrespNro

#region vExpeService
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeServiceRow 
		{
			private  DSTab _dst;
			
			public Int_Field expedienteID;	
			public Int_Field agentelocalID;	
			public Int_Field actaNro;	
			public Int_Field actaAnio;	
			public DateTime_Field presentacionFecha;	
			public Boolean_Field sustituida;	
			public Int_Field marcaID;	
			public String_Field denominacion;	
			public Boolean_Field marcaNuestra;	
			public Boolean_Field marcaVigente;	
			public String_Field marcaProNombre;	
			public String_Field marcaProDir;	
			public String_Field marcaProPais;	
			public Int_Field claseID;	
			public Int_Field clienteID;	
			public Int_Field marcaTipoID;	
			public String_Field marctipoAbrev;	
			public String_Field marcatipoDescrip;	
			public Int_Field hiID;	
			public Int_Field hiNro;	
			public Int_Field hiAnio;	
			public Int_Field agenteLocalMatric;	
			public Boolean_Field agenteLocalNuestro;	
			public Int_Field claseNro;	

			public vExpeServiceRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				expedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				agentelocalID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				actaNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				actaAnio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				presentacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				sustituida		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				marcaID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				marcaNuestra		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				marcaVigente		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				marcaProNombre		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				marcaProDir		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				marcaProPais		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				claseID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				clienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				marcaTipoID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				marctipoAbrev		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				marcatipoDescrip		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				hiID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				hiNro		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				hiAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				agenteLocalMatric		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				agenteLocalNuestro		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				claseNro		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class vExpeServiceRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeService : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeService";
	
		
		public vExpeServiceRow Dat;
		public vExpeServiceRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeService( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeService";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeServiceRow( _dst, false );
			Old = new vExpeServiceRow( _dst , true );
		}
		
		
		public vExpeService( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeService";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeServiceRow( _dst, false );
			Old = new vExpeServiceRow( _dst , true );
		}
				
		public vExpeService( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeService() : base() 
		{
			Init();
		}
		
		public vExpeService( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeService";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "expedienteID", typeof( int ) );  
			_dt.Columns.Add( "agentelocalID", typeof( int ) );  
			_dt.Columns.Add( "actaNro", typeof( int ) );  
			_dt.Columns.Add( "actaAnio", typeof( int ) );  
			_dt.Columns.Add( "presentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "marcaID", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "marcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "marcaVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "marcaProNombre", typeof( String ) );  
			_dt.Columns.Add( "marcaProDir", typeof( String ) );  
			_dt.Columns.Add( "marcaProPais", typeof( String ) );  
			_dt.Columns.Add( "claseID", typeof( int ) );  
			_dt.Columns.Add( "clienteID", typeof( int ) );  
			_dt.Columns.Add( "marcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "marctipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "marcatipoDescrip", typeof( String ) );  
			_dt.Columns.Add( "hiID", typeof( int ) );  
			_dt.Columns.Add( "hiNro", typeof( int ) );  
			_dt.Columns.Add( "hiAnio", typeof( int ) );  
			_dt.Columns.Add( "agenteLocalMatric", typeof( int ) );  
			_dt.Columns.Add( "agenteLocalNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "claseNro", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeServiceRow( _dst, false );
			Old = new vExpeServiceRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeServiceAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeService

#region vMarcaClientePropietario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaClientePropietarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field DescripBreve;	
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field Registro;	
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public String_Field Propietario;	
			public String_Field Cliente;	

			public vMarcaClientePropietarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Registro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Cliente		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vMarcaClientePropietarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaClientePropietario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaClientePropietario";
	
		
		public vMarcaClientePropietarioRow Dat;
		public vMarcaClientePropietarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaClientePropietario( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaClientePropietario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClientePropietarioRow( _dst, false );
			Old = new vMarcaClientePropietarioRow( _dst , true );
		}
		
		
		public vMarcaClientePropietario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaClientePropietario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClientePropietarioRow( _dst, false );
			Old = new vMarcaClientePropietarioRow( _dst , true );
		}
				
		public vMarcaClientePropietario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaClientePropietario() : base() 
		{
			Init();
		}
		
		public vMarcaClientePropietario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaClientePropietario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Registro", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Cliente", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClientePropietarioRow( _dst, false );
			Old = new vMarcaClientePropietarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaClientePropietarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaClientePropietario

#region vRenovacionMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRenovacionMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field ClaseID;	
			public Int_Field MarcaAnteriorID;	
			public Boolean_Field Limitada;	
			public String_Field DesEspLim;	
			public Int_Field ExpedienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public DateTime_Field Vencimiento;	
			public Int_Field RegistroNro;	
			public Int_Field ClaseAntID;	
			public String_Field ClaseDescrip;	
			public String_Field DesEsp;	
			public Int_Field ClaseEdicionID;	
			public String_Field ClaseAntDescrip;	
			public DateTime_Field ConcesionFecha;	
			public Int_Field MarcaTipoID;	
			public String_Field Referencia;	
			public Int_Field LogotipoID;	

			public vRenovacionMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaAnteriorID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				DesEspLim		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Vencimiento		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ClaseAntID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ClaseDescrip		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				DesEsp		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				ClaseEdicionID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ClaseAntDescrip		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				Referencia		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
			}
		} // end class vRenovacionMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRenovacionMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRenovacionMarca";
	
		
		public vRenovacionMarcaRow Dat;
		public vRenovacionMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRenovacionMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vRenovacionMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovacionMarcaRow( _dst, false );
			Old = new vRenovacionMarcaRow( _dst , true );
		}
		
		
		public vRenovacionMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRenovacionMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovacionMarcaRow( _dst, false );
			Old = new vRenovacionMarcaRow( _dst , true );
		}
				
		public vRenovacionMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRenovacionMarca() : base() 
		{
			Init();
		}
		
		public vRenovacionMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRenovacionMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaAnteriorID", typeof( int ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "DesEspLim", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Vencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ClaseAntID", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescrip", typeof( String ) );  
			_dt.Columns.Add( "DesEsp", typeof( String ) );  
			_dt.Columns.Add( "ClaseEdicionID", typeof( int ) );  
			_dt.Columns.Add( "ClaseAntDescrip", typeof( String ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "Referencia", typeof( String ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovacionMarcaRow( _dst, false );
			Old = new vRenovacionMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRenovacionMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRenovacionMarca

#region vBoletinDep
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBoletinDepRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field BoletinID;	
			public DateTime_Field SolicitudFecha;	
			public Int_Field ExpNro;	
			public Int_Field ExpAnio;	
			public String_Field Clase;	
			public String_Field MarcaTipo;	
			public String_Field Tramite;	
			public String_Field Denominacion;	
			public String_Field Propietario;	
			public String_Field Pais;	
			public String_Field AgenteLocal;	
			public Int_Field RefNro;	
			public Int_Field RefAnio;	
			public Int_Field RefRegNro;	
			public Int_Field RefRegAnio;	
			public String_Field Obs;	
			public Boolean_Field Enlazado;	
			public Boolean_Field Incorporado;	
			public Int_Field ExpedienteID;	
			public Int_Field BolAnio;	
			public Int_Field BolNro;	
			public Boolean_Field Importado;	
			public Boolean_Field Completo;	

			public vBoletinDepRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BoletinID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SolicitudFecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				ExpNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Pais		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				AgenteLocal		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				RefNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				RefAnio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				RefRegNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RefRegAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Enlazado		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Incorporado		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Importado		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				Completo		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class vBoletinDepRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBoletinDep : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBoletinDep";
	
		
		public vBoletinDepRow Dat;
		public vBoletinDepRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBoletinDep( DataTable tab ) : base() 
		{
			_dbTableName = "vBoletinDep";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinDepRow( _dst, false );
			Old = new vBoletinDepRow( _dst , true );
		}
		
		
		public vBoletinDep( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBoletinDep";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinDepRow( _dst, false );
			Old = new vBoletinDepRow( _dst , true );
		}
				
		public vBoletinDep( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBoletinDep() : base() 
		{
			Init();
		}
		
		public vBoletinDep( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBoletinDep";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "BoletinID", typeof( int ) );  
			_dt.Columns.Add( "SolicitudFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ExpNro", typeof( int ) );  
			_dt.Columns.Add( "ExpAnio", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Pais", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocal", typeof( String ) );  
			_dt.Columns.Add( "RefNro", typeof( int ) );  
			_dt.Columns.Add( "RefAnio", typeof( int ) );  
			_dt.Columns.Add( "RefRegNro", typeof( int ) );  
			_dt.Columns.Add( "RefRegAnio", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Enlazado", typeof( Boolean ) );  
			_dt.Columns.Add( "Incorporado", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "Importado", typeof( Boolean ) );  
			_dt.Columns.Add( "Completo", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinDepRow( _dst, false );
			Old = new vBoletinDepRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBoletinDepAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBoletinDep

#region vMarcaCambioSit
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaCambioSitRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpeSitID;	
			public String_Field Denominacion;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public String_Field TramiteDescrip;	
			public String_Field SituacionDescrip;	
			public String_Field ClaseDesc;	
			public DateTime_Field AltaFecha;	
			public Int_Field ActaAnio;	
			public Int_Field ActaNro;	
			public Int_Field ExpeID;	
			public String_Field Obs_CambioSit;	
			public String_Field Acta;	
			public Int_Field TramiteID;	
			public Int_Field AgenteLocalID;	
			public Int_Field ClienteID;	
			public Int_Field TramiteSitID;	
			public Int_Field TramiteSitID_Actual;	
			public DateTime_Field SituacionFecha;	
			public DateTime_Field SitVencimientoFecha;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public DateTime_Field ConcesionFecha;	
			public Boolean_Field Vigente;	
			public String_Field Registro;	
			public DateTime_Field VencimientoFecha;	
			public String_Field SitAbrev;	
			public Boolean_Field EnTramite;	
			public String_Field tramiteAbrev;	
			public Int_Field ClaseNro;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public String_Field InstrucAbrev;	
			public Int_Field InstrucFuncID;	
			public String_Field OrdenTrabajo;	
			public String_Field usuario;	
			public String_Field UsuarioNombreCorto;	
			public Int_Field FuncionarioID;	
			public String_Field UsuarioNombre;	
			public Boolean_Field SitStandBy;	
			public Boolean_Field expeVigilada;	
			public String_Field ClienteNombre;	
			public Boolean_Field expeStandBy;	
			public Boolean_Field expeNuestra;	
			public Boolean_Field marSustituida;	

			public vMarcaCambioSitRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpeSitID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseDesc		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				ExpeID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Obs_CambioSit		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				TramiteSitID_Actual		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				SitVencimientoFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
				SitAbrev		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 27, IsOldDataVersion  );	
				tramiteAbrev		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 30, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				InstrucAbrev		= new String_Field(	_dst, 34, IsOldDataVersion  );	
				InstrucFuncID		= new Int_Field(	_dst, 35, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 36, IsOldDataVersion  );	
				usuario		= new String_Field(	_dst, 37, IsOldDataVersion  );	
				UsuarioNombreCorto		= new String_Field(	_dst, 38, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 39, IsOldDataVersion  );	
				UsuarioNombre		= new String_Field(	_dst, 40, IsOldDataVersion  );	
				SitStandBy		= new Boolean_Field(	_dst, 41, IsOldDataVersion  );	
				expeVigilada		= new Boolean_Field(	_dst, 42, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 43, IsOldDataVersion  );	
				expeStandBy		= new Boolean_Field(	_dst, 44, IsOldDataVersion  );	
				expeNuestra		= new Boolean_Field(	_dst, 45, IsOldDataVersion  );	
				marSustituida		= new Boolean_Field(	_dst, 46, IsOldDataVersion  );	
			}
		} // end class vMarcaCambioSitRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaCambioSit : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaCambioSit";
	
		
		public vMarcaCambioSitRow Dat;
		public vMarcaCambioSitRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaCambioSit( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaCambioSit";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaCambioSitRow( _dst, false );
			Old = new vMarcaCambioSitRow( _dst , true );
		}
		
		
		public vMarcaCambioSit( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaCambioSit";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaCambioSitRow( _dst, false );
			Old = new vMarcaCambioSitRow( _dst , true );
		}
				
		public vMarcaCambioSit( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaCambioSit() : base() 
		{
			Init();
		}
		
		public vMarcaCambioSit( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaCambioSit";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpeSitID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClaseDesc", typeof( String ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ExpeID", typeof( int ) );  
			_dt.Columns.Add( "Obs_CambioSit", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID_Actual", typeof( int ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SitVencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SitAbrev", typeof( String ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "tramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "InstrucAbrev", typeof( String ) );  
			_dt.Columns.Add( "InstrucFuncID", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "usuario", typeof( String ) );  
			_dt.Columns.Add( "UsuarioNombreCorto", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "UsuarioNombre", typeof( String ) );  
			_dt.Columns.Add( "SitStandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "expeVigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "expeStandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "expeNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "marSustituida", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaCambioSitRow( _dst, false );
			Old = new vMarcaCambioSitRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaCambioSitAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaCambioSit

#region vMarcaVencim1
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaVencim1Row 
		{
			private  DSTab _dst;
			
			public Int_Field ExpeID;	
			public Int_Field ClienteID;	
			public Int_Field ClaseNro;	
			public String_Field ClaseDescripBreve;	
			public Int_Field RegistroNro;	
			public Boolean_Field RegRenVigente;	
			public DateTime_Field ConcesionFecha;	
			public DateTime_Field VencimientoFecha;	
			public String_Field Denominacion;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Nuestra;	
			public Int_Field PropietarioID;	
			public Int_Field TramiteID;	
			public String_Field InstrCadena;	

			public vMarcaVencim1Row( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpeID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseDescripBreve		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				RegRenVigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				InstrCadena		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vMarcaVencim1Row 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaVencim1 : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaVencim1";
	
		
		public vMarcaVencim1Row Dat;
		public vMarcaVencim1Row Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaVencim1( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaVencim1";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaVencim1Row( _dst, false );
			Old = new vMarcaVencim1Row( _dst , true );
		}
		
		
		public vMarcaVencim1( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaVencim1";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaVencim1Row( _dst, false );
			Old = new vMarcaVencim1Row( _dst , true );
		}
				
		public vMarcaVencim1( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaVencim1() : base() 
		{
			Init();
		}
		
		public vMarcaVencim1( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaVencim1";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpeID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescripBreve", typeof( String ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegRenVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "InstrCadena", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaVencim1Row( _dst, false );
			Old = new vMarcaVencim1Row( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaVencim1Adapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaVencim1

#region vExpeMarcaHIConf
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeMarcaHIConfRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field ExpedienteIDPadre;	
			public String_Field Registro;	
			public String_Field OrdenTrabajo;	
			public String_Field Denominacion;	
			public String_Field Clase;	
			public Int_Field ClaseNro;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDecrip;	
			public Boolean_Field EnTramite;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field AltaFecha;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioPais;	
			public Int_Field ClaseID;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public Int_Field MarcaID;	
			public String_Field Label;	
			public Boolean_Field ExpeNuestro;	
			public Boolean_Field MarcaNuestra;	
			public Boolean_Field MarcaActiva;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field RegVigenteVencim;	
			public Int_Field RegVigenteNro;	
			public Int_Field RegVigenteAnio;	
			public DateTime_Field RegVigenteConcesionFecha;	
			public Boolean_Field Vigente;	
			public Boolean_Field RegistroVigente;	
			public String_Field ActaPadre;	
			public String_Field DenominacionClave;	
			public String_Field MarcaTipo;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field LogotipoID;	
			public String_Field NombreCliente;	

			public vExpeMarcaHIConfRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteIDPadre		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				SituacionDecrip		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				ExpeNuestro		= new Boolean_Field(	_dst, 30, IsOldDataVersion  );	
				MarcaNuestra		= new Boolean_Field(	_dst, 31, IsOldDataVersion  );	
				MarcaActiva		= new Boolean_Field(	_dst, 32, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 33, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 34, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 35, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 36, IsOldDataVersion  );	
				RegVigenteVencim		= new DateTime_Field(	_dst, 37, IsOldDataVersion  );	
				RegVigenteNro		= new Int_Field(	_dst, 38, IsOldDataVersion  );	
				RegVigenteAnio		= new Int_Field(	_dst, 39, IsOldDataVersion  );	
				RegVigenteConcesionFecha		= new DateTime_Field(	_dst, 40, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 41, IsOldDataVersion  );	
				RegistroVigente		= new Boolean_Field(	_dst, 42, IsOldDataVersion  );	
				ActaPadre		= new String_Field(	_dst, 43, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 44, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 45, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 47, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 48, IsOldDataVersion  );	
				NombreCliente		= new String_Field(	_dst, 49, IsOldDataVersion  );	
			}
		} // end class vExpeMarcaHIConfRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeMarcaHIConf : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeMarcaHIConf";
	
		
		public vExpeMarcaHIConfRow Dat;
		public vExpeMarcaHIConfRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeMarcaHIConf( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeMarcaHIConf";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaHIConfRow( _dst, false );
			Old = new vExpeMarcaHIConfRow( _dst , true );
		}
		
		
		public vExpeMarcaHIConf( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeMarcaHIConf";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaHIConfRow( _dst, false );
			Old = new vExpeMarcaHIConfRow( _dst , true );
		}
				
		public vExpeMarcaHIConf( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeMarcaHIConf() : base() 
		{
			Init();
		}
		
		public vExpeMarcaHIConf( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeMarcaHIConf";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDecrip", typeof( String ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "ExpeNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaActiva", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteNro", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteAnio", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RegistroVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaPadre", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "NombreCliente", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaHIConfRow( _dst, false );
			Old = new vExpeMarcaHIConfRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeMarcaHIConfAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeMarcaHIConf

#region vExpeMarcaPub
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeMarcaPubRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field ExpedienteIDPadre;	
			public String_Field Registro;	
			public String_Field OrdenTrabajo;	
			public String_Field Denominacion;	
			public String_Field Clase;	
			public Int_Field ClaseNro;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDecrip;	
			public Boolean_Field EnTramite;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field AltaFecha;	
			public Int_Field PropietarioID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioPais;	
			public Int_Field ClaseID;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public Int_Field MarcaID;	
			public String_Field Label;	
			public Boolean_Field ExpeNuestro;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field MarcaNuestra;	
			public Boolean_Field MarcaActiva;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field RegVigenteVencim;	
			public Int_Field RegVigenteNro;	
			public Int_Field RegVigenteAnio;	
			public DateTime_Field RegVigenteConcesionFecha;	
			public Boolean_Field Vigente;	
			public Boolean_Field RegistroVigente;	
			public String_Field ActaPadre;	
			public String_Field DenominacionClave;	
			public String_Field MarcaTipo;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field LogotipoID;	
			public String_Field NombreCliente;	
			public Int_Field ExpSitTramiteSitID;	
			public DateTime_Field FechaSituacion;	
			public DateTime_Field FechaVencimiento;	
			public Int_Field DiarioPublic;	
			public Int_Field PaginaPublic;	
			public Int_Field AnhoPublic;	

			public vExpeMarcaPubRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteIDPadre		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				SituacionDecrip		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				ExpeNuestro		= new Boolean_Field(	_dst, 31, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				MarcaNuestra		= new Boolean_Field(	_dst, 34, IsOldDataVersion  );	
				MarcaActiva		= new Boolean_Field(	_dst, 35, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 36, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 37, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 38, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 39, IsOldDataVersion  );	
				RegVigenteVencim		= new DateTime_Field(	_dst, 40, IsOldDataVersion  );	
				RegVigenteNro		= new Int_Field(	_dst, 41, IsOldDataVersion  );	
				RegVigenteAnio		= new Int_Field(	_dst, 42, IsOldDataVersion  );	
				RegVigenteConcesionFecha		= new DateTime_Field(	_dst, 43, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 44, IsOldDataVersion  );	
				RegistroVigente		= new Boolean_Field(	_dst, 45, IsOldDataVersion  );	
				ActaPadre		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 47, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 48, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 49, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 50, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				NombreCliente		= new String_Field(	_dst, 52, IsOldDataVersion  );	
				ExpSitTramiteSitID		= new Int_Field(	_dst, 53, IsOldDataVersion  );	
				FechaSituacion		= new DateTime_Field(	_dst, 54, IsOldDataVersion  );	
				FechaVencimiento		= new DateTime_Field(	_dst, 55, IsOldDataVersion  );	
				DiarioPublic		= new Int_Field(	_dst, 56, IsOldDataVersion  );	
				PaginaPublic		= new Int_Field(	_dst, 57, IsOldDataVersion  );	
				AnhoPublic		= new Int_Field(	_dst, 58, IsOldDataVersion  );	
			}
		} // end class vExpeMarcaPubRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeMarcaPub : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeMarcaPub";
	
		
		public vExpeMarcaPubRow Dat;
		public vExpeMarcaPubRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeMarcaPub( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeMarcaPub";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaPubRow( _dst, false );
			Old = new vExpeMarcaPubRow( _dst , true );
		}
		
		
		public vExpeMarcaPub( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeMarcaPub";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaPubRow( _dst, false );
			Old = new vExpeMarcaPubRow( _dst , true );
		}
				
		public vExpeMarcaPub( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeMarcaPub() : base() 
		{
			Init();
		}
		
		public vExpeMarcaPub( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeMarcaPub";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDecrip", typeof( String ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "ExpeNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaActiva", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteNro", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteAnio", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RegistroVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaPadre", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "NombreCliente", typeof( String ) );  
			_dt.Columns.Add( "ExpSitTramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "FechaSituacion", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaVencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "DiarioPublic", typeof( int ) );  
			_dt.Columns.Add( "PaginaPublic", typeof( int ) );  
			_dt.Columns.Add( "AnhoPublic", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaPubRow( _dst, false );
			Old = new vExpeMarcaPubRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeMarcaPubAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeMarcaPub

#region vOtMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOtMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field OtID;	
			public Int_Field ClienteID;	
			public Int_Field FuncionarioID;	
			public Int_Field TrabajoTipoID;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public String_Field OrdenTrabajo;	
			public Boolean_Field Facturable;	
			public DateTime_Field AltaFecha;	
			public String_Field Obs;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Acta;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public String_Field Registro;	
			public Int_Field ID;	
			public String_Field Denominacion;	
			public Int_Field MarcaTipoID;	
			public Int_Field ClaseID;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDescrip;	
			public String_Field SituacionAbrev;	
			public Int_Field ExpClienteID;	
			public String_Field ExpClienteNombre;	
			public Int_Field CorrespNro;	
			public Int_Field Correspanio;	

			public vOtMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				OtID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TrabajoTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Facturable		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				ID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				SituacionAbrev		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				ExpClienteID		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				ExpClienteNombre		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				CorrespNro		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				Correspanio		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
			}
		} // end class vOtMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOtMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOtMarca";
	
		
		public vOtMarcaRow Dat;
		public vOtMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOtMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vOtMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOtMarcaRow( _dst, false );
			Old = new vOtMarcaRow( _dst , true );
		}
		
		
		public vOtMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOtMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOtMarcaRow( _dst, false );
			Old = new vOtMarcaRow( _dst , true );
		}
				
		public vOtMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOtMarca() : base() 
		{
			Init();
		}
		
		public vOtMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOtMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "OtID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "TrabajoTipoID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Facturable", typeof( Boolean ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "SituacionAbrev", typeof( String ) );  
			_dt.Columns.Add( "ExpClienteID", typeof( int ) );  
			_dt.Columns.Add( "ExpClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "CorrespNro", typeof( int ) );  
			_dt.Columns.Add( "Correspanio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOtMarcaRow( _dst, false );
			Old = new vOtMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOtMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOtMarca

#region estad_tramites_realizados
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_tramites_realizadosRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field abrev;	
			public Int_Field cantidad;	

			public estad_tramites_realizadosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				cantidad		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class estad_tramites_realizadosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_tramites_realizados : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_tramites_realizados";
	
		
		public estad_tramites_realizadosRow Dat;
		public estad_tramites_realizadosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_tramites_realizados( DataTable tab ) : base() 
		{
			_dbTableName = "estad_tramites_realizados";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_realizadosRow( _dst, false );
			Old = new estad_tramites_realizadosRow( _dst , true );
		}
		
		
		public estad_tramites_realizados( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_tramites_realizados";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_realizadosRow( _dst, false );
			Old = new estad_tramites_realizadosRow( _dst , true );
		}
				
		public estad_tramites_realizados( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_tramites_realizados() : base() 
		{
			Init();
		}
		
		public estad_tramites_realizados( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_tramites_realizados";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_realizadosRow( _dst, false );
			Old = new estad_tramites_realizadosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_tramites_realizadosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_tramites_realizados

#region estad_tramites_anhos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_tramites_anhosRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field abrev;	
			public Int_Field cantidad;	
			public Int_Field anho;	

			public estad_tramites_anhosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				cantidad		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				anho		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class estad_tramites_anhosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_tramites_anhos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_tramites_anhos";
	
		
		public estad_tramites_anhosRow Dat;
		public estad_tramites_anhosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_tramites_anhos( DataTable tab ) : base() 
		{
			_dbTableName = "estad_tramites_anhos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_anhosRow( _dst, false );
			Old = new estad_tramites_anhosRow( _dst , true );
		}
		
		
		public estad_tramites_anhos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_tramites_anhos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_anhosRow( _dst, false );
			Old = new estad_tramites_anhosRow( _dst , true );
		}
				
		public estad_tramites_anhos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_tramites_anhos() : base() 
		{
			Init();
		}
		
		public estad_tramites_anhos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_tramites_anhos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "anho", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_anhosRow( _dst, false );
			Old = new estad_tramites_anhosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_tramites_anhosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_tramites_anhos

#region vClientActivity
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClientActivityRow 
		{
			private  DSTab _dst;
			
			public Int_Field ClienteID;	
			public String_Field ClienteNombre;	
			public String_Field ClienteDir;	
			public String_Field ClientePais;	
			public Int_Field PropietarioID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioDir;	
			public String_Field PropietarioPais;	

			public vClientActivityRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ClienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ClienteDir		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClientePais		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				PropietarioDir		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vClientActivityRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClientActivity : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClientActivity";
	
		
		public vClientActivityRow Dat;
		public vClientActivityRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClientActivity( DataTable tab ) : base() 
		{
			_dbTableName = "vClientActivity";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityRow( _dst, false );
			Old = new vClientActivityRow( _dst , true );
		}
		
		
		public vClientActivity( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClientActivity";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityRow( _dst, false );
			Old = new vClientActivityRow( _dst , true );
		}
				
		public vClientActivity( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClientActivity() : base() 
		{
			Init();
		}
		
		public vClientActivity( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClientActivity";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "ClienteDir", typeof( String ) );  
			_dt.Columns.Add( "ClientePais", typeof( String ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioDir", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityRow( _dst, false );
			Old = new vClientActivityRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClientActivityAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClientActivity

#region estad_mejores_clientes
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_mejores_clientesRow 
		{
			private  DSTab _dst;
			
			public Int_Field clienteid;	
			public String_Field nombre;	
			public Int_Field cantidad;	
			public Int_Field anho;	

			public estad_mejores_clientesRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				clienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				cantidad		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				anho		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class estad_mejores_clientesRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_mejores_clientes : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_mejores_clientes";
	
		
		public estad_mejores_clientesRow Dat;
		public estad_mejores_clientesRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_mejores_clientes( DataTable tab ) : base() 
		{
			_dbTableName = "estad_mejores_clientes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_mejores_clientesRow( _dst, false );
			Old = new estad_mejores_clientesRow( _dst , true );
		}
		
		
		public estad_mejores_clientes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_mejores_clientes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_mejores_clientesRow( _dst, false );
			Old = new estad_mejores_clientesRow( _dst , true );
		}
				
		public estad_mejores_clientes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_mejores_clientes() : base() 
		{
			Init();
		}
		
		public estad_mejores_clientes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_mejores_clientes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "anho", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_mejores_clientesRow( _dst, false );
			Old = new estad_mejores_clientesRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_mejores_clientesAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_mejores_clientes

#region estad_renovado_por_otro
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_renovado_por_otroRow 
		{
			private  DSTab _dst;
			
			public Int_Field cantidad;	
			public Int_Field anho;	

			public estad_renovado_por_otroRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cantidad		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				anho		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class estad_renovado_por_otroRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_renovado_por_otro : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_renovado_por_otro";
	
		
		public estad_renovado_por_otroRow Dat;
		public estad_renovado_por_otroRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_renovado_por_otro( DataTable tab ) : base() 
		{
			_dbTableName = "estad_renovado_por_otro";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovado_por_otroRow( _dst, false );
			Old = new estad_renovado_por_otroRow( _dst , true );
		}
		
		
		public estad_renovado_por_otro( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_renovado_por_otro";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovado_por_otroRow( _dst, false );
			Old = new estad_renovado_por_otroRow( _dst , true );
		}
				
		public estad_renovado_por_otro( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_renovado_por_otro() : base() 
		{
			Init();
		}
		
		public estad_renovado_por_otro( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_renovado_por_otro";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "anho", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovado_por_otroRow( _dst, false );
			Old = new estad_renovado_por_otroRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_renovado_por_otroAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_renovado_por_otro

#region estad_renovados_por_berke
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_renovados_por_berkeRow 
		{
			private  DSTab _dst;
			
			public Int_Field cantidad;	
			public Int_Field anho;	

			public estad_renovados_por_berkeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cantidad		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				anho		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class estad_renovados_por_berkeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_renovados_por_berke : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_renovados_por_berke";
	
		
		public estad_renovados_por_berkeRow Dat;
		public estad_renovados_por_berkeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_renovados_por_berke( DataTable tab ) : base() 
		{
			_dbTableName = "estad_renovados_por_berke";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovados_por_berkeRow( _dst, false );
			Old = new estad_renovados_por_berkeRow( _dst , true );
		}
		
		
		public estad_renovados_por_berke( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_renovados_por_berke";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovados_por_berkeRow( _dst, false );
			Old = new estad_renovados_por_berkeRow( _dst , true );
		}
				
		public estad_renovados_por_berke( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_renovados_por_berke() : base() 
		{
			Init();
		}
		
		public estad_renovados_por_berke( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_renovados_por_berke";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "anho", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovados_por_berkeRow( _dst, false );
			Old = new estad_renovados_por_berkeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_renovados_por_berkeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_renovados_por_berke

#region vClientActivityRenXOtro
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClientActivityRenXOtroRow 
		{
			private  DSTab _dst;
			
			public DateTime_Field FechaSol;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field Clase;	
			public String_Field MarcaTipo;	
			public String_Field Denominacion;	
			public Int_Field AgenteLocal;	
			public Int_Field RegistroNro;	
			public String_Field Abrev;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public Boolean_Field Vigilada;	

			public vClientActivityRenXOtroRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				FechaSol		= new DateTime_Field(	_dst, 0, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				AgenteLocal		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vClientActivityRenXOtroRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClientActivityRenXOtro : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClientActivityRenXOtro";
	
		
		public vClientActivityRenXOtroRow Dat;
		public vClientActivityRenXOtroRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClientActivityRenXOtro( DataTable tab ) : base() 
		{
			_dbTableName = "vClientActivityRenXOtro";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityRenXOtroRow( _dst, false );
			Old = new vClientActivityRenXOtroRow( _dst , true );
		}
		
		
		public vClientActivityRenXOtro( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClientActivityRenXOtro";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityRenXOtroRow( _dst, false );
			Old = new vClientActivityRenXOtroRow( _dst , true );
		}
				
		public vClientActivityRenXOtro( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClientActivityRenXOtro() : base() 
		{
			Init();
		}
		
		public vClientActivityRenXOtro( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClientActivityRenXOtro";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "FechaSol", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocal", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityRenXOtroRow( _dst, false );
			Old = new vClientActivityRenXOtroRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClientActivityRenXOtroAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClientActivityRenXOtro

#region vClientActivityAgentes
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClientActivityAgentesRow 
		{
			private  DSTab _dst;
			
			public Int_Field AgenteLocalID;	
			public Int_Field AgenteLocalMatricula;	
			public String_Field AgenteLocalNombre;	
			public Int_Field ClienteID;	

			public vClientActivityAgentesRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				AgenteLocalID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AgenteLocalMatricula		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AgenteLocalNombre		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vClientActivityAgentesRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClientActivityAgentes : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClientActivityAgentes";
	
		
		public vClientActivityAgentesRow Dat;
		public vClientActivityAgentesRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClientActivityAgentes( DataTable tab ) : base() 
		{
			_dbTableName = "vClientActivityAgentes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityAgentesRow( _dst, false );
			Old = new vClientActivityAgentesRow( _dst , true );
		}
		
		
		public vClientActivityAgentes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClientActivityAgentes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityAgentesRow( _dst, false );
			Old = new vClientActivityAgentesRow( _dst , true );
		}
				
		public vClientActivityAgentes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClientActivityAgentes() : base() 
		{
			Init();
		}
		
		public vClientActivityAgentes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClientActivityAgentes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalMatricula", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalNombre", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityAgentesRow( _dst, false );
			Old = new vClientActivityAgentesRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClientActivityAgentesAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClientActivityAgentes

#region estad_renovados_berke
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_renovados_berkeRow 
		{
			private  DSTab _dst;
			
			public Int_Field cantidad;	
			public Int_Field anho;	

			public estad_renovados_berkeRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cantidad		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				anho		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class estad_renovados_berkeRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_renovados_berke : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_renovados_berke";
	
		
		public estad_renovados_berkeRow Dat;
		public estad_renovados_berkeRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_renovados_berke( DataTable tab ) : base() 
		{
			_dbTableName = "estad_renovados_berke";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovados_berkeRow( _dst, false );
			Old = new estad_renovados_berkeRow( _dst , true );
		}
		
		
		public estad_renovados_berke( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_renovados_berke";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovados_berkeRow( _dst, false );
			Old = new estad_renovados_berkeRow( _dst , true );
		}
				
		public estad_renovados_berke( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_renovados_berke() : base() 
		{
			Init();
		}
		
		public estad_renovados_berke( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_renovados_berke";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "anho", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_renovados_berkeRow( _dst, false );
			Old = new estad_renovados_berkeRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_renovados_berkeAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_renovados_berke

#region estad_presentadas_mes
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_presentadas_mesRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field abrev;	
			public Int_Field cantidad;	
			public Int_Field mes;	

			public estad_presentadas_mesRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				cantidad		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				mes		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class estad_presentadas_mesRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_presentadas_mes : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_presentadas_mes";
	
		
		public estad_presentadas_mesRow Dat;
		public estad_presentadas_mesRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_presentadas_mes( DataTable tab ) : base() 
		{
			_dbTableName = "estad_presentadas_mes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_presentadas_mesRow( _dst, false );
			Old = new estad_presentadas_mesRow( _dst , true );
		}
		
		
		public estad_presentadas_mes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_presentadas_mes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_presentadas_mesRow( _dst, false );
			Old = new estad_presentadas_mesRow( _dst , true );
		}
				
		public estad_presentadas_mes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_presentadas_mes() : base() 
		{
			Init();
		}
		
		public estad_presentadas_mes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_presentadas_mes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "mes", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_presentadas_mesRow( _dst, false );
			Old = new estad_presentadas_mesRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_presentadas_mesAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_presentadas_mes

#region estad_tramites_concedidos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_tramites_concedidosRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field abrev;	
			public Int_Field cantidad;	
			public Int_Field mes;	

			public estad_tramites_concedidosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				cantidad		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				mes		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class estad_tramites_concedidosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_tramites_concedidos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_tramites_concedidos";
	
		
		public estad_tramites_concedidosRow Dat;
		public estad_tramites_concedidosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_tramites_concedidos( DataTable tab ) : base() 
		{
			_dbTableName = "estad_tramites_concedidos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_concedidosRow( _dst, false );
			Old = new estad_tramites_concedidosRow( _dst , true );
		}
		
		
		public estad_tramites_concedidos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_tramites_concedidos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_concedidosRow( _dst, false );
			Old = new estad_tramites_concedidosRow( _dst , true );
		}
				
		public estad_tramites_concedidos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_tramites_concedidos() : base() 
		{
			Init();
		}
		
		public estad_tramites_concedidos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_tramites_concedidos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "cantidad", typeof( int ) );  
			_dt.Columns.Add( "mes", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_concedidosRow( _dst, false );
			Old = new estad_tramites_concedidosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_tramites_concedidosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_tramites_concedidos

#region vRenovados
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRenovadosRow 
		{
			private  DSTab _dst;
			
			public Int_Field CorrespNro;	
			public Int_Field CorrespAnio;	
			public Int_Field ExpedienteID;	
			public Int_Field ExpePadre;	
			public String_Field Registro;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public String_Field Denominacion;	
			public Int_Field Clase;	
			public String_Field OrdenTrabajo;	
			public String_Field Acta;	
			public DateTime_Field FechaInstruccion;	

			public vRenovadosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				CorrespNro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				CorrespAnio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ExpePadre		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				FechaInstruccion		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vRenovadosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRenovados : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRenovados";
	
		
		public vRenovadosRow Dat;
		public vRenovadosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRenovados( DataTable tab ) : base() 
		{
			_dbTableName = "vRenovados";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadosRow( _dst, false );
			Old = new vRenovadosRow( _dst , true );
		}
		
		
		public vRenovados( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRenovados";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadosRow( _dst, false );
			Old = new vRenovadosRow( _dst , true );
		}
				
		public vRenovados( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRenovados() : base() 
		{
			Init();
		}
		
		public vRenovados( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRenovados";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "CorrespNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespAnio", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ExpePadre", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "FechaInstruccion", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadosRow( _dst, false );
			Old = new vRenovadosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRenovadosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRenovados

#region estad_HIpresentadas_pordia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_HIpresentadas_pordiaRow 
		{
			private  DSTab _dst;
			
			public Int_Field cantidadHI;	
			public Int_Field tramiteid;	
			public String_Field abrev;	
			public Int_Field dia;	
			public Int_Field mes;	
			public Int_Field anho;	

			public estad_HIpresentadas_pordiaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cantidadHI		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				dia		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				mes		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				anho		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class estad_HIpresentadas_pordiaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_HIpresentadas_pordia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_HIpresentadas_pordia";
	
		
		public estad_HIpresentadas_pordiaRow Dat;
		public estad_HIpresentadas_pordiaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_HIpresentadas_pordia( DataTable tab ) : base() 
		{
			_dbTableName = "estad_HIpresentadas_pordia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_HIpresentadas_pordiaRow( _dst, false );
			Old = new estad_HIpresentadas_pordiaRow( _dst , true );
		}
		
		
		public estad_HIpresentadas_pordia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_HIpresentadas_pordia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_HIpresentadas_pordiaRow( _dst, false );
			Old = new estad_HIpresentadas_pordiaRow( _dst , true );
		}
				
		public estad_HIpresentadas_pordia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_HIpresentadas_pordia() : base() 
		{
			Init();
		}
		
		public estad_HIpresentadas_pordia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_HIpresentadas_pordia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cantidadHI", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "dia", typeof( int ) );  
			_dt.Columns.Add( "mes", typeof( int ) );  
			_dt.Columns.Add( "anho", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_HIpresentadas_pordiaRow( _dst, false );
			Old = new estad_HIpresentadas_pordiaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_HIpresentadas_pordiaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_HIpresentadas_pordia

#region estad_tramites_pordia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class estad_tramites_pordiaRow 
		{
			private  DSTab _dst;
			
			public Int_Field dia;	
			public Int_Field REG;	
			public Int_Field REN;	
			public Int_Field TRA;	
			public Int_Field NOM;	
			public Int_Field FUS;	
			public Int_Field DOM;	
			public Int_Field LIC;	
			public Int_Field DUP;	
			public Int_Field TOTAL;	

			public estad_tramites_pordiaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				dia		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				REG		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				REN		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TRA		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				NOM		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				FUS		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				DOM		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				LIC		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				DUP		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				TOTAL		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class estad_tramites_pordiaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class estad_tramites_pordia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "estad_tramites_pordia";
	
		
		public estad_tramites_pordiaRow Dat;
		public estad_tramites_pordiaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public estad_tramites_pordia( DataTable tab ) : base() 
		{
			_dbTableName = "estad_tramites_pordia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_pordiaRow( _dst, false );
			Old = new estad_tramites_pordiaRow( _dst , true );
		}
		
		
		public estad_tramites_pordia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "estad_tramites_pordia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_pordiaRow( _dst, false );
			Old = new estad_tramites_pordiaRow( _dst , true );
		}
				
		public estad_tramites_pordia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public estad_tramites_pordia() : base() 
		{
			Init();
		}
		
		public estad_tramites_pordia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "estad_tramites_pordia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "dia", typeof( int ) );  
			_dt.Columns.Add( "REG", typeof( int ) );  
			_dt.Columns.Add( "REN", typeof( int ) );  
			_dt.Columns.Add( "TRA", typeof( int ) );  
			_dt.Columns.Add( "NOM", typeof( int ) );  
			_dt.Columns.Add( "FUS", typeof( int ) );  
			_dt.Columns.Add( "DOM", typeof( int ) );  
			_dt.Columns.Add( "LIC", typeof( int ) );  
			_dt.Columns.Add( "DUP", typeof( int ) );  
			_dt.Columns.Add( "TOTAL", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new estad_tramites_pordiaRow( _dst, false );
			Old = new estad_tramites_pordiaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.estad_tramites_pordiaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion estad_tramites_pordia

#region vClientActivityMarcas
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClientActivityMarcasRow 
		{
			private  DSTab _dst;
			
			public DateTime_Field FechaSol;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field TramiteID;	
			public Int_Field Clase;	
			public String_Field MarcaTipo;	
			public String_Field Denominacion;	
			public Int_Field AgenteLocal;	
			public Int_Field RegistroNro;	
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public String_Field Abrev;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Nuestra;	
			public DateTime_Field VencimientoFecha;	

			public vClientActivityMarcasRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				FechaSol		= new DateTime_Field(	_dst, 0, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				AgenteLocal		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vClientActivityMarcasRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClientActivityMarcas : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClientActivityMarcas";
	
		
		public vClientActivityMarcasRow Dat;
		public vClientActivityMarcasRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClientActivityMarcas( DataTable tab ) : base() 
		{
			_dbTableName = "vClientActivityMarcas";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityMarcasRow( _dst, false );
			Old = new vClientActivityMarcasRow( _dst , true );
		}
		
		
		public vClientActivityMarcas( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClientActivityMarcas";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityMarcasRow( _dst, false );
			Old = new vClientActivityMarcasRow( _dst , true );
		}
				
		public vClientActivityMarcas( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClientActivityMarcas() : base() 
		{
			Init();
		}
		
		public vClientActivityMarcas( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClientActivityMarcas";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "FechaSol", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocal", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientActivityMarcasRow( _dst, false );
			Old = new vClientActivityMarcasRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClientActivityMarcasAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClientActivityMarcas

#region vTrBoletin
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTrBoletinRow 
		{
			private  DSTab _dst;
			
			public String_Field tramite;	

			public vTrBoletinRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tramite		= new String_Field(	_dst, 0, IsOldDataVersion  );	
			}
		} // end class vTrBoletinRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTrBoletin : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTrBoletin";
	
		
		public vTrBoletinRow Dat;
		public vTrBoletinRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTrBoletin( DataTable tab ) : base() 
		{
			_dbTableName = "vTrBoletin";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTrBoletinRow( _dst, false );
			Old = new vTrBoletinRow( _dst , true );
		}
		
		
		public vTrBoletin( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTrBoletin";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTrBoletinRow( _dst, false );
			Old = new vTrBoletinRow( _dst , true );
		}
				
		public vTrBoletin( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTrBoletin() : base() 
		{
			Init();
		}
		
		public vTrBoletin( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTrBoletin";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tramite", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTrBoletinRow( _dst, false );
			Old = new vTrBoletinRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTrBoletinAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTrBoletin

#region vExpeMarcaHD
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeMarcaHDRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field ExpedienteIDPadre;	
			public String_Field Registro;	
			public String_Field OrdenTrabajo;	
			public String_Field Denominacion;	
			public String_Field Clase;	
			public Int_Field ClaseNro;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDecrip;	
			public Boolean_Field EnTramite;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field AltaFecha;	
			public Int_Field PropietarioID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioPais;	
			public Int_Field ClaseID;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public Int_Field MarcaID;	
			public String_Field Label;	
			public Boolean_Field ExpeNuestro;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field MarcaNuestra;	
			public Boolean_Field MarcaActiva;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field RegVigenteVencim;	
			public Int_Field RegVigenteNro;	
			public Int_Field RegVigenteAnio;	
			public DateTime_Field RegVigenteConcesionFecha;	
			public Boolean_Field Vigente;	
			public Boolean_Field RegistroVigente;	
			public String_Field ActaPadre;	
			public String_Field DenominacionClave;	
			public String_Field MarcaTipo;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field LogotipoID;	
			public String_Field NombreCliente;	
			public Int_Field bolanio;	
			public Int_Field bolnro;	
			public String_Field str_public;	

			public vExpeMarcaHDRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteIDPadre		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				SituacionDecrip		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				ExpeNuestro		= new Boolean_Field(	_dst, 31, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				MarcaNuestra		= new Boolean_Field(	_dst, 34, IsOldDataVersion  );	
				MarcaActiva		= new Boolean_Field(	_dst, 35, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 36, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 37, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 38, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 39, IsOldDataVersion  );	
				RegVigenteVencim		= new DateTime_Field(	_dst, 40, IsOldDataVersion  );	
				RegVigenteNro		= new Int_Field(	_dst, 41, IsOldDataVersion  );	
				RegVigenteAnio		= new Int_Field(	_dst, 42, IsOldDataVersion  );	
				RegVigenteConcesionFecha		= new DateTime_Field(	_dst, 43, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 44, IsOldDataVersion  );	
				RegistroVigente		= new Boolean_Field(	_dst, 45, IsOldDataVersion  );	
				ActaPadre		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 47, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 48, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 49, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 50, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				NombreCliente		= new String_Field(	_dst, 52, IsOldDataVersion  );	
				bolanio		= new Int_Field(	_dst, 53, IsOldDataVersion  );	
				bolnro		= new Int_Field(	_dst, 54, IsOldDataVersion  );	
				str_public		= new String_Field(	_dst, 55, IsOldDataVersion  );	
			}
		} // end class vExpeMarcaHDRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeMarcaHD : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeMarcaHD";
	
		
		public vExpeMarcaHDRow Dat;
		public vExpeMarcaHDRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeMarcaHD( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeMarcaHD";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaHDRow( _dst, false );
			Old = new vExpeMarcaHDRow( _dst , true );
		}
		
		
		public vExpeMarcaHD( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeMarcaHD";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaHDRow( _dst, false );
			Old = new vExpeMarcaHDRow( _dst , true );
		}
				
		public vExpeMarcaHD( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeMarcaHD() : base() 
		{
			Init();
		}
		
		public vExpeMarcaHD( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeMarcaHD";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDecrip", typeof( String ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "ExpeNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaActiva", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteNro", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteAnio", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RegistroVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaPadre", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "NombreCliente", typeof( String ) );  
			_dt.Columns.Add( "bolanio", typeof( int ) );  
			_dt.Columns.Add( "bolnro", typeof( int ) );  
			_dt.Columns.Add( "str_public", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaHDRow( _dst, false );
			Old = new vExpeMarcaHDRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeMarcaHDAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeMarcaHD

#region vLogoCateg
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vLogoCategRow 
		{
			private  DSTab _dst;
			
			public Int_Field LogotipoCategID;	
			public Int_Field CategoriaID;	
			public String_Field Categoria;	
			public String_Field Descripcion;	
			public String_Field Clave;	
			public Int_Field CategoriaID1;	
			public Int_Field LogoID;	

			public vLogoCategRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				LogotipoCategID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				CategoriaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Categoria		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clave		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				CategoriaID1		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				LogoID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vLogoCategRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vLogoCateg : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vLogoCateg";
	
		
		public vLogoCategRow Dat;
		public vLogoCategRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vLogoCateg( DataTable tab ) : base() 
		{
			_dbTableName = "vLogoCateg";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vLogoCategRow( _dst, false );
			Old = new vLogoCategRow( _dst , true );
		}
		
		
		public vLogoCateg( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vLogoCateg";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vLogoCategRow( _dst, false );
			Old = new vLogoCategRow( _dst , true );
		}
				
		public vLogoCateg( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vLogoCateg() : base() 
		{
			Init();
		}
		
		public vLogoCateg( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vLogoCateg";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "LogotipoCategID", typeof( int ) );  
			_dt.Columns.Add( "CategoriaID", typeof( int ) );  
			_dt.Columns.Add( "Categoria", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "Clave", typeof( String ) );  
			_dt.Columns.Add( "CategoriaID1", typeof( int ) );  
			_dt.Columns.Add( "LogoID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vLogoCategRow( _dst, false );
			Old = new vLogoCategRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vLogoCategAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vLogoCateg

#region vRenovadasSinHIActa
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRenovadasSinHIActaRow 
		{
			private  DSTab _dst;
			
			public Int_Field CorrespNro;	
			public Int_Field CorrespAnio;	
			public Int_Field ExpedienteID;	
			public Int_Field ExpePadre;	
			public String_Field Registro;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public String_Field Denominacion;	
			public Int_Field Clase;	
			public Int_Field OrdenTrabajo;	
			public Int_Field Acta;	
			public DateTime_Field FechaInstruccion;	

			public vRenovadasSinHIActaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				CorrespNro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				CorrespAnio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ExpePadre		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				OrdenTrabajo		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Acta		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				FechaInstruccion		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vRenovadasSinHIActaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRenovadasSinHIActa : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRenovadasSinHIActa";
	
		
		public vRenovadasSinHIActaRow Dat;
		public vRenovadasSinHIActaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRenovadasSinHIActa( DataTable tab ) : base() 
		{
			_dbTableName = "vRenovadasSinHIActa";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadasSinHIActaRow( _dst, false );
			Old = new vRenovadasSinHIActaRow( _dst , true );
		}
		
		
		public vRenovadasSinHIActa( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRenovadasSinHIActa";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadasSinHIActaRow( _dst, false );
			Old = new vRenovadasSinHIActaRow( _dst , true );
		}
				
		public vRenovadasSinHIActa( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRenovadasSinHIActa() : base() 
		{
			Init();
		}
		
		public vRenovadasSinHIActa( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRenovadasSinHIActa";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "CorrespNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespAnio", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ExpePadre", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( int ) );  
			_dt.Columns.Add( "FechaInstruccion", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRenovadasSinHIActaRow( _dst, false );
			Old = new vRenovadasSinHIActaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRenovadasSinHIActaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRenovadasSinHIActa

#region vLogo
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vLogoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Denominacion;	
			public DateTime_Field FechaAlta;	
			public Int_Field FuncionarioID;	
			public String_Field Usuario;	
			public String_Field Nombre;	

			public vLogoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Usuario		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vLogoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vLogo : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vLogo";
	
		
		public vLogoRow Dat;
		public vLogoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vLogo( DataTable tab ) : base() 
		{
			_dbTableName = "vLogo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vLogoRow( _dst, false );
			Old = new vLogoRow( _dst , true );
		}
		
		
		public vLogo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vLogo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vLogoRow( _dst, false );
			Old = new vLogoRow( _dst , true );
		}
				
		public vLogo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vLogo() : base() 
		{
			Init();
		}
		
		public vLogo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vLogo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Usuario", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vLogoRow( _dst, false );
			Old = new vLogoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vLogoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vLogo

#region vMarcaClientePropietarioTVS
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaClientePropietarioTVSRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field DescripBreve;	
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field Registro;	
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public String_Field Propietario;	
			public String_Field Cliente;	
			public Int_Field TramiteID;	
			public String_Field Abrev;	

			public vMarcaClientePropietarioTVSRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Registro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Cliente		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class vMarcaClientePropietarioTVSRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaClientePropietarioTVS : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaClientePropietarioTVS";
	
		
		public vMarcaClientePropietarioTVSRow Dat;
		public vMarcaClientePropietarioTVSRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaClientePropietarioTVS( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaClientePropietarioTVS";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClientePropietarioTVSRow( _dst, false );
			Old = new vMarcaClientePropietarioTVSRow( _dst , true );
		}
		
		
		public vMarcaClientePropietarioTVS( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaClientePropietarioTVS";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClientePropietarioTVSRow( _dst, false );
			Old = new vMarcaClientePropietarioTVSRow( _dst , true );
		}
				
		public vMarcaClientePropietarioTVS( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaClientePropietarioTVS() : base() 
		{
			Init();
		}
		
		public vMarcaClientePropietarioTVS( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaClientePropietarioTVS";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Registro", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Cliente", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClientePropietarioTVSRow( _dst, false );
			Old = new vMarcaClientePropietarioTVSRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaClientePropietarioTVSAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaClientePropietarioTVS

#region vTipoAvisoPl
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTipoAvisoPlRow 
		{
			private  DSTab _dst;
			
			public Int_Field tipoAvisoID;	
			public Int_Field plantillaID;	
			public Int_Field idiomaID;	
			public Int_Field tramiteid;	
			public String_Field plantillahtml;	
			public Boolean_Field plural;	

			public vTipoAvisoPlRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				tipoAvisoID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				plantillaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				idiomaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				plantillahtml		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				plural		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vTipoAvisoPlRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTipoAvisoPl : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTipoAvisoPl";
	
		
		public vTipoAvisoPlRow Dat;
		public vTipoAvisoPlRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTipoAvisoPl( DataTable tab ) : base() 
		{
			_dbTableName = "vTipoAvisoPl";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlRow( _dst, false );
			Old = new vTipoAvisoPlRow( _dst , true );
		}
		
		
		public vTipoAvisoPl( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTipoAvisoPl";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlRow( _dst, false );
			Old = new vTipoAvisoPlRow( _dst , true );
		}
				
		public vTipoAvisoPl( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTipoAvisoPl() : base() 
		{
			Init();
		}
		
		public vTipoAvisoPl( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTipoAvisoPl";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "tipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "plantillaID", typeof( int ) );  
			_dt.Columns.Add( "idiomaID", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "plantillahtml", typeof( String ) );  
			_dt.Columns.Add( "plural", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlRow( _dst, false );
			Old = new vTipoAvisoPlRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTipoAvisoPlAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTipoAvisoPl

#region vMenuSistema
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMenuSistemaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	
			public String_Field Shorcut;	
			public String_Field Ayuda;	
			public Int_Field MenuSistemaID;	
			public String_Field Estado;	
			public Boolean_Field Visible;	
			public String_Field CodOpInterno;	
			public Int_Field OperacionID;	
			public Int_Field NotificacionID;	
			public Boolean_Field Auditar;	
			public String_Field Tipo;	
			public String_Field Orden;	
			public String_Field IconPath;	
			public Int_Field UsuarioID;	

			public vMenuSistemaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Shorcut		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Ayuda		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				MenuSistemaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Visible		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				CodOpInterno		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				OperacionID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				NotificacionID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Auditar		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				Orden		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				IconPath		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				UsuarioID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vMenuSistemaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMenuSistema : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMenuSistema";
	
		
		public vMenuSistemaRow Dat;
		public vMenuSistemaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMenuSistema( DataTable tab ) : base() 
		{
			_dbTableName = "vMenuSistema";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMenuSistemaRow( _dst, false );
			Old = new vMenuSistemaRow( _dst , true );
		}
		
		
		public vMenuSistema( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMenuSistema";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMenuSistemaRow( _dst, false );
			Old = new vMenuSistemaRow( _dst , true );
		}
				
		public vMenuSistema( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMenuSistema() : base() 
		{
			Init();
		}
		
		public vMenuSistema( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMenuSistema";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "Shorcut", typeof( String ) );  
			_dt.Columns.Add( "Ayuda", typeof( String ) );  
			_dt.Columns.Add( "MenuSistemaID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Visible", typeof( Boolean ) );  
			_dt.Columns.Add( "CodOpInterno", typeof( String ) );  
			_dt.Columns.Add( "OperacionID", typeof( int ) );  
			_dt.Columns.Add( "NotificacionID", typeof( int ) );  
			_dt.Columns.Add( "Auditar", typeof( Boolean ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "Orden", typeof( String ) );  
			_dt.Columns.Add( "IconPath", typeof( String ) );  
			_dt.Columns.Add( "UsuarioID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMenuSistemaRow( _dst, false );
			Old = new vMenuSistemaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMenuSistemaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMenuSistema

#region vMarcaBaseCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaBaseCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Denominacion;	
			public Int_Field ClaseNro;	
			public Int_Field BusOpoCabID;	
			public Int_Field RegistroNro;	
			public DateTime_Field ConsecionFecha;	
			public DateTime_Field SolicitudFecha;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public String_Field ClienteNombre;	
			public Int_Field ClienteID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public String_Field AgenteLocalNombre;	
			public Int_Field AgenteLocalMatricula;	

			public vMarcaBaseCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				BusOpoCabID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ConsecionFecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				SolicitudFecha		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				AgenteLocalNombre		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				AgenteLocalMatricula		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
			}
		} // end class vMarcaBaseCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaBaseCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaBaseCab";
	
		
		public vMarcaBaseCabRow Dat;
		public vMarcaBaseCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaBaseCab( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaBaseCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaBaseCabRow( _dst, false );
			Old = new vMarcaBaseCabRow( _dst , true );
		}
		
		
		public vMarcaBaseCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaBaseCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaBaseCabRow( _dst, false );
			Old = new vMarcaBaseCabRow( _dst , true );
		}
				
		public vMarcaBaseCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaBaseCab() : base() 
		{
			Init();
		}
		
		public vMarcaBaseCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaBaseCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ConsecionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SolicitudFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "AgenteLocalNombre", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocalMatricula", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaBaseCabRow( _dst, false );
			Old = new vMarcaBaseCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaBaseCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaBaseCab

#region vBoletinDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBoletinDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field BoletinID;	
			public DateTime_Field SolicitudFecha;	
			public Int_Field ExpNro;	
			public Int_Field ExpAnio;	
			public String_Field Clase;	
			public String_Field MarcaTipo;	
			public String_Field Tramite;	
			public String_Field Denominacion;	
			public String_Field Propietario;	
			public String_Field Pais;	
			public String_Field AgenteLocal;	
			public Int_Field RefNro;	
			public Int_Field RefAnio;	
			public Int_Field RefRegNro;	
			public Int_Field RefRegAnio;	
			public String_Field Obs;	
			public Boolean_Field Enlazado;	
			public Boolean_Field Incorporado;	
			public Int_Field ExpedienteID;	
			public Int_Field BolAnio;	
			public Int_Field BolNro;	
			public Boolean_Field Importado;	
			public Boolean_Field Completo;	
			public Int_Field NizaEdicionID;	
			public String_Field ClaseTipo;	
			public Int_Field ClaseID;	
			public String_Field Nombre;	
			public Boolean_Field Nuestro;	

			public vBoletinDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BoletinID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SolicitudFecha		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				ExpNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Pais		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				AgenteLocal		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				RefNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				RefAnio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				RefRegNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RefRegAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Enlazado		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Incorporado		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Importado		= new Boolean_Field(	_dst, 22, IsOldDataVersion  );	
				Completo		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				ClaseTipo		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				Nuestro		= new Boolean_Field(	_dst, 28, IsOldDataVersion  );	
			}
		} // end class vBoletinDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBoletinDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBoletinDet";
	
		
		public vBoletinDetRow Dat;
		public vBoletinDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBoletinDet( DataTable tab ) : base() 
		{
			_dbTableName = "vBoletinDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinDetRow( _dst, false );
			Old = new vBoletinDetRow( _dst , true );
		}
		
		
		public vBoletinDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBoletinDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinDetRow( _dst, false );
			Old = new vBoletinDetRow( _dst , true );
		}
				
		public vBoletinDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBoletinDet() : base() 
		{
			Init();
		}
		
		public vBoletinDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBoletinDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "BoletinID", typeof( int ) );  
			_dt.Columns.Add( "SolicitudFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ExpNro", typeof( int ) );  
			_dt.Columns.Add( "ExpAnio", typeof( int ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Pais", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocal", typeof( String ) );  
			_dt.Columns.Add( "RefNro", typeof( int ) );  
			_dt.Columns.Add( "RefAnio", typeof( int ) );  
			_dt.Columns.Add( "RefRegNro", typeof( int ) );  
			_dt.Columns.Add( "RefRegAnio", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Enlazado", typeof( Boolean ) );  
			_dt.Columns.Add( "Incorporado", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "Importado", typeof( Boolean ) );  
			_dt.Columns.Add( "Completo", typeof( Boolean ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "ClaseTipo", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Nuestro", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBoletinDetRow( _dst, false );
			Old = new vBoletinDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBoletinDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBoletinDet

#region vSuscriptosMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSuscriptosMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field MarcaTipoID;	
			public Int_Field ClaseNro;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Int_Field MarcaRegRenID;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public Boolean_Field Vigente;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public DateTime_Field PresentacionFecha;	
			public Int_Field TramiteID;	
			public Int_Field ExpedienteID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field SuscripcionID;	
			public Int_Field ClienteID;	
			public String_Field SuscripcionEstado;	
			public String_Field ClaseIDLista;	

			public vSuscriptosMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				SuscripcionID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				SuscripcionEstado		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				ClaseIDLista		= new String_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vSuscriptosMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSuscriptosMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSuscriptosMarca";
	
		
		public vSuscriptosMarcaRow Dat;
		public vSuscriptosMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSuscriptosMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vSuscriptosMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscriptosMarcaRow( _dst, false );
			Old = new vSuscriptosMarcaRow( _dst , true );
		}
		
		
		public vSuscriptosMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSuscriptosMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscriptosMarcaRow( _dst, false );
			Old = new vSuscriptosMarcaRow( _dst , true );
		}
				
		public vSuscriptosMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSuscriptosMarca() : base() 
		{
			Init();
		}
		
		public vSuscriptosMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSuscriptosMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionEstado", typeof( String ) );  
			_dt.Columns.Add( "ClaseIDLista", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscriptosMarcaRow( _dst, false );
			Old = new vSuscriptosMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSuscriptosMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSuscriptosMarca

#region vSuscriptosMarcaExt
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSuscriptosMarcaExtRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field ClaseNro;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field SuscripcionID;	
			public Int_Field ClienteID;	
			public String_Field SuscripcionEstado;	
			public String_Field ClaseIDLista;	

			public vSuscriptosMarcaExtRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				SuscripcionID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				SuscripcionEstado		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				ClaseIDLista		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vSuscriptosMarcaExtRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSuscriptosMarcaExt : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSuscriptosMarcaExt";
	
		
		public vSuscriptosMarcaExtRow Dat;
		public vSuscriptosMarcaExtRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSuscriptosMarcaExt( DataTable tab ) : base() 
		{
			_dbTableName = "vSuscriptosMarcaExt";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscriptosMarcaExtRow( _dst, false );
			Old = new vSuscriptosMarcaExtRow( _dst , true );
		}
		
		
		public vSuscriptosMarcaExt( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSuscriptosMarcaExt";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscriptosMarcaExtRow( _dst, false );
			Old = new vSuscriptosMarcaExtRow( _dst , true );
		}
				
		public vSuscriptosMarcaExt( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSuscriptosMarcaExt() : base() 
		{
			Init();
		}
		
		public vSuscriptosMarcaExt( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSuscriptosMarcaExt";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionEstado", typeof( String ) );  
			_dt.Columns.Add( "ClaseIDLista", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscriptosMarcaExtRow( _dst, false );
			Old = new vSuscriptosMarcaExtRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSuscriptosMarcaExtAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSuscriptosMarcaExt

#region vPropClienteInstruccion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropClienteInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field clienteID;	
			public Int_Field propietarioID;	
			public DateTime_Field fecalta;	
			public Int_Field funcionarioregID;	
			public Int_Field funcionariorecID;	
			public String_Field obs;	
			public Int_Field correspondenciaID;	
			public Int_Field instrucciontipoID;	
			public Int_Field tipoavisoID;	
			public Boolean_Field excluir;	

			public vPropClienteInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				clienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				propietarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				fecalta		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				funcionarioregID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				funcionariorecID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				correspondenciaID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				instrucciontipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				tipoavisoID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				excluir		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class vPropClienteInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropClienteInstruccion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropClienteInstruccion";
	
		
		public vPropClienteInstruccionRow Dat;
		public vPropClienteInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropClienteInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "vPropClienteInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropClienteInstruccionRow( _dst, false );
			Old = new vPropClienteInstruccionRow( _dst , true );
		}
		
		
		public vPropClienteInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropClienteInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropClienteInstruccionRow( _dst, false );
			Old = new vPropClienteInstruccionRow( _dst , true );
		}
				
		public vPropClienteInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropClienteInstruccion() : base() 
		{
			Init();
		}
		
		public vPropClienteInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropClienteInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "clienteID", typeof( int ) );  
			_dt.Columns.Add( "propietarioID", typeof( int ) );  
			_dt.Columns.Add( "fecalta", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioregID", typeof( int ) );  
			_dt.Columns.Add( "funcionariorecID", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "correspondenciaID", typeof( int ) );  
			_dt.Columns.Add( "instrucciontipoID", typeof( int ) );  
			_dt.Columns.Add( "tipoavisoID", typeof( int ) );  
			_dt.Columns.Add( "excluir", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropClienteInstruccionRow( _dst, false );
			Old = new vPropClienteInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropClienteInstruccionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropClienteInstruccion

#region vClientesSuscriptos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClientesSuscriptosRow 
		{
			private  DSTab _dst;
			
			public String_Field Origen;	
			public String_Field ClienteExternoNom;	
			public String_Field FuncionarioRegNom;	
			public String_Field ClienteInternoNom;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field SuscripcionID;	
			public Int_Field ClienteID;	
			public String_Field SuscripcionEstado;	
			public Int_Field ClienteInternoID;	
			public Int_Field ClienteExternoID;	
			public String_Field Mail;	
			public String_Field Fax;	
			public DateTime_Field FecSuscripcion;	
			public DateTime_Field FecVencimiento;	
			public String_Field Estado;	
			public String_Field Msg;	
			public String_Field Obs;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecBaja;	
			public String_Field Tipo;	
			public String_Field Nombre;	
			public DateTime_Field FecAlta1;	
			public String_Field SituacionID;	
			public String_Field ClaseNro;	
			public String_Field TipoMarcaID;	
			public String_Field Tramites;	
			public String_Field Propietario;	
			public Int_Field Periodo;	
			public Boolean_Field FecVencSit;	
			public Boolean_Field Registrado;	
			public String_Field MailSubject;	

			public vClientesSuscriptosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Origen		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteExternoNom		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FuncionarioRegNom		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteInternoNom		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				SuscripcionID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				SuscripcionEstado		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ClienteInternoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteExternoID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Mail		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				FecSuscripcion		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				FecVencimiento		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				Msg		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				FecBaja		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				FecAlta1		= new DateTime_Field(	_dst, 21, IsOldDataVersion  );	
				SituacionID		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				ClaseNro		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				TipoMarcaID		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				Tramites		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				Periodo		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				FecVencSit		= new Boolean_Field(	_dst, 28, IsOldDataVersion  );	
				Registrado		= new Boolean_Field(	_dst, 29, IsOldDataVersion  );	
				MailSubject		= new String_Field(	_dst, 30, IsOldDataVersion  );	
			}
		} // end class vClientesSuscriptosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClientesSuscriptos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClientesSuscriptos";
	
		
		public vClientesSuscriptosRow Dat;
		public vClientesSuscriptosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClientesSuscriptos( DataTable tab ) : base() 
		{
			_dbTableName = "vClientesSuscriptos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientesSuscriptosRow( _dst, false );
			Old = new vClientesSuscriptosRow( _dst , true );
		}
		
		
		public vClientesSuscriptos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClientesSuscriptos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientesSuscriptosRow( _dst, false );
			Old = new vClientesSuscriptosRow( _dst , true );
		}
				
		public vClientesSuscriptos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClientesSuscriptos() : base() 
		{
			Init();
		}
		
		public vClientesSuscriptos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClientesSuscriptos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Origen", typeof( String ) );  
			_dt.Columns.Add( "ClienteExternoNom", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRegNom", typeof( String ) );  
			_dt.Columns.Add( "ClienteInternoNom", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionEstado", typeof( String ) );  
			_dt.Columns.Add( "ClienteInternoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoID", typeof( int ) );  
			_dt.Columns.Add( "Mail", typeof( String ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "FecSuscripcion", typeof( DateTime ) );  
			_dt.Columns.Add( "FecVencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Msg", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecBaja", typeof( DateTime ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "FecAlta1", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionID", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( String ) );  
			_dt.Columns.Add( "TipoMarcaID", typeof( String ) );  
			_dt.Columns.Add( "Tramites", typeof( String ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Periodo", typeof( int ) );  
			_dt.Columns.Add( "FecVencSit", typeof( Boolean ) );  
			_dt.Columns.Add( "Registrado", typeof( Boolean ) );  
			_dt.Columns.Add( "MailSubject", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClientesSuscriptosRow( _dst, false );
			Old = new vClientesSuscriptosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClientesSuscriptosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClientesSuscriptos

#region vTipoAvisoInsTip
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTipoAvisoInsTipRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TipoAvisoID;	
			public Int_Field InstruccionTipoID;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public Boolean_Field Excluir;	
			public String_Field TipoAvisoNombre;	
			public String_Field TipoAvisoDescripcion;	
			public String_Field InstruccionTipoDescripcion;	
			public String_Field InstruccionTipoAbrev;	
			public String_Field UsuarioNombre;	
			public String_Field UsuarioEmail;	

			public vTipoAvisoInsTipRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Excluir		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				TipoAvisoNombre		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TipoAvisoDescripcion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				InstruccionTipoDescripcion		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				InstruccionTipoAbrev		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				UsuarioNombre		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				UsuarioEmail		= new String_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class vTipoAvisoInsTipRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTipoAvisoInsTip : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTipoAvisoInsTip";
	
		
		public vTipoAvisoInsTipRow Dat;
		public vTipoAvisoInsTipRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTipoAvisoInsTip( DataTable tab ) : base() 
		{
			_dbTableName = "vTipoAvisoInsTip";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoInsTipRow( _dst, false );
			Old = new vTipoAvisoInsTipRow( _dst , true );
		}
		
		
		public vTipoAvisoInsTip( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTipoAvisoInsTip";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoInsTipRow( _dst, false );
			Old = new vTipoAvisoInsTipRow( _dst , true );
		}
				
		public vTipoAvisoInsTip( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTipoAvisoInsTip() : base() 
		{
			Init();
		}
		
		public vTipoAvisoInsTip( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTipoAvisoInsTip";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "Excluir", typeof( Boolean ) );  
			_dt.Columns.Add( "TipoAvisoNombre", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoDescripcion", typeof( String ) );  
			_dt.Columns.Add( "InstruccionTipoDescripcion", typeof( String ) );  
			_dt.Columns.Add( "InstruccionTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "UsuarioNombre", typeof( String ) );  
			_dt.Columns.Add( "UsuarioEmail", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoInsTipRow( _dst, false );
			Old = new vTipoAvisoInsTipRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTipoAvisoInsTipAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTipoAvisoInsTip

#region vTipoAvisoPlant
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTipoAvisoPlantRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Descripcion;	
			public Int_Field NroAviso;	
			public Int_Field PlantillaID;	
			public String_Field Tipo;	
			public String_Field MailOrigen;	
			public Int_Field TipoAvisoID;	
			public String_Field TipoAviso2Nombre;	
			public String_Field Clave;	
			public Int_Field TramiteID;	
			public Int_Field DocumentoTipoID;	
			public String_Field DocuDescripcion;	
			public String_Field DocuTipo;	
			public String_Field Idioma;	

			public vTipoAvisoPlantRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Descripcion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				NroAviso		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				TipoAviso2Nombre		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Clave		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				DocumentoTipoID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				DocuDescripcion		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				DocuTipo		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				Idioma		= new String_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vTipoAvisoPlantRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTipoAvisoPlant : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTipoAvisoPlant";
	
		
		public vTipoAvisoPlantRow Dat;
		public vTipoAvisoPlantRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTipoAvisoPlant( DataTable tab ) : base() 
		{
			_dbTableName = "vTipoAvisoPlant";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlantRow( _dst, false );
			Old = new vTipoAvisoPlantRow( _dst , true );
		}
		
		
		public vTipoAvisoPlant( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTipoAvisoPlant";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlantRow( _dst, false );
			Old = new vTipoAvisoPlantRow( _dst , true );
		}
				
		public vTipoAvisoPlant( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTipoAvisoPlant() : base() 
		{
			Init();
		}
		
		public vTipoAvisoPlant( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTipoAvisoPlant";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Descripcion", typeof( String ) );  
			_dt.Columns.Add( "NroAviso", typeof( int ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "TipoAviso2Nombre", typeof( String ) );  
			_dt.Columns.Add( "Clave", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "DocumentoTipoID", typeof( int ) );  
			_dt.Columns.Add( "DocuDescripcion", typeof( String ) );  
			_dt.Columns.Add( "DocuTipo", typeof( String ) );  
			_dt.Columns.Add( "Idioma", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlantRow( _dst, false );
			Old = new vTipoAvisoPlantRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTipoAvisoPlantAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTipoAvisoPlant

#region vAvisoOpoDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisoOpoDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	
			public Int_Field AvisoOpoCabID;	
			public Int_Field Chance;	
			public Int_Field MarcaSolID;	
			public Int_Field MarcaSolHistID;	
			public Int_Field MarcaBaseHistID;	
			public Int_Field BusOpoCabID;	
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public String_Field Estado;	
			public Int_Field IdiomaID;	
			public Int_Field ModoEnvioID;	
			public Int_Field TipoAvisoID;	
			public Int_Field FuncionarioGenID;	
			public Int_Field FuncionarioEnvioID;	
			public DateTime_Field FecGen;	
			public DateTime_Field FecEnvio;	
			public Int_Field NroAviso;	

			public vAvisoOpoDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AvisoOpoCabID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Chance		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MarcaSolID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaSolHistID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				MarcaBaseHistID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				BusOpoCabID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				FuncionarioGenID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				FuncionarioEnvioID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				FecGen		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				NroAviso		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
			}
		} // end class vAvisoOpoDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisoOpoDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisoOpoDet";
	
		
		public vAvisoOpoDetRow Dat;
		public vAvisoOpoDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisoOpoDet( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisoOpoDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoOpoDetRow( _dst, false );
			Old = new vAvisoOpoDetRow( _dst , true );
		}
		
		
		public vAvisoOpoDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisoOpoDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoOpoDetRow( _dst, false );
			Old = new vAvisoOpoDetRow( _dst , true );
		}
				
		public vAvisoOpoDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisoOpoDet() : base() 
		{
			Init();
		}
		
		public vAvisoOpoDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisoOpoDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "Chance", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "FecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "NroAviso", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoOpoDetRow( _dst, false );
			Old = new vAvisoOpoDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisoOpoDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisoOpoDet

#region vig_ExpeMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vig_ExpeMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public Int_Field ExpedienteIDPadre;	
			public String_Field OrdenTrabajo;	
			public String_Field Denominacion;	
			public String_Field Clase;	
			public Int_Field ClaseNro;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDecrip;	
			public Boolean_Field EnTramite;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field AltaFecha;	
			public Int_Field PropietarioID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioDireccion;	
			public String_Field PropietarioPais;	
			public Int_Field ClaseID;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public Int_Field MarcaID;	
			public String_Field Label;	
			public Boolean_Field ExpeNuestro;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field MarcaNuestra;	
			public Boolean_Field MarcaActiva;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field RegVigenteVencim;	
			public Int_Field RegVigenteNro;	
			public Int_Field RegVigenteAnio;	
			public DateTime_Field RegVigenteConcesionFecha;	
			public Boolean_Field Vigente;	
			public Boolean_Field RegistroVigente;	
			public String_Field ActaPadre;	
			public String_Field DenominacionClave;	
			public String_Field MarcaTipo;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field LogotipoID;	
			public String_Field NombreCliente;	
			public Int_Field AgenteLocalID1;	
			public String_Field NombreAgenteLocal;	

			public vig_ExpeMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteIDPadre		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				SituacionDecrip		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 18, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				PropietarioDireccion		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				ExpeNuestro		= new Boolean_Field(	_dst, 30, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
				MarcaNuestra		= new Boolean_Field(	_dst, 33, IsOldDataVersion  );	
				MarcaActiva		= new Boolean_Field(	_dst, 34, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 35, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 36, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 37, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 38, IsOldDataVersion  );	
				RegVigenteVencim		= new DateTime_Field(	_dst, 39, IsOldDataVersion  );	
				RegVigenteNro		= new Int_Field(	_dst, 40, IsOldDataVersion  );	
				RegVigenteAnio		= new Int_Field(	_dst, 41, IsOldDataVersion  );	
				RegVigenteConcesionFecha		= new DateTime_Field(	_dst, 42, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 43, IsOldDataVersion  );	
				RegistroVigente		= new Boolean_Field(	_dst, 44, IsOldDataVersion  );	
				ActaPadre		= new String_Field(	_dst, 45, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 47, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 48, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 49, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 50, IsOldDataVersion  );	
				NombreCliente		= new String_Field(	_dst, 51, IsOldDataVersion  );	
				AgenteLocalID1		= new Int_Field(	_dst, 52, IsOldDataVersion  );	
				NombreAgenteLocal		= new String_Field(	_dst, 53, IsOldDataVersion  );	
			}
		} // end class vig_ExpeMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vig_ExpeMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vig_ExpeMarca";
	
		
		public vig_ExpeMarcaRow Dat;
		public vig_ExpeMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vig_ExpeMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vig_ExpeMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vig_ExpeMarcaRow( _dst, false );
			Old = new vig_ExpeMarcaRow( _dst , true );
		}
		
		
		public vig_ExpeMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vig_ExpeMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vig_ExpeMarcaRow( _dst, false );
			Old = new vig_ExpeMarcaRow( _dst , true );
		}
				
		public vig_ExpeMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vig_ExpeMarca() : base() 
		{
			Init();
		}
		
		public vig_ExpeMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vig_ExpeMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDecrip", typeof( String ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioDireccion", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "ExpeNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaActiva", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteNro", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteAnio", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RegistroVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaPadre", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "NombreCliente", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocalID1", typeof( int ) );  
			_dt.Columns.Add( "NombreAgenteLocal", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vig_ExpeMarcaRow( _dst, false );
			Old = new vig_ExpeMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vig_ExpeMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vig_ExpeMarca

#region vAtencion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAtencionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Obs;	
			public Int_Field ClienteID;	
			public Int_Field AreaID;	
			public String_Field AreaDescrip;	

			public vAtencionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				AreaDescrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vAtencionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAtencion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAtencion";
	
		
		public vAtencionRow Dat;
		public vAtencionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAtencion( DataTable tab ) : base() 
		{
			_dbTableName = "vAtencion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionRow( _dst, false );
			Old = new vAtencionRow( _dst , true );
		}
		
		
		public vAtencion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAtencion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionRow( _dst, false );
			Old = new vAtencionRow( _dst , true );
		}
				
		public vAtencion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAtencion() : base() 
		{
			Init();
		}
		
		public vAtencion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAtencion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "AreaDescrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionRow( _dst, false );
			Old = new vAtencionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAtencionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAtencion

#region vAntecedente
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAntecedenteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field TipoAntecedenteID;	
			public String_Field Obs;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public String_Field MarcaBaseDenominacion;	
			public String_Field MarcaSolicitadaDenominacion;	
			public String_Field FuncionarioNombre;	
			public String_Field TipoAntecedenteNombre;	

			public vAntecedenteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TipoAntecedenteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaBaseDenominacion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				MarcaSolicitadaDenominacion		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FuncionarioNombre		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TipoAntecedenteNombre		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vAntecedenteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAntecedente : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAntecedente";
	
		
		public vAntecedenteRow Dat;
		public vAntecedenteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAntecedente( DataTable tab ) : base() 
		{
			_dbTableName = "vAntecedente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAntecedenteRow( _dst, false );
			Old = new vAntecedenteRow( _dst , true );
		}
		
		
		public vAntecedente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAntecedente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAntecedenteRow( _dst, false );
			Old = new vAntecedenteRow( _dst , true );
		}
				
		public vAntecedente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAntecedente() : base() 
		{
			Init();
		}
		
		public vAntecedente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAntecedente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "TipoAntecedenteID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaBaseDenominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolicitadaDenominacion", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioNombre", typeof( String ) );  
			_dt.Columns.Add( "TipoAntecedenteNombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAntecedenteRow( _dst, false );
			Old = new vAntecedenteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAntecedenteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAntecedente

#region vPropClienteInstruccionXCorresp
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropClienteInstruccionXCorrespRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ClienteID;	
			public Int_Field PropietarioID;	
			public DateTime_Field FecAlta;	
			public Int_Field FuncionarioRegID;	
			public Int_Field FuncionarioRecID;	
			public String_Field Obs;	
			public Int_Field CorrespondenciaID;	
			public Int_Field InstruccionTipoID;	
			public String_Field InstruccionTipoDescrip;	
			public String_Field ClienteNombre;	
			public String_Field PropietarioNombre;	
			public String_Field FuncionarioRegNombre;	
			public String_Field FuncionarioRecNombre;	
			public Int_Field CorrespondenciaNro;	
			public Int_Field CorrespondenciaAnio;	
			public String_Field CorrespondenciaRef;	

			public vPropClienteInstruccionXCorrespRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				FuncionarioRecID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				InstruccionTipoDescrip		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioRegNombre		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				FuncionarioRecNombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				CorrespondenciaNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				CorrespondenciaAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				CorrespondenciaRef		= new String_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class vPropClienteInstruccionXCorrespRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropClienteInstruccionXCorresp : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropClienteInstruccionXCorresp";
	
		
		public vPropClienteInstruccionXCorrespRow Dat;
		public vPropClienteInstruccionXCorrespRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropClienteInstruccionXCorresp( DataTable tab ) : base() 
		{
			_dbTableName = "vPropClienteInstruccionXCorresp";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropClienteInstruccionXCorrespRow( _dst, false );
			Old = new vPropClienteInstruccionXCorrespRow( _dst , true );
		}
		
		
		public vPropClienteInstruccionXCorresp( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropClienteInstruccionXCorresp";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropClienteInstruccionXCorrespRow( _dst, false );
			Old = new vPropClienteInstruccionXCorrespRow( _dst , true );
		}
				
		public vPropClienteInstruccionXCorresp( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropClienteInstruccionXCorresp() : base() 
		{
			Init();
		}
		
		public vPropClienteInstruccionXCorresp( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropClienteInstruccionXCorresp";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRecID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRegNombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRecNombre", typeof( String ) );  
			_dt.Columns.Add( "CorrespondenciaNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaAnio", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaRef", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropClienteInstruccionXCorrespRow( _dst, false );
			Old = new vPropClienteInstruccionXCorrespRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropClienteInstruccionXCorrespAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropClienteInstruccionXCorresp

#region vRecordatorio
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vRecordatorioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field TipoRecordatorioID;	
			public Int_Field FuncionarioRemID;	
			public Int_Field FuncionarioRegID;	
			public String_Field Obs;	
			public Boolean_Field Acuse;	
			public DateTime_Field FecAcuse;	
			public DateTime_Field FecAlta;	
			public String_Field ContactoCliente;	
			public String_Field ContactoAcuse;	
			public String_Field Transcripcion;	
			public String_Field FuncionarioRemNombre;	
			public String_Field FuncionarioRegNombre;	
			public String_Field TipoRecordatorioNombre;	
			public String_Field MarcaBaseDenominacion;	
			public String_Field MarcaSolicitadaDenominacion;	

			public vRecordatorioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TipoRecordatorioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioRemID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Acuse		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				FecAcuse		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				ContactoCliente		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ContactoAcuse		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Transcripcion		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioRemNombre		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				FuncionarioRegNombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				TipoRecordatorioNombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				MarcaBaseDenominacion		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				MarcaSolicitadaDenominacion		= new String_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class vRecordatorioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vRecordatorio : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vRecordatorio";
	
		
		public vRecordatorioRow Dat;
		public vRecordatorioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vRecordatorio( DataTable tab ) : base() 
		{
			_dbTableName = "vRecordatorio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRecordatorioRow( _dst, false );
			Old = new vRecordatorioRow( _dst , true );
		}
		
		
		public vRecordatorio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vRecordatorio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRecordatorioRow( _dst, false );
			Old = new vRecordatorioRow( _dst , true );
		}
				
		public vRecordatorio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vRecordatorio() : base() 
		{
			Init();
		}
		
		public vRecordatorio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vRecordatorio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "TipoRecordatorioID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRemID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Acuse", typeof( Boolean ) );  
			_dt.Columns.Add( "FecAcuse", typeof( DateTime ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "ContactoCliente", typeof( String ) );  
			_dt.Columns.Add( "ContactoAcuse", typeof( String ) );  
			_dt.Columns.Add( "Transcripcion", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRemNombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRegNombre", typeof( String ) );  
			_dt.Columns.Add( "TipoRecordatorioNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseDenominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolicitadaDenominacion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vRecordatorioRow( _dst, false );
			Old = new vRecordatorioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vRecordatorioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vRecordatorio

#region vAvisosPorMarcaSolDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosPorMarcaSolDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public Int_Field TipoAvisoID;	
			public DateTime_Field FecGen;	
			public DateTime_Field FecEnvio;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field marcaSolID;	
			public Int_Field FuncionarioGenID;	
			public Int_Field FuncionarioEnvioID;	
			public Int_Field ModoEnvioID;	
			public Int_Field VigilanciaDocID;	
			public Int_Field AvisoIDPadre;	
			public Int_Field marcaBaseID;	
			public Int_Field marcaBaseExtID;	
			public String_Field Estado;	
			public Int_Field marcaSolHistID;	
			public Int_Field marcaBaseHistID;	
			public String_Field FuncionarioGen;	
			public String_Field FuncionarioEnv;	
			public String_Field NombreAviso;	
			public Int_Field NroAviso;	
			public String_Field TipoAviso;	
			public String_Field NombreModoEnvio;	

			public vAvisosPorMarcaSolDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecGen		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				marcaSolID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				FuncionarioGenID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				FuncionarioEnvioID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				VigilanciaDocID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				AvisoIDPadre		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				marcaBaseID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				marcaBaseExtID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				marcaSolHistID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				marcaBaseHistID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				FuncionarioGen		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				FuncionarioEnv		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				NombreAviso		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				NroAviso		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				TipoAviso		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				NombreModoEnvio		= new String_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class vAvisosPorMarcaSolDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosPorMarcaSolDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosPorMarcaSolDet";
	
		
		public vAvisosPorMarcaSolDetRow Dat;
		public vAvisosPorMarcaSolDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosPorMarcaSolDet( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosPorMarcaSolDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosPorMarcaSolDetRow( _dst, false );
			Old = new vAvisosPorMarcaSolDetRow( _dst , true );
		}
		
		
		public vAvisosPorMarcaSolDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosPorMarcaSolDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosPorMarcaSolDetRow( _dst, false );
			Old = new vAvisosPorMarcaSolDetRow( _dst , true );
		}
				
		public vAvisosPorMarcaSolDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosPorMarcaSolDet() : base() 
		{
			Init();
		}
		
		public vAvisosPorMarcaSolDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosPorMarcaSolDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "FecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "marcaSolID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "VigilanciaDocID", typeof( int ) );  
			_dt.Columns.Add( "AvisoIDPadre", typeof( int ) );  
			_dt.Columns.Add( "marcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "marcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "marcaSolHistID", typeof( int ) );  
			_dt.Columns.Add( "marcaBaseHistID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioGen", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioEnv", typeof( String ) );  
			_dt.Columns.Add( "NombreAviso", typeof( String ) );  
			_dt.Columns.Add( "NroAviso", typeof( int ) );  
			_dt.Columns.Add( "TipoAviso", typeof( String ) );  
			_dt.Columns.Add( "NombreModoEnvio", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosPorMarcaSolDetRow( _dst, false );
			Old = new vAvisosPorMarcaSolDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosPorMarcaSolDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosPorMarcaSolDet

#region vGlosarioPalCom
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vGlosarioPalComRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Palabra;	
			public String_Field Estado;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public String_Field Obs;	
			public String_Field Posicion;	
			public String_Field Tipo;	
			public String_Field FuncionarioNombre;	

			public vGlosarioPalComRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Palabra		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Posicion		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FuncionarioNombre		= new String_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class vGlosarioPalComRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vGlosarioPalCom : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vGlosarioPalCom";
	
		
		public vGlosarioPalComRow Dat;
		public vGlosarioPalComRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vGlosarioPalCom( DataTable tab ) : base() 
		{
			_dbTableName = "vGlosarioPalCom";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vGlosarioPalComRow( _dst, false );
			Old = new vGlosarioPalComRow( _dst , true );
		}
		
		
		public vGlosarioPalCom( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vGlosarioPalCom";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vGlosarioPalComRow( _dst, false );
			Old = new vGlosarioPalComRow( _dst , true );
		}
				
		public vGlosarioPalCom( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vGlosarioPalCom() : base() 
		{
			Init();
		}
		
		public vGlosarioPalCom( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vGlosarioPalCom";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Palabra", typeof( String ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Posicion", typeof( String ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioNombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vGlosarioPalComRow( _dst, false );
			Old = new vGlosarioPalComRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vGlosarioPalComAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vGlosarioPalCom

#region vAvisosPorMarcaSolCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosPorMarcaSolCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public Int_Field marcasolid;	
			public String_Field denominacion;	
			public Int_Field marcaTipoID;	
			public Int_Field claseID;	
			public Int_Field ExpedienteVigenteID;	
			public String_Field Propietario;	
			public String_Field ProPais;	
			public String_Field ClienteNombre;	
			public String_Field TipoMarca;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field ClaseNro;	
			public Int_Field ExpedienteID;	
			public Int_Field TramiteID;	

			public vAvisosPorMarcaSolCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				BolNro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				marcasolid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				marcaTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				claseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ExpedienteVigenteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				TipoMarca		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vAvisosPorMarcaSolCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosPorMarcaSolCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosPorMarcaSolCab";
	
		
		public vAvisosPorMarcaSolCabRow Dat;
		public vAvisosPorMarcaSolCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosPorMarcaSolCab( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosPorMarcaSolCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosPorMarcaSolCabRow( _dst, false );
			Old = new vAvisosPorMarcaSolCabRow( _dst , true );
		}
		
		
		public vAvisosPorMarcaSolCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosPorMarcaSolCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosPorMarcaSolCabRow( _dst, false );
			Old = new vAvisosPorMarcaSolCabRow( _dst , true );
		}
				
		public vAvisosPorMarcaSolCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosPorMarcaSolCab() : base() 
		{
			Init();
		}
		
		public vAvisosPorMarcaSolCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosPorMarcaSolCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "marcasolid", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "marcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "claseID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteVigenteID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "TipoMarca", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosPorMarcaSolCabRow( _dst, false );
			Old = new vAvisosPorMarcaSolCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosPorMarcaSolCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosPorMarcaSolCab

#region vAvisosOposicion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosOposicionRow 
		{
			private  DSTab _dst;
			
			public Int_Field AvisoOpoDetID;	
			public Int_Field MarcaSolID;	
			public Int_Field AvisoOpoCabTipoAvisoID;	
			public Int_Field AvisoOpoCabBolNro;	
			public Int_Field AvisoOpoCabBolAnio;	
			public DateTime_Field AvisoOpoCabFecVencReal;	
			public DateTime_Field AvisoOpoCabFecVenFict;	
			public DateTime_Field AvisoOpoCabFecGen;	
			public DateTime_Field AvisoOpoCabFecEnvio;	
			public Int_Field AvisoOpoCabFuncionarioGenID;	
			public Int_Field AvisoOpoCabModoEnvioID;	
			public Int_Field AvisoOpoCabFuncionarioEnvioID;	
			public String_Field AvisoOpoCabFax;	
			public String_Field AvisoOpoCabMailTo;	
			public String_Field AvisoOpoCabMailOrigen;	
			public String_Field AvisoOpoCabCorreo;	
			public String_Field Atencion;	
			public Int_Field AvisoOpoCabIdiomaID;	
			public Int_Field AvisoOpoCabBusqOpoCabID;	
			public Int_Field AvisoOpoCabAvOpCabID;	
			public String_Field AvisoOpoCabEstado;	
			public String_Field MarcaHistClienteNombre;	
			public String_Field MarcaHistPropNombre;	
			public String_Field MarcaHistPropDir;	
			public Int_Field TipoAvisoNroAviso;	
			public String_Field TipoAvisoTipo;	
			public String_Field TipoAvisoNombre;	
			public String_Field TipoAvisoDescripcion;	
			public String_Field MarcaTipoDescrip;	
			public String_Field MarcaTipoAbrev;	
			public String_Field ClaseDescripBreve;	
			public String_Field MarcaDenominacion;	
			public String_Field MarcaDenominacionClave;	
			public String_Field MarcaFonetizada;	
			public Int_Field MarcaTipoID;	
			public Int_Field MarcaClaseID;	
			public String_Field MarcaClaseDescripEsp;	
			public Int_Field BoletinID;	
			public DateTime_Field BoletinSolicitudFecha;	
			public Int_Field BoletinExpNro;	
			public Int_Field BoletinExpAnio;	
			public String_Field BoletinClase;	
			public String_Field BoletinMarcaTipo;	
			public String_Field BoletinTramite;	
			public String_Field BoletinDenominacion;	
			public String_Field BoletinPropietario;	
			public String_Field BoletinPais;	
			public String_Field BoletinAgenteLocal;	
			public Int_Field BoletinRefNro;	
			public Int_Field BoletinRefAnio;	
			public Int_Field BoletinRefRegNro;	
			public String_Field BoletinObservacion;	
			public Int_Field BoletinExpedienteID;	
			public Int_Field BoletinBolAnio;	
			public Int_Field BoletinBolNro;	
			public Int_Field ExpedienteActaNro;	
			public Int_Field ExpedienteActaAnio;	

			public vAvisosOposicionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				AvisoOpoDetID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaSolID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AvisoOpoCabTipoAvisoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AvisoOpoCabBolNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				AvisoOpoCabBolAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				AvisoOpoCabFecVencReal		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				AvisoOpoCabFecVenFict		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				AvisoOpoCabFecGen		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				AvisoOpoCabFecEnvio		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				AvisoOpoCabFuncionarioGenID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				AvisoOpoCabModoEnvioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				AvisoOpoCabFuncionarioEnvioID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				AvisoOpoCabFax		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				AvisoOpoCabMailTo		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				AvisoOpoCabMailOrigen		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				AvisoOpoCabCorreo		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				Atencion		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				AvisoOpoCabIdiomaID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				AvisoOpoCabBusqOpoCabID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				AvisoOpoCabAvOpCabID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				AvisoOpoCabEstado		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				MarcaHistClienteNombre		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				MarcaHistPropNombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				MarcaHistPropDir		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				TipoAvisoNroAviso		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				TipoAvisoTipo		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				TipoAvisoNombre		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				TipoAvisoDescripcion		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				MarcaTipoDescrip		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				MarcaTipoAbrev		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				ClaseDescripBreve		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				MarcaDenominacion		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				MarcaDenominacionClave		= new String_Field(	_dst, 32, IsOldDataVersion  );	
				MarcaFonetizada		= new String_Field(	_dst, 33, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 34, IsOldDataVersion  );	
				MarcaClaseID		= new Int_Field(	_dst, 35, IsOldDataVersion  );	
				MarcaClaseDescripEsp		= new String_Field(	_dst, 36, IsOldDataVersion  );	
				BoletinID		= new Int_Field(	_dst, 37, IsOldDataVersion  );	
				BoletinSolicitudFecha		= new DateTime_Field(	_dst, 38, IsOldDataVersion  );	
				BoletinExpNro		= new Int_Field(	_dst, 39, IsOldDataVersion  );	
				BoletinExpAnio		= new Int_Field(	_dst, 40, IsOldDataVersion  );	
				BoletinClase		= new String_Field(	_dst, 41, IsOldDataVersion  );	
				BoletinMarcaTipo		= new String_Field(	_dst, 42, IsOldDataVersion  );	
				BoletinTramite		= new String_Field(	_dst, 43, IsOldDataVersion  );	
				BoletinDenominacion		= new String_Field(	_dst, 44, IsOldDataVersion  );	
				BoletinPropietario		= new String_Field(	_dst, 45, IsOldDataVersion  );	
				BoletinPais		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				BoletinAgenteLocal		= new String_Field(	_dst, 47, IsOldDataVersion  );	
				BoletinRefNro		= new Int_Field(	_dst, 48, IsOldDataVersion  );	
				BoletinRefAnio		= new Int_Field(	_dst, 49, IsOldDataVersion  );	
				BoletinRefRegNro		= new Int_Field(	_dst, 50, IsOldDataVersion  );	
				BoletinObservacion		= new String_Field(	_dst, 51, IsOldDataVersion  );	
				BoletinExpedienteID		= new Int_Field(	_dst, 52, IsOldDataVersion  );	
				BoletinBolAnio		= new Int_Field(	_dst, 53, IsOldDataVersion  );	
				BoletinBolNro		= new Int_Field(	_dst, 54, IsOldDataVersion  );	
				ExpedienteActaNro		= new Int_Field(	_dst, 55, IsOldDataVersion  );	
				ExpedienteActaAnio		= new Int_Field(	_dst, 56, IsOldDataVersion  );	
			}
		} // end class vAvisosOposicionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosOposicion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosOposicion";
	
		
		public vAvisosOposicionRow Dat;
		public vAvisosOposicionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosOposicion( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosOposicion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosOposicionRow( _dst, false );
			Old = new vAvisosOposicionRow( _dst , true );
		}
		
		
		public vAvisosOposicion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosOposicion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosOposicionRow( _dst, false );
			Old = new vAvisosOposicionRow( _dst , true );
		}
				
		public vAvisosOposicion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosOposicion() : base() 
		{
			Init();
		}
		
		public vAvisosOposicion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosOposicion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabTipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBolNro", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBolAnio", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabFecVencReal", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFecVenFict", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabFuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabFax", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabMailTo", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabMailOrigen", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabCorreo", typeof( String ) );  
			_dt.Columns.Add( "Atencion", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabIdiomaID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBusqOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabAvOpCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabEstado", typeof( String ) );  
			_dt.Columns.Add( "MarcaHistClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaHistPropNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaHistPropDir", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoNroAviso", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoTipo", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoNombre", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoDescripcion", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoDescrip", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "ClaseDescripBreve", typeof( String ) );  
			_dt.Columns.Add( "MarcaDenominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaDenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaFonetizada", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaClaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "BoletinID", typeof( int ) );  
			_dt.Columns.Add( "BoletinSolicitudFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "BoletinExpNro", typeof( int ) );  
			_dt.Columns.Add( "BoletinExpAnio", typeof( int ) );  
			_dt.Columns.Add( "BoletinClase", typeof( String ) );  
			_dt.Columns.Add( "BoletinMarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "BoletinTramite", typeof( String ) );  
			_dt.Columns.Add( "BoletinDenominacion", typeof( String ) );  
			_dt.Columns.Add( "BoletinPropietario", typeof( String ) );  
			_dt.Columns.Add( "BoletinPais", typeof( String ) );  
			_dt.Columns.Add( "BoletinAgenteLocal", typeof( String ) );  
			_dt.Columns.Add( "BoletinRefNro", typeof( int ) );  
			_dt.Columns.Add( "BoletinRefAnio", typeof( int ) );  
			_dt.Columns.Add( "BoletinRefRegNro", typeof( int ) );  
			_dt.Columns.Add( "BoletinObservacion", typeof( String ) );  
			_dt.Columns.Add( "BoletinExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BoletinBolAnio", typeof( int ) );  
			_dt.Columns.Add( "BoletinBolNro", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteActaNro", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteActaAnio", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosOposicionRow( _dst, false );
			Old = new vAvisosOposicionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosOposicionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosOposicion

#region vAvisosGen
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosGenRow 
		{
			private  DSTab _dst;
			
			public Int_Field AvisoOpoDetID;	
			public Int_Field MarcaSolID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	
			public Int_Field AvisoOpoDetAvisoOpoCabID;	
			public Int_Field AvisoOpoDetChance;	
			public Int_Field MarcaBaseHistID;	
			public Int_Field AvisoOpoCabTipoAvisoID;	
			public Int_Field AvisoOpoCabBolNro;	
			public Int_Field AvisoOpoCabBolAnio;	
			public DateTime_Field AvisoOpoCabFecVencReal;	
			public DateTime_Field AvisoOpoCabFecVenFict;	
			public DateTime_Field AvisoOpoCabFecGen;	
			public DateTime_Field AvisoOpoCabFecEnvio;	
			public Int_Field AvisoOpoCabFuncionarioGenID;	
			public Int_Field AvisoOpoCabModoEnvioID;	
			public Int_Field AvisoOpoCabFuncionarioEnvioID;	
			public String_Field AvisoOpoCabFax;	
			public String_Field AvisoOpoCabMailTo;	
			public String_Field AvisoOpoCabMailOrigen;	
			public String_Field AvisoOpoCabCorreo;	
			public String_Field Atencion;	
			public Int_Field AvisoOpoCabIdiomaID;	
			public Int_Field AvisoOpoCabBusqOpoCabID;	
			public Int_Field AvisoOpoCabAvOpCabID;	
			public String_Field AvisoOpoCabEstado;	
			public String_Field MarcaSolHistDenominacion;	
			public String_Field MarcaSolHistDenominacionClave;	
			public Int_Field MarcaSolHistClase;	
			public Int_Field MarcaSolHistActaNro;	
			public Int_Field MarcaSolHistActaAnio;	
			public String_Field MarcaSolHistPropPais;	
			public Boolean_Field MarcaSolHistNuestra;	
			public Boolean_Field MarcaSolHistVigilada;	
			public Int_Field MarcaSolHistRegistroNro;	
			public DateTime_Field MarcaSolHistFecSol;	
			public Int_Field MarcaSolHistClienteID;	
			public Int_Field MarcaSolHistMarcaTipoID;	
			public String_Field MarcaSolHistClienteNombre;	
			public String_Field MarcaSolHistPropNombre;	
			public String_Field MarcaSolHistPropDir;	
			public String_Field MarcaBaseHistDenominacion;	
			public String_Field MarcaBaseHistDenominacionClave;	
			public Int_Field MarcaBaseHistClase;	
			public Int_Field MarcaBaseHistActaNro;	
			public Int_Field MarcaBaseHistActaAnio;	
			public String_Field MarcaBaseHistPropPais;	
			public Boolean_Field MarcaBaseHistNuestra;	
			public Boolean_Field MarcaBaseHistVigilada;	
			public Int_Field MarcaBaseHistRegistroNro;	
			public DateTime_Field MarcaBaseHistFecSol;	
			public Int_Field MarcaBaseHistClienteID;	
			public Int_Field MarcaBaseHistMarcaTipoID;	
			public String_Field MarcaBaseHistClienteNombre;	
			public String_Field MarcaBaseHistPropNombre;	
			public String_Field MarcaBaseHistPropDir;	
			public Int_Field TipoAvisoNroAviso;	
			public String_Field TipoAvisoTipo;	
			public String_Field TipoAvisoNombre;	
			public String_Field TipoAvisoDescripcion;	
			public String_Field FuncionarioGenNombre;	
			public String_Field FuncionarioEnvioNombre;	
			public String_Field ModoEnvioNombre;	

			public vAvisosGenRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				AvisoOpoDetID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaSolID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				AvisoOpoDetAvisoOpoCabID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				AvisoOpoDetChance		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				MarcaBaseHistID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AvisoOpoCabTipoAvisoID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				AvisoOpoCabBolNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				AvisoOpoCabBolAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				AvisoOpoCabFecVencReal		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				AvisoOpoCabFecVenFict		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				AvisoOpoCabFecGen		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				AvisoOpoCabFecEnvio		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				AvisoOpoCabFuncionarioGenID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				AvisoOpoCabModoEnvioID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				AvisoOpoCabFuncionarioEnvioID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				AvisoOpoCabFax		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				AvisoOpoCabMailTo		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				AvisoOpoCabMailOrigen		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				AvisoOpoCabCorreo		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				Atencion		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				AvisoOpoCabIdiomaID		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				AvisoOpoCabBusqOpoCabID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				AvisoOpoCabAvOpCabID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				AvisoOpoCabEstado		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				MarcaSolHistDenominacion		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				MarcaSolHistDenominacionClave		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				MarcaSolHistClase		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				MarcaSolHistActaNro		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
				MarcaSolHistActaAnio		= new Int_Field(	_dst, 30, IsOldDataVersion  );	
				MarcaSolHistPropPais		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				MarcaSolHistNuestra		= new Boolean_Field(	_dst, 32, IsOldDataVersion  );	
				MarcaSolHistVigilada		= new Boolean_Field(	_dst, 33, IsOldDataVersion  );	
				MarcaSolHistRegistroNro		= new Int_Field(	_dst, 34, IsOldDataVersion  );	
				MarcaSolHistFecSol		= new DateTime_Field(	_dst, 35, IsOldDataVersion  );	
				MarcaSolHistClienteID		= new Int_Field(	_dst, 36, IsOldDataVersion  );	
				MarcaSolHistMarcaTipoID		= new Int_Field(	_dst, 37, IsOldDataVersion  );	
				MarcaSolHistClienteNombre		= new String_Field(	_dst, 38, IsOldDataVersion  );	
				MarcaSolHistPropNombre		= new String_Field(	_dst, 39, IsOldDataVersion  );	
				MarcaSolHistPropDir		= new String_Field(	_dst, 40, IsOldDataVersion  );	
				MarcaBaseHistDenominacion		= new String_Field(	_dst, 41, IsOldDataVersion  );	
				MarcaBaseHistDenominacionClave		= new String_Field(	_dst, 42, IsOldDataVersion  );	
				MarcaBaseHistClase		= new Int_Field(	_dst, 43, IsOldDataVersion  );	
				MarcaBaseHistActaNro		= new Int_Field(	_dst, 44, IsOldDataVersion  );	
				MarcaBaseHistActaAnio		= new Int_Field(	_dst, 45, IsOldDataVersion  );	
				MarcaBaseHistPropPais		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				MarcaBaseHistNuestra		= new Boolean_Field(	_dst, 47, IsOldDataVersion  );	
				MarcaBaseHistVigilada		= new Boolean_Field(	_dst, 48, IsOldDataVersion  );	
				MarcaBaseHistRegistroNro		= new Int_Field(	_dst, 49, IsOldDataVersion  );	
				MarcaBaseHistFecSol		= new DateTime_Field(	_dst, 50, IsOldDataVersion  );	
				MarcaBaseHistClienteID		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				MarcaBaseHistMarcaTipoID		= new Int_Field(	_dst, 52, IsOldDataVersion  );	
				MarcaBaseHistClienteNombre		= new String_Field(	_dst, 53, IsOldDataVersion  );	
				MarcaBaseHistPropNombre		= new String_Field(	_dst, 54, IsOldDataVersion  );	
				MarcaBaseHistPropDir		= new String_Field(	_dst, 55, IsOldDataVersion  );	
				TipoAvisoNroAviso		= new Int_Field(	_dst, 56, IsOldDataVersion  );	
				TipoAvisoTipo		= new String_Field(	_dst, 57, IsOldDataVersion  );	
				TipoAvisoNombre		= new String_Field(	_dst, 58, IsOldDataVersion  );	
				TipoAvisoDescripcion		= new String_Field(	_dst, 59, IsOldDataVersion  );	
				FuncionarioGenNombre		= new String_Field(	_dst, 60, IsOldDataVersion  );	
				FuncionarioEnvioNombre		= new String_Field(	_dst, 61, IsOldDataVersion  );	
				ModoEnvioNombre		= new String_Field(	_dst, 62, IsOldDataVersion  );	
			}
		} // end class vAvisosGenRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosGen : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosGen";
	
		
		public vAvisosGenRow Dat;
		public vAvisosGenRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosGen( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosGen";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosGenRow( _dst, false );
			Old = new vAvisosGenRow( _dst , true );
		}
		
		
		public vAvisosGen( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosGen";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosGenRow( _dst, false );
			Old = new vAvisosGenRow( _dst , true );
		}
				
		public vAvisosGen( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosGen() : base() 
		{
			Init();
		}
		
		public vAvisosGen( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosGen";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetAvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetChance", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabTipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBolNro", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBolAnio", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabFecVencReal", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFecVenFict", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "AvisoOpoCabFuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabFuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabFax", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabMailTo", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabMailOrigen", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabCorreo", typeof( String ) );  
			_dt.Columns.Add( "Atencion", typeof( String ) );  
			_dt.Columns.Add( "AvisoOpoCabIdiomaID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBusqOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabAvOpCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabEstado", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolHistDenominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolHistDenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolHistClase", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistActaNro", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistActaAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistPropPais", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolHistNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaSolHistVigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaSolHistRegistroNro", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistFecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaSolHistClienteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistMarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolHistClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolHistPropNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaSolHistPropDir", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseHistDenominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseHistDenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseHistClase", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistActaNro", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistActaAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistPropPais", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseHistNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaBaseHistVigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaBaseHistRegistroNro", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistFecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaBaseHistClienteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistMarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseHistClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseHistPropNombre", typeof( String ) );  
			_dt.Columns.Add( "MarcaBaseHistPropDir", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoNroAviso", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoTipo", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoNombre", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoDescripcion", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioGenNombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioEnvioNombre", typeof( String ) );  
			_dt.Columns.Add( "ModoEnvioNombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosGenRow( _dst, false );
			Old = new vAvisosGenRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosGenAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosGen

#region vModoEnvio
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vModoEnvioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ModoEnvioID;	
			public String_Field ModoEnvioNombre;	
			public String_Field ModoEnvioDescrip;	
			public Int_Field CViaComID;	
			public String_Field CViaComDescrip;	
			public String_Field CViaComAbrev;	

			public vModoEnvioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ModoEnvioID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ModoEnvioNombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ModoEnvioDescrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				CViaComID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				CViaComDescrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				CViaComAbrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vModoEnvioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vModoEnvio : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vModoEnvio";
	
		
		public vModoEnvioRow Dat;
		public vModoEnvioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vModoEnvio( DataTable tab ) : base() 
		{
			_dbTableName = "vModoEnvio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vModoEnvioRow( _dst, false );
			Old = new vModoEnvioRow( _dst , true );
		}
		
		
		public vModoEnvio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vModoEnvio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vModoEnvioRow( _dst, false );
			Old = new vModoEnvioRow( _dst , true );
		}
				
		public vModoEnvio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vModoEnvio() : base() 
		{
			Init();
		}
		
		public vModoEnvio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vModoEnvio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioNombre", typeof( String ) );  
			_dt.Columns.Add( "ModoEnvioDescrip", typeof( String ) );  
			_dt.Columns.Add( "CViaComID", typeof( int ) );  
			_dt.Columns.Add( "CViaComDescrip", typeof( String ) );  
			_dt.Columns.Add( "CViaComAbrev", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vModoEnvioRow( _dst, false );
			Old = new vModoEnvioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vModoEnvioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vModoEnvio

#region vSuscripcion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSuscripcionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Origen;	
			public String_Field FuncionarioReg;	
			public Int_Field FuncionarioRegID;	
			public String_Field ClienteExterno;	
			public Int_Field ClienteExternoID;	
			public Int_Field ClienteExternoIdiomaID;	
			public String_Field ClienteExternoIdiomaDescrip;	
			public String_Field ClienteExternoIdiomaAbrev;	
			public String_Field ClienteInterno;	
			public Int_Field ClienteInternoID;	
			public String_Field Mail;	
			public String_Field Fax;	
			public DateTime_Field FecSuscripcion;	
			public DateTime_Field FecVencimiento;	
			public String_Field Estado;	
			public Int_Field ModoEnvioID;	
			public String_Field ModoEnvioNom;	
			public Int_Field CViacomID;	
			public String_Field CViacomDescrip;	
			public String_Field Msg;	
			public String_Field Obs;	
			public Int_Field SuscripcionTipoID;	
			public String_Field Tipo;	
			public String_Field SusTipoNombre;	
			public String_Field SusTipoDescripcion;	
			public DateTime_Field SusTipoFechaAlta;	
			public String_Field SusTipoPropietario;	
			public Int_Field SusTipoPeriodo;	
			public Boolean_Field SusTipoFecVencSit;	
			public Boolean_Field SusTipoRegistrado;	
			public Int_Field SusTipoPlantillaID;	
			public String_Field MailOrigen;	
			public String_Field MailSubject;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecBaja;	

			public vSuscripcionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Origen		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				FuncionarioReg		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClienteExterno		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ClienteExternoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteExternoIdiomaID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ClienteExternoIdiomaDescrip		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ClienteExternoIdiomaAbrev		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ClienteInterno		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				ClienteInternoID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				Mail		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				FecSuscripcion		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				FecVencimiento		= new DateTime_Field(	_dst, 14, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				ModoEnvioNom		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				CViacomID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				CViacomDescrip		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				Msg		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				SusTipoNombre		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				SusTipoDescripcion		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				SusTipoFechaAlta		= new DateTime_Field(	_dst, 26, IsOldDataVersion  );	
				SusTipoPropietario		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				SusTipoPeriodo		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				SusTipoFecVencSit		= new Boolean_Field(	_dst, 29, IsOldDataVersion  );	
				SusTipoRegistrado		= new Boolean_Field(	_dst, 30, IsOldDataVersion  );	
				SusTipoPlantillaID		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 32, IsOldDataVersion  );	
				MailSubject		= new String_Field(	_dst, 33, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 34, IsOldDataVersion  );	
				FecBaja		= new DateTime_Field(	_dst, 35, IsOldDataVersion  );	
			}
		} // end class vSuscripcionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSuscripcion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSuscripcion";
	
		
		public vSuscripcionRow Dat;
		public vSuscripcionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSuscripcion( DataTable tab ) : base() 
		{
			_dbTableName = "vSuscripcion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscripcionRow( _dst, false );
			Old = new vSuscripcionRow( _dst , true );
		}
		
		
		public vSuscripcion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSuscripcion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscripcionRow( _dst, false );
			Old = new vSuscripcionRow( _dst , true );
		}
				
		public vSuscripcion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSuscripcion() : base() 
		{
			Init();
		}
		
		public vSuscripcion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSuscripcion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Origen", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioReg", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExterno", typeof( String ) );  
			_dt.Columns.Add( "ClienteExternoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoIdiomaID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoIdiomaDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClienteExternoIdiomaAbrev", typeof( String ) );  
			_dt.Columns.Add( "ClienteInterno", typeof( String ) );  
			_dt.Columns.Add( "ClienteInternoID", typeof( int ) );  
			_dt.Columns.Add( "Mail", typeof( String ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "FecSuscripcion", typeof( DateTime ) );  
			_dt.Columns.Add( "FecVencimiento", typeof( DateTime ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioNom", typeof( String ) );  
			_dt.Columns.Add( "CViacomID", typeof( int ) );  
			_dt.Columns.Add( "CViacomDescrip", typeof( String ) );  
			_dt.Columns.Add( "Msg", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "SusTipoNombre", typeof( String ) );  
			_dt.Columns.Add( "SusTipoDescripcion", typeof( String ) );  
			_dt.Columns.Add( "SusTipoFechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "SusTipoPropietario", typeof( String ) );  
			_dt.Columns.Add( "SusTipoPeriodo", typeof( int ) );  
			_dt.Columns.Add( "SusTipoFecVencSit", typeof( Boolean ) );  
			_dt.Columns.Add( "SusTipoRegistrado", typeof( Boolean ) );  
			_dt.Columns.Add( "SusTipoPlantillaID", typeof( int ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "MailSubject", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecBaja", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscripcionRow( _dst, false );
			Old = new vSuscripcionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSuscripcionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSuscripcion

#region vAvisosTotSinInst
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosTotSinInstRow 
		{
			private  DSTab _dst;
			
			public Int_Field AvisoOpoCabBolNro;	
			public Int_Field AvisoOpoCabBolAnio;	
			public String_Field AvisoOpoCabEstado;	

			public vAvisosTotSinInstRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				AvisoOpoCabBolNro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoCabBolAnio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AvisoOpoCabEstado		= new String_Field(	_dst, 2, IsOldDataVersion  );	
			}
		} // end class vAvisosTotSinInstRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosTotSinInst : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosTotSinInst";
	
		
		public vAvisosTotSinInstRow Dat;
		public vAvisosTotSinInstRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosTotSinInst( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosTotSinInst";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosTotSinInstRow( _dst, false );
			Old = new vAvisosTotSinInstRow( _dst , true );
		}
		
		
		public vAvisosTotSinInst( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosTotSinInst";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosTotSinInstRow( _dst, false );
			Old = new vAvisosTotSinInstRow( _dst , true );
		}
				
		public vAvisosTotSinInst( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosTotSinInst() : base() 
		{
			Init();
		}
		
		public vAvisosTotSinInst( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosTotSinInst";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "AvisoOpoCabBolNro", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBolAnio", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabEstado", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosTotSinInstRow( _dst, false );
			Old = new vAvisosTotSinInstRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosTotSinInstAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosTotSinInst

#region vAvisosTotConInst
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosTotConInstRow 
		{
			private  DSTab _dst;
			
			public Int_Field AvisoOpoCabBolNro;	
			public Int_Field AvisoOpoCabBolAnio;	
			public String_Field AvisoOpoCabEstado;	
			public Int_Field AvisoInstruccionTipoID;	

			public vAvisosTotConInstRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				AvisoOpoCabBolNro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoCabBolAnio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AvisoOpoCabEstado		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				AvisoInstruccionTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vAvisosTotConInstRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosTotConInst : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosTotConInst";
	
		
		public vAvisosTotConInstRow Dat;
		public vAvisosTotConInstRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosTotConInst( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosTotConInst";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosTotConInstRow( _dst, false );
			Old = new vAvisosTotConInstRow( _dst , true );
		}
		
		
		public vAvisosTotConInst( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosTotConInst";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosTotConInstRow( _dst, false );
			Old = new vAvisosTotConInstRow( _dst , true );
		}
				
		public vAvisosTotConInst( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosTotConInst() : base() 
		{
			Init();
		}
		
		public vAvisosTotConInst( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosTotConInst";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "AvisoOpoCabBolNro", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabBolAnio", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabEstado", typeof( String ) );  
			_dt.Columns.Add( "AvisoInstruccionTipoID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosTotConInstRow( _dst, false );
			Old = new vAvisosTotConInstRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosTotConInstAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosTotConInst

#region vSuscripcionTipoPl
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSuscripcionTipoPlRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field PlantillaID;	
			public Boolean_Field Activo;	
			public Int_Field PlantillaIdiomaID;	
			public String_Field PlantillaDescrip;	
			public String_Field PlantillaIdiomaDescrip;	
			public String_Field PlantillaIdiomaAbrev;	
			public String_Field SuscripcionTipoNombre;	

			public vSuscripcionTipoPlRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				PlantillaIdiomaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				PlantillaDescrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				PlantillaIdiomaDescrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				PlantillaIdiomaAbrev		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				SuscripcionTipoNombre		= new String_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class vSuscripcionTipoPlRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSuscripcionTipoPl : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSuscripcionTipoPl";
	
		
		public vSuscripcionTipoPlRow Dat;
		public vSuscripcionTipoPlRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSuscripcionTipoPl( DataTable tab ) : base() 
		{
			_dbTableName = "vSuscripcionTipoPl";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscripcionTipoPlRow( _dst, false );
			Old = new vSuscripcionTipoPlRow( _dst , true );
		}
		
		
		public vSuscripcionTipoPl( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSuscripcionTipoPl";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscripcionTipoPlRow( _dst, false );
			Old = new vSuscripcionTipoPlRow( _dst , true );
		}
				
		public vSuscripcionTipoPl( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSuscripcionTipoPl() : base() 
		{
			Init();
		}
		
		public vSuscripcionTipoPl( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSuscripcionTipoPl";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "PlantillaIdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PlantillaDescrip", typeof( String ) );  
			_dt.Columns.Add( "PlantillaIdiomaDescrip", typeof( String ) );  
			_dt.Columns.Add( "PlantillaIdiomaAbrev", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoNombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSuscripcionTipoPlRow( _dst, false );
			Old = new vSuscripcionTipoPlRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSuscripcionTipoPlAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSuscripcionTipoPl

#region vTipoAvisoPlantilla
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTipoAvisoPlantillaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TipoAvisoID;	
			public Int_Field PlantillaID;	
			public Boolean_Field Activo;	
			public String_Field TipoAvisoNombre;	
			public String_Field PlantillaDescrip;	

			public vTipoAvisoPlantillaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				PlantillaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				TipoAvisoNombre		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				PlantillaDescrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vTipoAvisoPlantillaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTipoAvisoPlantilla : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTipoAvisoPlantilla";
	
		
		public vTipoAvisoPlantillaRow Dat;
		public vTipoAvisoPlantillaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTipoAvisoPlantilla( DataTable tab ) : base() 
		{
			_dbTableName = "vTipoAvisoPlantilla";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlantillaRow( _dst, false );
			Old = new vTipoAvisoPlantillaRow( _dst , true );
		}
		
		
		public vTipoAvisoPlantilla( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTipoAvisoPlantilla";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlantillaRow( _dst, false );
			Old = new vTipoAvisoPlantillaRow( _dst , true );
		}
				
		public vTipoAvisoPlantilla( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTipoAvisoPlantilla() : base() 
		{
			Init();
		}
		
		public vTipoAvisoPlantilla( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTipoAvisoPlantilla";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "PlantillaID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "TipoAvisoNombre", typeof( String ) );  
			_dt.Columns.Add( "PlantillaDescrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTipoAvisoPlantillaRow( _dst, false );
			Old = new vTipoAvisoPlantillaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTipoAvisoPlantillaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTipoAvisoPlantilla

#region vListadoCabListadoDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoCabListadoDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field FuncionarioGenID;	
			public DateTime_Field FecGen;	
			public DateTime_Field FecDesde;	
			public DateTime_Field FecHasta;	
			public String_Field SuscripcionTipoNombre;	
			public String_Field FuncionarioGenNombre;	

			public vListadoCabListadoDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				FuncionarioGenID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				FecGen		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				FecDesde		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FecHasta		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				SuscripcionTipoNombre		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				FuncionarioGenNombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vListadoCabListadoDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListadoCabListadoDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListadoCabListadoDet";
	
		
		public vListadoCabListadoDetRow Dat;
		public vListadoCabListadoDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListadoCabListadoDet( DataTable tab ) : base() 
		{
			_dbTableName = "vListadoCabListadoDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoCabListadoDetRow( _dst, false );
			Old = new vListadoCabListadoDetRow( _dst , true );
		}
		
		
		public vListadoCabListadoDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListadoCabListadoDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoCabListadoDetRow( _dst, false );
			Old = new vListadoCabListadoDetRow( _dst , true );
		}
				
		public vListadoCabListadoDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListadoCabListadoDet() : base() 
		{
			Init();
		}
		
		public vListadoCabListadoDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListadoCabListadoDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "FecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "FecDesde", typeof( DateTime ) );  
			_dt.Columns.Add( "FecHasta", typeof( DateTime ) );  
			_dt.Columns.Add( "SuscripcionTipoNombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioGenNombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoCabListadoDetRow( _dst, false );
			Old = new vListadoCabListadoDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoCabListadoDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListadoCabListadoDet

#region vListadoDetHistorico
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoDetHistoricoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field FecDesde;	
			public DateTime_Field FecHasta;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field ExpedienteID;	
			public DateTime_Field FecVencSit;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field SituacionID;	
			public String_Field Propietario;	
			public String_Field Pais;	
			public String_Field MarcaDenominacion;	
			public String_Field MarcaTipoAbrev;	
			public Int_Field ClaseNro;	
			public String_Field SuscripcionTipoNombre;	
			public String_Field SuscripcionTipoDescripcion;	
			public String_Field SuscripcionTipoMailOrigen;	
			public String_Field SuscripcionTipoMailSubject;	

			public vListadoDetHistoricoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				FecDesde		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				FecHasta		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				FecVencSit		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Pais		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				MarcaDenominacion		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				MarcaTipoAbrev		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				SuscripcionTipoNombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				SuscripcionTipoDescripcion		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				SuscripcionTipoMailOrigen		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				SuscripcionTipoMailSubject		= new String_Field(	_dst, 17, IsOldDataVersion  );	
			}
		} // end class vListadoDetHistoricoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListadoDetHistorico : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListadoDetHistorico";
	
		
		public vListadoDetHistoricoRow Dat;
		public vListadoDetHistoricoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListadoDetHistorico( DataTable tab ) : base() 
		{
			_dbTableName = "vListadoDetHistorico";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoDetHistoricoRow( _dst, false );
			Old = new vListadoDetHistoricoRow( _dst , true );
		}
		
		
		public vListadoDetHistorico( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListadoDetHistorico";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoDetHistoricoRow( _dst, false );
			Old = new vListadoDetHistoricoRow( _dst , true );
		}
				
		public vListadoDetHistorico( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListadoDetHistorico() : base() 
		{
			Init();
		}
		
		public vListadoDetHistorico( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListadoDetHistorico";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "FecDesde", typeof( DateTime ) );  
			_dt.Columns.Add( "FecHasta", typeof( DateTime ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "FecVencSit", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Pais", typeof( String ) );  
			_dt.Columns.Add( "MarcaDenominacion", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionTipoNombre", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoDescripcion", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoMailOrigen", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoMailSubject", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoDetHistoricoRow( _dst, false );
			Old = new vListadoDetHistoricoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoDetHistoricoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListadoDetHistorico

#region vListadoCabListadoEnvio
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoCabListadoEnvioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ModoEnvioID;	
			public Int_Field SuscripcionID;	
			public Int_Field ListadoCabID;	
			public Int_Field ClienteExternoID;	
			public Int_Field ClienteInternoID;	
			public String_Field MailTo;	
			public String_Field MailOrigen;	
			public String_Field MailSubject;	
			public String_Field Fax;	
			public String_Field Msg;	
			public DateTime_Field FecEnvio;	
			public Int_Field IdiomaID;	
			public String_Field ClienteExternoNom;	
			public String_Field ClienteInternoNom;	
			public Int_Field CViaComID;	

			public vListadoCabListadoEnvioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SuscripcionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ListadoCabID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClienteExternoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClienteInternoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				MailTo		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				MailSubject		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Msg		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ClienteExternoNom		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				ClienteInternoNom		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				CViaComID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vListadoCabListadoEnvioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListadoCabListadoEnvio : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListadoCabListadoEnvio";
	
		
		public vListadoCabListadoEnvioRow Dat;
		public vListadoCabListadoEnvioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListadoCabListadoEnvio( DataTable tab ) : base() 
		{
			_dbTableName = "vListadoCabListadoEnvio";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoCabListadoEnvioRow( _dst, false );
			Old = new vListadoCabListadoEnvioRow( _dst , true );
		}
		
		
		public vListadoCabListadoEnvio( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListadoCabListadoEnvio";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoCabListadoEnvioRow( _dst, false );
			Old = new vListadoCabListadoEnvioRow( _dst , true );
		}
				
		public vListadoCabListadoEnvio( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListadoCabListadoEnvio() : base() 
		{
			Init();
		}
		
		public vListadoCabListadoEnvio( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListadoCabListadoEnvio";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "SuscripcionID", typeof( int ) );  
			_dt.Columns.Add( "ListadoCabID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteInternoID", typeof( int ) );  
			_dt.Columns.Add( "MailTo", typeof( String ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "MailSubject", typeof( String ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "Msg", typeof( String ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "ClienteExternoNom", typeof( String ) );  
			_dt.Columns.Add( "ClienteInternoNom", typeof( String ) );  
			_dt.Columns.Add( "CViaComID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoCabListadoEnvioRow( _dst, false );
			Old = new vListadoCabListadoEnvioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoCabListadoEnvioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListadoCabListadoEnvio

#region vViewAvisoOpo
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vViewAvisoOpoRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaBaseID;	
			public Int_Field VigilanciaDocID;	
			public Int_Field ModoEnvioID;	
			public String_Field ModoEnvio;	
			public DateTime_Field FecEnvio;	
			public Int_Field FuncionarioEnvioID;	
			public String_Field NombreFuncEnvio;	
			public String_Field Usuario;	
			public String_Field Nick;	
			public Int_Field TipoAvisoID;	
			public String_Field NombreTipoAviso;	
			public Int_Field NroAviso;	

			public vViewAvisoOpoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaBaseID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				VigilanciaDocID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ModoEnvio		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FuncionarioEnvioID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				NombreFuncEnvio		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Usuario		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Nick		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				NombreTipoAviso		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				NroAviso		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
			}
		} // end class vViewAvisoOpoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vViewAvisoOpo : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vViewAvisoOpo";
	
		
		public vViewAvisoOpoRow Dat;
		public vViewAvisoOpoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vViewAvisoOpo( DataTable tab ) : base() 
		{
			_dbTableName = "vViewAvisoOpo";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vViewAvisoOpoRow( _dst, false );
			Old = new vViewAvisoOpoRow( _dst , true );
		}
		
		
		public vViewAvisoOpo( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vViewAvisoOpo";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vViewAvisoOpoRow( _dst, false );
			Old = new vViewAvisoOpoRow( _dst , true );
		}
				
		public vViewAvisoOpo( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vViewAvisoOpo() : base() 
		{
			Init();
		}
		
		public vViewAvisoOpo( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vViewAvisoOpo";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "VigilanciaDocID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvio", typeof( String ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "NombreFuncEnvio", typeof( String ) );  
			_dt.Columns.Add( "Usuario", typeof( String ) );  
			_dt.Columns.Add( "Nick", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "NombreTipoAviso", typeof( String ) );  
			_dt.Columns.Add( "NroAviso", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vViewAvisoOpoRow( _dst, false );
			Old = new vViewAvisoOpoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vViewAvisoOpoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vViewAvisoOpo

#region vAvisosInstruccion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisosInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field InstruccionTipoID;	
			public String_Field Obs;	
			public DateTime_Field FecAlta;	
			public Int_Field CorrespondenciaID;	
			public Int_Field FuncionarioRegID;	
			public Int_Field FuncionarioRecID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	
			public String_Field InstruccionTipoDescrip;	
			public String_Field FuncionarioRegNombre;	
			public String_Field FuncionarioRecNombre;	
			public Int_Field CorrespondenciaNro;	
			public Int_Field CorrespondenciaAnio;	
			public String_Field CorrespondenciaRefCorresp;	

			public vAvisosInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FuncionarioRecID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				InstruccionTipoDescrip		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				FuncionarioRegNombre		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioRecNombre		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				CorrespondenciaNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				CorrespondenciaAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				CorrespondenciaRefCorresp		= new String_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vAvisosInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisosInstruccion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisosInstruccion";
	
		
		public vAvisosInstruccionRow Dat;
		public vAvisosInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisosInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisosInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosInstruccionRow( _dst, false );
			Old = new vAvisosInstruccionRow( _dst , true );
		}
		
		
		public vAvisosInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisosInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosInstruccionRow( _dst, false );
			Old = new vAvisosInstruccionRow( _dst , true );
		}
				
		public vAvisosInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisosInstruccion() : base() 
		{
			Init();
		}
		
		public vAvisosInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisosInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRecID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoDescrip", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRegNombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioRecNombre", typeof( String ) );  
			_dt.Columns.Add( "CorrespondenciaNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaAnio", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaRefCorresp", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisosInstruccionRow( _dst, false );
			Old = new vAvisosInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisosInstruccionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisosInstruccion

#region vConsultaPropClienteInstruccion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vConsultaPropClienteInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field clienteid;	
			public String_Field clientenombre;	
			public Int_Field propietarioid;	
			public String_Field propnombre;	
			public DateTime_Field fecalta;	
			public Int_Field funcionarioregid;	
			public Int_Field funcionariorecid;	
			public String_Field obs;	
			public Int_Field correspondenciaid;	
			public Int_Field nro;	
			public Int_Field anio;	
			public Int_Field codarea;	
			public Int_Field instrucciontipoid;	
			public String_Field descrip;	

			public vConsultaPropClienteInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				clienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				propietarioid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				propnombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				fecalta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				funcionarioregid		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				funcionariorecid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				correspondenciaid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				codarea		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				instrucciontipoid		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vConsultaPropClienteInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vConsultaPropClienteInstruccion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vConsultaPropClienteInstruccion";
	
		
		public vConsultaPropClienteInstruccionRow Dat;
		public vConsultaPropClienteInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vConsultaPropClienteInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "vConsultaPropClienteInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsultaPropClienteInstruccionRow( _dst, false );
			Old = new vConsultaPropClienteInstruccionRow( _dst , true );
		}
		
		
		public vConsultaPropClienteInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vConsultaPropClienteInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsultaPropClienteInstruccionRow( _dst, false );
			Old = new vConsultaPropClienteInstruccionRow( _dst , true );
		}
				
		public vConsultaPropClienteInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vConsultaPropClienteInstruccion() : base() 
		{
			Init();
		}
		
		public vConsultaPropClienteInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vConsultaPropClienteInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "propietarioid", typeof( int ) );  
			_dt.Columns.Add( "propnombre", typeof( String ) );  
			_dt.Columns.Add( "fecalta", typeof( DateTime ) );  
			_dt.Columns.Add( "funcionarioregid", typeof( int ) );  
			_dt.Columns.Add( "funcionariorecid", typeof( int ) );  
			_dt.Columns.Add( "obs", typeof( String ) );  
			_dt.Columns.Add( "correspondenciaid", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "codarea", typeof( int ) );  
			_dt.Columns.Add( "instrucciontipoid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsultaPropClienteInstruccionRow( _dst, false );
			Old = new vConsultaPropClienteInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vConsultaPropClienteInstruccionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vConsultaPropClienteInstruccion

#region vBusOpoCabDetRes
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBusOpoCabDetResRow 
		{
			private  DSTab _dst;
			
			public String_Field Denominacion;	
			public DateTime_Field FecSol;	

			public vBusOpoCabDetResRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Denominacion		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				FecSol		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
			}
		} // end class vBusOpoCabDetResRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBusOpoCabDetRes : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBusOpoCabDetRes";
	
		
		public vBusOpoCabDetResRow Dat;
		public vBusOpoCabDetResRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBusOpoCabDetRes( DataTable tab ) : base() 
		{
			_dbTableName = "vBusOpoCabDetRes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusOpoCabDetResRow( _dst, false );
			Old = new vBusOpoCabDetResRow( _dst , true );
		}
		
		
		public vBusOpoCabDetRes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBusOpoCabDetRes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusOpoCabDetResRow( _dst, false );
			Old = new vBusOpoCabDetResRow( _dst , true );
		}
				
		public vBusOpoCabDetRes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBusOpoCabDetRes() : base() 
		{
			Init();
		}
		
		public vBusOpoCabDetRes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBusOpoCabDetRes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "FecSol", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusOpoCabDetResRow( _dst, false );
			Old = new vBusOpoCabDetResRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBusOpoCabDetResAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBusOpoCabDetRes

#region vClaseRelacionada
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClaseRelacionadaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ClaseID;	
			public Int_Field NizaEdicionID;	
			public Int_Field Nro;	
			public Int_Field ClaseRelNro;	
			public Int_Field ClaseRelNizaEdicion;	
			public String_Field ClaseRelDescrip;	
			public String_Field ClaseRelDescripBreve;	
			public Boolean_Field Ancestro;	
			public Boolean_Field Vigilancia;	
			public String_Field Edicion;	

			public vClaseRelacionadaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ClaseID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseRelNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseRelNizaEdicion		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseRelDescrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseRelDescripBreve		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Ancestro		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				Vigilancia		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				Edicion		= new String_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vClaseRelacionadaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClaseRelacionada : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClaseRelacionada";
	
		
		public vClaseRelacionadaRow Dat;
		public vClaseRelacionadaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClaseRelacionada( DataTable tab ) : base() 
		{
			_dbTableName = "vClaseRelacionada";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseRelacionadaRow( _dst, false );
			Old = new vClaseRelacionadaRow( _dst , true );
		}
		
		
		public vClaseRelacionada( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClaseRelacionada";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseRelacionadaRow( _dst, false );
			Old = new vClaseRelacionadaRow( _dst , true );
		}
				
		public vClaseRelacionada( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClaseRelacionada() : base() 
		{
			Init();
		}
		
		public vClaseRelacionada( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClaseRelacionada";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "ClaseRelNro", typeof( int ) );  
			_dt.Columns.Add( "ClaseRelNizaEdicion", typeof( int ) );  
			_dt.Columns.Add( "ClaseRelDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClaseRelDescripBreve", typeof( String ) );  
			_dt.Columns.Add( "Ancestro", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilancia", typeof( Boolean ) );  
			_dt.Columns.Add( "Edicion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseRelacionadaRow( _dst, false );
			Old = new vClaseRelacionadaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClaseRelacionadaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClaseRelacionada

#region vClaseNizaEdicion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClaseNizaEdicionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field NizaEdicionID;	
			public String_Field Descrip;	
			public String_Field DescripBreve;	
			public String_Field Edicion;	

			public vClaseNizaEdicionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Edicion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vClaseNizaEdicionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClaseNizaEdicion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClaseNizaEdicion";
	
		
		public vClaseNizaEdicionRow Dat;
		public vClaseNizaEdicionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClaseNizaEdicion( DataTable tab ) : base() 
		{
			_dbTableName = "vClaseNizaEdicion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseNizaEdicionRow( _dst, false );
			Old = new vClaseNizaEdicionRow( _dst , true );
		}
		
		
		public vClaseNizaEdicion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClaseNizaEdicion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseNizaEdicionRow( _dst, false );
			Old = new vClaseNizaEdicionRow( _dst , true );
		}
				
		public vClaseNizaEdicion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClaseNizaEdicion() : base() 
		{
			Init();
		}
		
		public vClaseNizaEdicion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClaseNizaEdicion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			_dt.Columns.Add( "Edicion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseNizaEdicionRow( _dst, false );
			Old = new vClaseNizaEdicionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClaseNizaEdicionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClaseNizaEdicion

#region vBusCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBusCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field busOpoCabID;	
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public Int_Field BolCarpeta;	
			public String_Field Tipo;	
			public Int_Field SuscripcionTipoID;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecFin;	
			public String_Field Estado;	
			public String_Field Texto;	
			public Boolean_Field BusClaseRel;	
			public Int_Field BusPuntmin;	
			public String_Field TipoSuscripcion;	
			public String_Field suscripcionNombre;	
			public String_Field usuarioNombre;	
			public String_Field usuarioNick;	

			public vBusCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				busOpoCabID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				BolCarpeta		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Tipo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				SuscripcionTipoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				FecFin		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Texto		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				BusClaseRel		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				BusPuntmin		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TipoSuscripcion		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				suscripcionNombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				usuarioNombre		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				usuarioNick		= new String_Field(	_dst, 16, IsOldDataVersion  );	
			}
		} // end class vBusCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBusCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBusCab";
	
		
		public vBusCabRow Dat;
		public vBusCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBusCab( DataTable tab ) : base() 
		{
			_dbTableName = "vBusCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusCabRow( _dst, false );
			Old = new vBusCabRow( _dst , true );
		}
		
		
		public vBusCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBusCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusCabRow( _dst, false );
			Old = new vBusCabRow( _dst , true );
		}
				
		public vBusCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBusCab() : base() 
		{
			Init();
		}
		
		public vBusCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBusCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "busOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolCarpeta", typeof( int ) );  
			_dt.Columns.Add( "Tipo", typeof( String ) );  
			_dt.Columns.Add( "SuscripcionTipoID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecFin", typeof( DateTime ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "Texto", typeof( String ) );  
			_dt.Columns.Add( "BusClaseRel", typeof( Boolean ) );  
			_dt.Columns.Add( "BusPuntmin", typeof( int ) );  
			_dt.Columns.Add( "TipoSuscripcion", typeof( String ) );  
			_dt.Columns.Add( "suscripcionNombre", typeof( String ) );  
			_dt.Columns.Add( "usuarioNombre", typeof( String ) );  
			_dt.Columns.Add( "usuarioNick", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusCabRow( _dst, false );
			Old = new vBusCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBusCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBusCab

#region vAlertaVigilancia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAlertaVigilanciaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaAlerta;	
			public String_Field Asunto;	
			public Int_Field Remitente;	
			public Int_Field Destinatario;	
			public String_Field Indicaciones;	
			public Int_Field Prioridad;	
			public Boolean_Field Leido;	
			public String_Field RemitenteNombre;	
			public String_Field DestinatarioNombre;	

			public vAlertaVigilanciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 1, IsOldDataVersion  );	
				FechaAlerta		= new DateTime_Field(	_dst, 2, IsOldDataVersion  );	
				Asunto		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Remitente		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Destinatario		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Indicaciones		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Prioridad		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				Leido		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				RemitenteNombre		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				DestinatarioNombre		= new String_Field(	_dst, 10, IsOldDataVersion  );	
			}
		} // end class vAlertaVigilanciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAlertaVigilancia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAlertaVigilancia";
	
		
		public vAlertaVigilanciaRow Dat;
		public vAlertaVigilanciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAlertaVigilancia( DataTable tab ) : base() 
		{
			_dbTableName = "vAlertaVigilancia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAlertaVigilanciaRow( _dst, false );
			Old = new vAlertaVigilanciaRow( _dst , true );
		}
		
		
		public vAlertaVigilancia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAlertaVigilancia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAlertaVigilanciaRow( _dst, false );
			Old = new vAlertaVigilanciaRow( _dst , true );
		}
				
		public vAlertaVigilancia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAlertaVigilancia() : base() 
		{
			Init();
		}
		
		public vAlertaVigilancia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAlertaVigilancia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaAlerta", typeof( DateTime ) );  
			_dt.Columns.Add( "Asunto", typeof( String ) );  
			_dt.Columns.Add( "Remitente", typeof( int ) );  
			_dt.Columns.Add( "Destinatario", typeof( int ) );  
			_dt.Columns.Add( "Indicaciones", typeof( String ) );  
			_dt.Columns.Add( "Prioridad", typeof( int ) );  
			_dt.Columns.Add( "Leido", typeof( Boolean ) );  
			_dt.Columns.Add( "RemitenteNombre", typeof( String ) );  
			_dt.Columns.Add( "DestinatarioNombre", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAlertaVigilanciaRow( _dst, false );
			Old = new vAlertaVigilanciaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAlertaVigilanciaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAlertaVigilancia

#region vAtencionCliente
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAtencionClienteRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Obs;	
			public Int_Field ClienteID;	
			public Int_Field AreaID;	
			public Int_Field ViaID;	
			public String_Field Mail;	

			public vAtencionClienteRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ViaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Mail		= new String_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vAtencionClienteRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAtencionCliente : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAtencionCliente";
	
		
		public vAtencionClienteRow Dat;
		public vAtencionClienteRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAtencionCliente( DataTable tab ) : base() 
		{
			_dbTableName = "vAtencionCliente";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionClienteRow( _dst, false );
			Old = new vAtencionClienteRow( _dst , true );
		}
		
		
		public vAtencionCliente( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAtencionCliente";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionClienteRow( _dst, false );
			Old = new vAtencionClienteRow( _dst , true );
		}
				
		public vAtencionCliente( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAtencionCliente() : base() 
		{
			Init();
		}
		
		public vAtencionCliente( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAtencionCliente";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "ViaID", typeof( int ) );  
			_dt.Columns.Add( "Mail", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionClienteRow( _dst, false );
			Old = new vAtencionClienteRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAtencionClienteAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAtencionCliente

#region vListado
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Propietario;	
			public String_Field Denominacion;	
			public String_Field ProPais;	
			public String_Field TramiteBol;	
			public Int_Field SituacionID;	
			public String_Field SituacionDescrip;	
			public String_Field ClaseNro;	
			public Int_Field MarcaTipoID;	
			public String_Field TipoMarcaDescrip;	
			public String_Field TipoMarcaAbrev;	
			public Int_Field ActaAnio;	
			public Int_Field ExpedienteID;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field AgenteLocalID;	

			public vListadoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				TramiteBol		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				TipoMarcaDescrip		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				TipoMarcaAbrev		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vListadoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListado : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListado";
	
		
		public vListadoRow Dat;
		public vListadoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListado( DataTable tab ) : base() 
		{
			_dbTableName = "vListado";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoRow( _dst, false );
			Old = new vListadoRow( _dst , true );
		}
		
		
		public vListado( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListado";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoRow( _dst, false );
			Old = new vListadoRow( _dst , true );
		}
				
		public vListado( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListado() : base() 
		{
			Init();
		}
		
		public vListado( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListado";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "TramiteBol", typeof( String ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "TipoMarcaDescrip", typeof( String ) );  
			_dt.Columns.Add( "TipoMarcaAbrev", typeof( String ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoRow( _dst, false );
			Old = new vListadoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListado

#region vListadoNoExp
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoNoExpRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Propietario;	
			public String_Field ProPais;	
			public String_Field Denominacion;	
			public String_Field TramiteBol;	
			public Int_Field SituacionID;	
			public String_Field SituacionDescrip;	
			public String_Field ClaseNro;	
			public Int_Field MarcaTipoID;	
			public String_Field TipoMarcaDescrip;	
			public String_Field TipoMarcaAbrev;	
			public Int_Field ActaAnio;	
			public Int_Field ExpedienteID;	
			public DateTime_Field VencimientoFecha;	
			public String_Field AgenteLocalID;	

			public vListadoNoExpRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				TramiteBol		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				TipoMarcaDescrip		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				TipoMarcaAbrev		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				AgenteLocalID		= new String_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vListadoNoExpRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListadoNoExp : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListadoNoExp";
	
		
		public vListadoNoExpRow Dat;
		public vListadoNoExpRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListadoNoExp( DataTable tab ) : base() 
		{
			_dbTableName = "vListadoNoExp";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoNoExpRow( _dst, false );
			Old = new vListadoNoExpRow( _dst , true );
		}
		
		
		public vListadoNoExp( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListadoNoExp";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoNoExpRow( _dst, false );
			Old = new vListadoNoExpRow( _dst , true );
		}
				
		public vListadoNoExp( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListadoNoExp() : base() 
		{
			Init();
		}
		
		public vListadoNoExp( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListadoNoExp";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "TramiteBol", typeof( String ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "TipoMarcaDescrip", typeof( String ) );  
			_dt.Columns.Add( "TipoMarcaAbrev", typeof( String ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoNoExpRow( _dst, false );
			Old = new vListadoNoExpRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoNoExpAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListadoNoExp

#region vMarcaExt
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaExtRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field Clase;	
			public String_Field MotivoReg;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field RegNro;	
			public String_Field PaisRegistro;	
			public Int_Field FuncionarioID;	
			public DateTime_Field FecAlta;	
			public DateTime_Field FecUltModif;	
			public String_Field PropNombre;	
			public String_Field PropDir;	
			public String_Field PropPais;	
			public Int_Field ClienteID;	
			public Int_Field CorrespondenciaID;	
			public String_Field FuncionarioNombre;	
			public String_Field ClienteNombre;	
			public Int_Field CorrespondenciaNro;	
			public Int_Field CorrespondenciaAnio;	
			public String_Field CorrespondenciaRef;	

			public vMarcaExtRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Clase		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MotivoReg		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				RegNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				PaisRegistro		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				FecUltModif		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				PropNombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				PropDir		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				PropPais		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				FuncionarioNombre		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				CorrespondenciaNro		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				CorrespondenciaAnio		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				CorrespondenciaRef		= new String_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vMarcaExtRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaExt : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaExt";
	
		
		public vMarcaExtRow Dat;
		public vMarcaExtRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaExt( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaExt";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaExtRow( _dst, false );
			Old = new vMarcaExtRow( _dst , true );
		}
		
		
		public vMarcaExt( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaExt";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaExtRow( _dst, false );
			Old = new vMarcaExtRow( _dst , true );
		}
				
		public vMarcaExt( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaExt() : base() 
		{
			Init();
		}
		
		public vMarcaExt( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaExt";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( int ) );  
			_dt.Columns.Add( "MotivoReg", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "RegNro", typeof( int ) );  
			_dt.Columns.Add( "PaisRegistro", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FecUltModif", typeof( DateTime ) );  
			_dt.Columns.Add( "PropNombre", typeof( String ) );  
			_dt.Columns.Add( "PropDir", typeof( String ) );  
			_dt.Columns.Add( "PropPais", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioNombre", typeof( String ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "CorrespondenciaNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaAnio", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaRef", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaExtRow( _dst, false );
			Old = new vMarcaExtRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaExtAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaExt

#region vSeguimientoAvisos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSeguimientoAvisosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field bolNro;	
			public Int_Field bolAnio;	
			public DateTime_Field fecVencReal;	
			public DateTime_Field fecVenFict;	
			public DateTime_Field fecGen;	
			public DateTime_Field fecEnvio;	
			public String_Field mailTo;	
			public String_Field mailOrigen;	
			public String_Field atencion;	
			public Int_Field idiomaID;	
			public String_Field estado;	
			public Int_Field busOpoCabId;	
			public Int_Field AvisoOpoCabID;	
			public Int_Field TipoAvisoID;	
			public Int_Field ModoEnvioID;	
			public Int_Field marcaBaseID;	
			public Int_Field marcaSolID;	
			public Int_Field marcaBaseHistID;	
			public Int_Field marcaSolHistID;	
			public String_Field BaseDenominacion;	
			public String_Field BaseClienteNombre;	
			public Int_Field BaseClase;	
			public Int_Field BaseActaNro;	
			public Int_Field BaseActaAnio;	
			public Int_Field BaseRegistroNro;	
			public DateTime_Field BaseFecSol;	
			public String_Field BasePropNombre;	
			public Int_Field BaseMarcaTipoID;	
			public String_Field BaseMarcaTipoAbrev;	
			public String_Field SolDenominacion;	
			public String_Field SolClienteNombre;	
			public Int_Field SolClase;	
			public Int_Field SolActaNro;	
			public Int_Field SolActaAnio;	
			public Int_Field SolRegistroNro;	
			public DateTime_Field SolFecSol;	
			public String_Field SolPropNombre;	
			public Int_Field SolMarcaTipoID;	
			public String_Field SolMarcaTipoAbrev;	
			public String_Field GeneradoPor;	
			public String_Field EnviadoPor;	
			public String_Field NombreAviso;	
			public String_Field NombreModoEnvio;	
			public Int_Field InstruccionTipoID;	
			public DateTime_Field InstruccionfecAlta;	
			public String_Field InstruccionObs;	
			public Int_Field InstruccionCorrespID;	
			public String_Field InstruccionTipoDescrip;	
			public String_Field InstruccionTipoAbrev;	
			public Int_Field CorrespondenciaNro;	
			public Int_Field CorrespondenciaAnio;	
			public String_Field CorrespondenciaRef;	

			public vSeguimientoAvisosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				bolNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				bolAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				fecVencReal		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				fecVenFict		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				fecGen		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				fecEnvio		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				mailTo		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				mailOrigen		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				idiomaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				estado		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				busOpoCabId		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				AvisoOpoCabID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				marcaBaseID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				marcaSolID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				marcaBaseHistID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				marcaSolHistID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BaseDenominacion		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				BaseClienteNombre		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				BaseClase		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				BaseActaNro		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				BaseActaAnio		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				BaseRegistroNro		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				BaseFecSol		= new DateTime_Field(	_dst, 26, IsOldDataVersion  );	
				BasePropNombre		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				BaseMarcaTipoID		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				BaseMarcaTipoAbrev		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				SolDenominacion		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				SolClienteNombre		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				SolClase		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
				SolActaNro		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				SolActaAnio		= new Int_Field(	_dst, 34, IsOldDataVersion  );	
				SolRegistroNro		= new Int_Field(	_dst, 35, IsOldDataVersion  );	
				SolFecSol		= new DateTime_Field(	_dst, 36, IsOldDataVersion  );	
				SolPropNombre		= new String_Field(	_dst, 37, IsOldDataVersion  );	
				SolMarcaTipoID		= new Int_Field(	_dst, 38, IsOldDataVersion  );	
				SolMarcaTipoAbrev		= new String_Field(	_dst, 39, IsOldDataVersion  );	
				GeneradoPor		= new String_Field(	_dst, 40, IsOldDataVersion  );	
				EnviadoPor		= new String_Field(	_dst, 41, IsOldDataVersion  );	
				NombreAviso		= new String_Field(	_dst, 42, IsOldDataVersion  );	
				NombreModoEnvio		= new String_Field(	_dst, 43, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 44, IsOldDataVersion  );	
				InstruccionfecAlta		= new DateTime_Field(	_dst, 45, IsOldDataVersion  );	
				InstruccionObs		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				InstruccionCorrespID		= new Int_Field(	_dst, 47, IsOldDataVersion  );	
				InstruccionTipoDescrip		= new String_Field(	_dst, 48, IsOldDataVersion  );	
				InstruccionTipoAbrev		= new String_Field(	_dst, 49, IsOldDataVersion  );	
				CorrespondenciaNro		= new Int_Field(	_dst, 50, IsOldDataVersion  );	
				CorrespondenciaAnio		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				CorrespondenciaRef		= new String_Field(	_dst, 52, IsOldDataVersion  );	
			}
		} // end class vSeguimientoAvisosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSeguimientoAvisos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSeguimientoAvisos";
	
		
		public vSeguimientoAvisosRow Dat;
		public vSeguimientoAvisosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSeguimientoAvisos( DataTable tab ) : base() 
		{
			_dbTableName = "vSeguimientoAvisos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSeguimientoAvisosRow( _dst, false );
			Old = new vSeguimientoAvisosRow( _dst , true );
		}
		
		
		public vSeguimientoAvisos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSeguimientoAvisos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSeguimientoAvisosRow( _dst, false );
			Old = new vSeguimientoAvisosRow( _dst , true );
		}
				
		public vSeguimientoAvisos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSeguimientoAvisos() : base() 
		{
			Init();
		}
		
		public vSeguimientoAvisos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSeguimientoAvisos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "bolNro", typeof( int ) );  
			_dt.Columns.Add( "bolAnio", typeof( int ) );  
			_dt.Columns.Add( "fecVencReal", typeof( DateTime ) );  
			_dt.Columns.Add( "fecVenFict", typeof( DateTime ) );  
			_dt.Columns.Add( "fecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "fecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "mailTo", typeof( String ) );  
			_dt.Columns.Add( "mailOrigen", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "idiomaID", typeof( int ) );  
			_dt.Columns.Add( "estado", typeof( String ) );  
			_dt.Columns.Add( "busOpoCabId", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "marcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "marcaSolID", typeof( int ) );  
			_dt.Columns.Add( "marcaBaseHistID", typeof( int ) );  
			_dt.Columns.Add( "marcaSolHistID", typeof( int ) );  
			_dt.Columns.Add( "BaseDenominacion", typeof( String ) );  
			_dt.Columns.Add( "BaseClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "BaseClase", typeof( int ) );  
			_dt.Columns.Add( "BaseActaNro", typeof( int ) );  
			_dt.Columns.Add( "BaseActaAnio", typeof( int ) );  
			_dt.Columns.Add( "BaseRegistroNro", typeof( int ) );  
			_dt.Columns.Add( "BaseFecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "BasePropNombre", typeof( String ) );  
			_dt.Columns.Add( "BaseMarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "BaseMarcaTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "SolDenominacion", typeof( String ) );  
			_dt.Columns.Add( "SolClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "SolClase", typeof( int ) );  
			_dt.Columns.Add( "SolActaNro", typeof( int ) );  
			_dt.Columns.Add( "SolActaAnio", typeof( int ) );  
			_dt.Columns.Add( "SolRegistroNro", typeof( int ) );  
			_dt.Columns.Add( "SolFecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "SolPropNombre", typeof( String ) );  
			_dt.Columns.Add( "SolMarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "SolMarcaTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "GeneradoPor", typeof( String ) );  
			_dt.Columns.Add( "EnviadoPor", typeof( String ) );  
			_dt.Columns.Add( "NombreAviso", typeof( String ) );  
			_dt.Columns.Add( "NombreModoEnvio", typeof( String ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionfecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "InstruccionObs", typeof( String ) );  
			_dt.Columns.Add( "InstruccionCorrespID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoDescrip", typeof( String ) );  
			_dt.Columns.Add( "InstruccionTipoAbrev", typeof( String ) );  
			_dt.Columns.Add( "CorrespondenciaNro", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaAnio", typeof( int ) );  
			_dt.Columns.Add( "CorrespondenciaRef", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSeguimientoAvisosRow( _dst, false );
			Old = new vSeguimientoAvisosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSeguimientoAvisosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSeguimientoAvisos

#region vConsMarcaLitigiosWeb
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vConsMarcaLitigiosWebRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public Int_Field ClaseID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioPais;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Activa;	
			public Int_Field ExpedienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Acta;	
			public Int_Field TramiteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public Int_Field ClaseNro;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public DateTime_Field VencimientoFecha;	
			public String_Field Registro;	
			public DateTime_Field ConcesionFecha;	
			public String_Field TramiteAbrev;	
			public Int_Field ClienteID;	
			public String_Field ClienteNombre;	
			public Int_Field TramiteSitID;	
			public String_Field SituacionDescrip;	
			public String_Field marcatipo;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public String_Field str_hdesc;	
			public String_Field str_public;	
			public String_Field str_concec;	
			public String_Field str_fec_public;	
			public String_Field str_fec_venc_public;	

			public vConsMarcaLitigiosWebRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Activa		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				marcatipo		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				str_hdesc		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				str_public		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				str_concec		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				str_fec_public		= new String_Field(	_dst, 31, IsOldDataVersion  );	
				str_fec_venc_public		= new String_Field(	_dst, 32, IsOldDataVersion  );	
			}
		} // end class vConsMarcaLitigiosWebRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vConsMarcaLitigiosWeb : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vConsMarcaLitigiosWeb";
	
		
		public vConsMarcaLitigiosWebRow Dat;
		public vConsMarcaLitigiosWebRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vConsMarcaLitigiosWeb( DataTable tab ) : base() 
		{
			_dbTableName = "vConsMarcaLitigiosWeb";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsMarcaLitigiosWebRow( _dst, false );
			Old = new vConsMarcaLitigiosWebRow( _dst , true );
		}
		
		
		public vConsMarcaLitigiosWeb( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vConsMarcaLitigiosWeb";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsMarcaLitigiosWebRow( _dst, false );
			Old = new vConsMarcaLitigiosWebRow( _dst , true );
		}
				
		public vConsMarcaLitigiosWeb( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vConsMarcaLitigiosWeb() : base() 
		{
			Init();
		}
		
		public vConsMarcaLitigiosWeb( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vConsMarcaLitigiosWeb";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Activa", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "marcatipo", typeof( String ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "str_hdesc", typeof( String ) );  
			_dt.Columns.Add( "str_public", typeof( String ) );  
			_dt.Columns.Add( "str_concec", typeof( String ) );  
			_dt.Columns.Add( "str_fec_public", typeof( String ) );  
			_dt.Columns.Add( "str_fec_venc_public", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsMarcaLitigiosWebRow( _dst, false );
			Old = new vConsMarcaLitigiosWebRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vConsMarcaLitigiosWebAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vConsMarcaLitigiosWeb

#region vAvisoOpoCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisoOpoCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field VigilanciaDocID;	
			public Int_Field ModoEnvioID;	
			public Int_Field TipoAvisoID;	
			public Int_Field MarcaExtBaseID;	
			public Int_Field MarcaBaseID;	
			public Int_Field BolNro;	
			public Int_Field BolAnio;	
			public DateTime_Field FecVencReal;	
			public DateTime_Field FecVenFict;	
			public DateTime_Field FecGen;	
			public DateTime_Field FecEnvio;	
			public Int_Field FuncionarioGenID;	
			public Int_Field FuncionarioEnvioID;	
			public String_Field Fax;	
			public String_Field MailTo;	
			public String_Field MailOrigen;	
			public String_Field Correo;	
			public String_Field Atencion;	
			public Int_Field IdiomaID;	
			public Int_Field BusOpoCabID;	
			public Int_Field AvisoOpoCabID;	
			public String_Field Estado;	
			public Int_Field nroaviso;	
			public String_Field tipo;	
			public String_Field mailOrigAviso;	
			public Int_Field TipoAvisoPadre;	
			public String_Field nombreModoEnvio;	
			public Int_Field cviacomID;	
			public String_Field Propietario;	

			public vAvisoOpoCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				VigilanciaDocID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ModoEnvioID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				TipoAvisoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaExtBaseID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				FecVencReal		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FecVenFict		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				FecGen		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				FecEnvio		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioGenID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				FuncionarioEnvioID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Fax		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				MailTo		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				MailOrigen		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				Atencion		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BusOpoCabID		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				AvisoOpoCabID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				Estado		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				nroaviso		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				tipo		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				mailOrigAviso		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				TipoAvisoPadre		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				nombreModoEnvio		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				cviacomID		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 29, IsOldDataVersion  );	
			}
		} // end class vAvisoOpoCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisoOpoCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisoOpoCab";
	
		
		public vAvisoOpoCabRow Dat;
		public vAvisoOpoCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisoOpoCab( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisoOpoCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoOpoCabRow( _dst, false );
			Old = new vAvisoOpoCabRow( _dst , true );
		}
		
		
		public vAvisoOpoCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisoOpoCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoOpoCabRow( _dst, false );
			Old = new vAvisoOpoCabRow( _dst , true );
		}
				
		public vAvisoOpoCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisoOpoCab() : base() 
		{
			Init();
		}
		
		public vAvisoOpoCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisoOpoCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "VigilanciaDocID", typeof( int ) );  
			_dt.Columns.Add( "ModoEnvioID", typeof( int ) );  
			_dt.Columns.Add( "TipoAvisoID", typeof( int ) );  
			_dt.Columns.Add( "MarcaExtBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "FecVencReal", typeof( DateTime ) );  
			_dt.Columns.Add( "FecVenFict", typeof( DateTime ) );  
			_dt.Columns.Add( "FecGen", typeof( DateTime ) );  
			_dt.Columns.Add( "FecEnvio", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioGenID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioEnvioID", typeof( int ) );  
			_dt.Columns.Add( "Fax", typeof( String ) );  
			_dt.Columns.Add( "MailTo", typeof( String ) );  
			_dt.Columns.Add( "MailOrigen", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Atencion", typeof( String ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( String ) );  
			_dt.Columns.Add( "nroaviso", typeof( int ) );  
			_dt.Columns.Add( "tipo", typeof( String ) );  
			_dt.Columns.Add( "mailOrigAviso", typeof( String ) );  
			_dt.Columns.Add( "TipoAvisoPadre", typeof( int ) );  
			_dt.Columns.Add( "nombreModoEnvio", typeof( String ) );  
			_dt.Columns.Add( "cviacomID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoOpoCabRow( _dst, false );
			Old = new vAvisoOpoCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisoOpoCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisoOpoCab

#region vExpedienteDistribuidor
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpedienteDistribuidorRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field MarcaID;	
			public Int_Field DistribuidorID;	
			public String_Field DistribuidorNombre;	
			public String_Field Producto_Servicio;	

			public vExpedienteDistribuidorRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				DistribuidorID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				DistribuidorNombre		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Producto_Servicio		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vExpedienteDistribuidorRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpedienteDistribuidor : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpedienteDistribuidor";
	
		
		public vExpedienteDistribuidorRow Dat;
		public vExpedienteDistribuidorRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpedienteDistribuidor( DataTable tab ) : base() 
		{
			_dbTableName = "vExpedienteDistribuidor";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteDistribuidorRow( _dst, false );
			Old = new vExpedienteDistribuidorRow( _dst , true );
		}
		
		
		public vExpedienteDistribuidor( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpedienteDistribuidor";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteDistribuidorRow( _dst, false );
			Old = new vExpedienteDistribuidorRow( _dst , true );
		}
				
		public vExpedienteDistribuidor( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpedienteDistribuidor() : base() 
		{
			Init();
		}
		
		public vExpedienteDistribuidor( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpedienteDistribuidor";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "DistribuidorID", typeof( int ) );  
			_dt.Columns.Add( "DistribuidorNombre", typeof( String ) );  
			_dt.Columns.Add( "Producto_Servicio", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteDistribuidorRow( _dst, false );
			Old = new vExpedienteDistribuidorRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpedienteDistribuidorAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpedienteDistribuidor

#region vClienteDatos
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteDatosRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Correo;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Boolean_Field Multiple;	
			public Int_Field GrupoEmpresarialID;	
			public Boolean_Field Activo;	
			public Boolean_Field TraduccionAuto;	
			public Int_Field CiudadID;	
			public Boolean_Field Inubicable;	
			public Int_Field ddi;	
			public Boolean_Field Distribuidor;	
			public String_Field pais;	
			public String_Field paistel;	
			public String_Field nomciudad;	
			public String_Field idioma;	
			public String_Field grupo;	

			public vClienteDatosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Multiple		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				TraduccionAuto		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Inubicable		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				ddi		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				Distribuidor		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				pais		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				paistel		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				nomciudad		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				grupo		= new String_Field(	_dst, 24, IsOldDataVersion  );	
			}
		} // end class vClienteDatosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClienteDatos : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClienteDatos";
	
		
		public vClienteDatosRow Dat;
		public vClienteDatosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClienteDatos( DataTable tab ) : base() 
		{
			_dbTableName = "vClienteDatos";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteDatosRow( _dst, false );
			Old = new vClienteDatosRow( _dst , true );
		}
		
		
		public vClienteDatos( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClienteDatos";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteDatosRow( _dst, false );
			Old = new vClienteDatosRow( _dst , true );
		}
				
		public vClienteDatos( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClienteDatos() : base() 
		{
			Init();
		}
		
		public vClienteDatos( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClienteDatos";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "TraduccionAuto", typeof( Boolean ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			_dt.Columns.Add( "Inubicable", typeof( Boolean ) );  
			_dt.Columns.Add( "ddi", typeof( int ) );  
			_dt.Columns.Add( "Distribuidor", typeof( Boolean ) );  
			_dt.Columns.Add( "pais", typeof( String ) );  
			_dt.Columns.Add( "paistel", typeof( String ) );  
			_dt.Columns.Add( "nomciudad", typeof( String ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "grupo", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteDatosRow( _dst, false );
			Old = new vClienteDatosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteDatosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClienteDatos

#region vTramiteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTramiteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field procesoid;	
			public String_Field descrip;	
			public String_Field abrev;	
			public Int_Field trabajotipoid;	
			public String_Field bolabrev;	
			public DateTime_Field lastUpdated;	

			public vTramiteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				procesoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				trabajotipoid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				bolabrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vTramiteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTramiteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTramiteReplic";
	
		
		public vTramiteReplicRow Dat;
		public vTramiteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTramiteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vTramiteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteReplicRow( _dst, false );
			Old = new vTramiteReplicRow( _dst , true );
		}
		
		
		public vTramiteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTramiteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteReplicRow( _dst, false );
			Old = new vTramiteReplicRow( _dst , true );
		}
				
		public vTramiteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTramiteReplic() : base() 
		{
			Init();
		}
		
		public vTramiteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTramiteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "procesoid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "trabajotipoid", typeof( int ) );  
			_dt.Columns.Add( "bolabrev", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteReplicRow( _dst, false );
			Old = new vTramiteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTramiteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTramiteReplic

#region vMarcaTipoReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaTipoReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field descrip;	
			public String_Field abrev;	
			public DateTime_Field lastUpdated;	

			public vMarcaTipoReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vMarcaTipoReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaTipoReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaTipoReplic";
	
		
		public vMarcaTipoReplicRow Dat;
		public vMarcaTipoReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaTipoReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaTipoReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaTipoReplicRow( _dst, false );
			Old = new vMarcaTipoReplicRow( _dst , true );
		}
		
		
		public vMarcaTipoReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaTipoReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaTipoReplicRow( _dst, false );
			Old = new vMarcaTipoReplicRow( _dst , true );
		}
				
		public vMarcaTipoReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaTipoReplic() : base() 
		{
			Init();
		}
		
		public vMarcaTipoReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaTipoReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaTipoReplicRow( _dst, false );
			Old = new vMarcaTipoReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaTipoReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaTipoReplic

#region vExpeSituacionWeb
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeSituacionWebRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field TramiteSitID;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field SituacionFecha;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field FuncionarioID;	
			public String_Field Obs;	
			public String_Field Datos;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Int_Field Orden;	
			public Boolean_Field SitStandBy;	

			public vExpeSituacionWebRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Datos		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				Orden		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				SitStandBy		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vExpeSituacionWebRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeSituacionWeb : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeSituacionWeb";
	
		
		public vExpeSituacionWebRow Dat;
		public vExpeSituacionWebRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeSituacionWeb( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeSituacionWeb";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeSituacionWebRow( _dst, false );
			Old = new vExpeSituacionWebRow( _dst , true );
		}
		
		
		public vExpeSituacionWeb( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeSituacionWeb";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeSituacionWebRow( _dst, false );
			Old = new vExpeSituacionWebRow( _dst , true );
		}
				
		public vExpeSituacionWeb( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeSituacionWeb() : base() 
		{
			Init();
		}
		
		public vExpeSituacionWeb( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeSituacionWeb";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Datos", typeof( String ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "Orden", typeof( int ) );  
			_dt.Columns.Add( "SitStandBy", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeSituacionWebRow( _dst, false );
			Old = new vExpeSituacionWebRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeSituacionWebAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeSituacionWeb

#region vClaseReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClaseReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field NizaEdicionID;	
			public Int_Field ClaseTipoID;	
			public String_Field Descrip;	
			public String_Field DescripBreve;	
			public DateTime_Field lastUpdated;	

			public vClaseReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vClaseReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClaseReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClaseReplic";
	
		
		public vClaseReplicRow Dat;
		public vClaseReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClaseReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vClaseReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseReplicRow( _dst, false );
			Old = new vClaseReplicRow( _dst , true );
		}
		
		
		public vClaseReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClaseReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseReplicRow( _dst, false );
			Old = new vClaseReplicRow( _dst , true );
		}
				
		public vClaseReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClaseReplic() : base() 
		{
			Init();
		}
		
		public vClaseReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClaseReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "ClaseTipoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseReplicRow( _dst, false );
			Old = new vClaseReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClaseReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClaseReplic

#region vClienteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Correo;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Boolean_Field Multiple;	
			public Int_Field GrupoEmpresarialID;	
			public Boolean_Field Activo;	
			public Boolean_Field TraduccionAuto;	
			public Int_Field CiudadID;	
			public Boolean_Field Inubicable;	
			public Int_Field Ddi;	
			public Boolean_Field PGeneral;	
			public Boolean_Field PIntelectual;	
			public Boolean_Field Distribuidor;	
			public DateTime_Field lastUpdated;	

			public vClienteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Multiple		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				TraduccionAuto		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Inubicable		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Ddi		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PGeneral		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				PIntelectual		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				Distribuidor		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vClienteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClienteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClienteReplic";
	
		
		public vClienteReplicRow Dat;
		public vClienteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClienteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vClienteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteReplicRow( _dst, false );
			Old = new vClienteReplicRow( _dst , true );
		}
		
		
		public vClienteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClienteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteReplicRow( _dst, false );
			Old = new vClienteReplicRow( _dst , true );
		}
				
		public vClienteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClienteReplic() : base() 
		{
			Init();
		}
		
		public vClienteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClienteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "TraduccionAuto", typeof( Boolean ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			_dt.Columns.Add( "Inubicable", typeof( Boolean ) );  
			_dt.Columns.Add( "Ddi", typeof( int ) );  
			_dt.Columns.Add( "PGeneral", typeof( Boolean ) );  
			_dt.Columns.Add( "PIntelectual", typeof( Boolean ) );  
			_dt.Columns.Add( "Distribuidor", typeof( Boolean ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteReplicRow( _dst, false );
			Old = new vClienteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClienteReplic

#region vTramite_SitReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTramite_SitReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public Int_Field Plazo;	
			public Int_Field UnidadID;	
			public Boolean_Field Vigente;	
			public Boolean_Field Automatico;	
			public Int_Field Orden;	
			public DateTime_Field lastUpdated;	

			public vTramite_SitReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Plazo		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				UnidadID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Automatico		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Orden		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class vTramite_SitReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTramite_SitReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTramite_SitReplic";
	
		
		public vTramite_SitReplicRow Dat;
		public vTramite_SitReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTramite_SitReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vTramite_SitReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramite_SitReplicRow( _dst, false );
			Old = new vTramite_SitReplicRow( _dst , true );
		}
		
		
		public vTramite_SitReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTramite_SitReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramite_SitReplicRow( _dst, false );
			Old = new vTramite_SitReplicRow( _dst , true );
		}
				
		public vTramite_SitReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTramite_SitReplic() : base() 
		{
			Init();
		}
		
		public vTramite_SitReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTramite_SitReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Plazo", typeof( int ) );  
			_dt.Columns.Add( "UnidadID", typeof( int ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "Automatico", typeof( Boolean ) );  
			_dt.Columns.Add( "Orden", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramite_SitReplicRow( _dst, false );
			Old = new vTramite_SitReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTramite_SitReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTramite_SitReplic

#region vSituacionReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSituacionReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Boolean_Field StandBy;	
			public Boolean_Field EnTramite;	
			public DateTime_Field lastUpdated;	

			public vSituacionReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vSituacionReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSituacionReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSituacionReplic";
	
		
		public vSituacionReplicRow Dat;
		public vSituacionReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSituacionReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vSituacionReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionReplicRow( _dst, false );
			Old = new vSituacionReplicRow( _dst , true );
		}
		
		
		public vSituacionReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSituacionReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionReplicRow( _dst, false );
			Old = new vSituacionReplicRow( _dst , true );
		}
				
		public vSituacionReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSituacionReplic() : base() 
		{
			Init();
		}
		
		public vSituacionReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSituacionReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionReplicRow( _dst, false );
			Old = new vSituacionReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSituacionReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSituacionReplic

#region vExpedienteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpedienteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Int_Field ExpedienteID;	
			public Int_Field BoletinDetalleID;	
			public Int_Field DiarioID;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field Documento;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Concluido;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field MarcaRegRenID;	
			public Int_Field PoderInscID;	
			public Int_Field MarcaID;	
			public DateTime_Field FechaAband;	
			public String_Field Obs;	
			public String_Field Acta;	
			public String_Field Publicacion;	
			public String_Field Label;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field lastUpdated;	

			public vExpedienteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				BoletinDetalleID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				DiarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Documento		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 21, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				FechaAband		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				Publicacion		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 30, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 31, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 32, IsOldDataVersion  );	
			}
		} // end class vExpedienteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpedienteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpedienteReplic";
	
		
		public vExpedienteReplicRow Dat;
		public vExpedienteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpedienteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vExpedienteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteReplicRow( _dst, false );
			Old = new vExpedienteReplicRow( _dst , true );
		}
		
		
		public vExpedienteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpedienteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteReplicRow( _dst, false );
			Old = new vExpedienteReplicRow( _dst , true );
		}
				
		public vExpedienteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpedienteReplic() : base() 
		{
			Init();
		}
		
		public vExpedienteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpedienteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BoletinDetalleID", typeof( int ) );  
			_dt.Columns.Add( "DiarioID", typeof( int ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "Documento", typeof( Boolean ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "FechaAband", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Publicacion", typeof( String ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteReplicRow( _dst, false );
			Old = new vExpedienteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpedienteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpedienteReplic

#region vMarcaReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public String_Field Fonetizada;	
			public Int_Field MarcaTipoID;	
			public Int_Field ClaseID;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigente;	
			public Int_Field LogotipoID;	
			public Int_Field ExpedienteVigenteID;	
			public Boolean_Field OtrosClientes;	
			public Int_Field MarcaRegRenID;	
			public Int_Field MarcaRegRenAnt;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public String_Field Obs;	
			public DateTime_Field lastUpdated;	

			public vMarcaReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Fonetizada		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ExpedienteVigenteID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				OtrosClientes		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				MarcaRegRenAnt		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 24, IsOldDataVersion  );	
			}
		} // end class vMarcaReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaReplic";
	
		
		public vMarcaReplicRow Dat;
		public vMarcaReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaReplicRow( _dst, false );
			Old = new vMarcaReplicRow( _dst , true );
		}
		
		
		public vMarcaReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaReplicRow( _dst, false );
			Old = new vMarcaReplicRow( _dst , true );
		}
				
		public vMarcaReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaReplic() : base() 
		{
			Init();
		}
		
		public vMarcaReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "Fonetizada", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteVigenteID", typeof( int ) );  
			_dt.Columns.Add( "OtrosClientes", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "MarcaRegRenAnt", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaReplicRow( _dst, false );
			Old = new vMarcaReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaReplic

#region vExpediente_SituacionReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpediente_SituacionReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field TramiteSitID;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field SituacionFecha;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field FuncionarioID;	
			public String_Field Obs;	
			public String_Field Datos;	
			public DateTime_Field lastUpdated;	

			public vExpediente_SituacionReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Datos		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vExpediente_SituacionReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpediente_SituacionReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpediente_SituacionReplic";
	
		
		public vExpediente_SituacionReplicRow Dat;
		public vExpediente_SituacionReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpediente_SituacionReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vExpediente_SituacionReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpediente_SituacionReplicRow( _dst, false );
			Old = new vExpediente_SituacionReplicRow( _dst , true );
		}
		
		
		public vExpediente_SituacionReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpediente_SituacionReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpediente_SituacionReplicRow( _dst, false );
			Old = new vExpediente_SituacionReplicRow( _dst , true );
		}
				
		public vExpediente_SituacionReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpediente_SituacionReplic() : base() 
		{
			Init();
		}
		
		public vExpediente_SituacionReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpediente_SituacionReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Datos", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpediente_SituacionReplicRow( _dst, false );
			Old = new vExpediente_SituacionReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpediente_SituacionReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpediente_SituacionReplic

#region vMarcaRegRenReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaRegRenReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public DateTime_Field ConcesionFecha;	
			public Boolean_Field Limitada;	
			public Boolean_Field Vigente;	
			public String_Field RefMarca;	
			public String_Field ObsAvRen;	
			public Boolean_Field TituloError;	
			public String_Field Registro;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field lastUpdated;	

			public vMarcaRegRenReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				RefMarca		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ObsAvRen		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TituloError		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vMarcaRegRenReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaRegRenReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaRegRenReplic";
	
		
		public vMarcaRegRenReplicRow Dat;
		public vMarcaRegRenReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaRegRenReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaRegRenReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRegRenReplicRow( _dst, false );
			Old = new vMarcaRegRenReplicRow( _dst , true );
		}
		
		
		public vMarcaRegRenReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaRegRenReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRegRenReplicRow( _dst, false );
			Old = new vMarcaRegRenReplicRow( _dst , true );
		}
				
		public vMarcaRegRenReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaRegRenReplic() : base() 
		{
			Init();
		}
		
		public vMarcaRegRenReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaRegRenReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RefMarca", typeof( String ) );  
			_dt.Columns.Add( "ObsAvRen", typeof( String ) );  
			_dt.Columns.Add( "TituloError", typeof( Boolean ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRegRenReplicRow( _dst, false );
			Old = new vMarcaRegRenReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaRegRenReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaRegRenReplic

#region vPropietarioXMarcaReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioXMarcaReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field MarcaID;	
			public DateTime_Field lastUpdated;	

			public vPropietarioXMarcaReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vPropietarioXMarcaReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietarioXMarcaReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietarioXMarcaReplic";
	
		
		public vPropietarioXMarcaReplicRow Dat;
		public vPropietarioXMarcaReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietarioXMarcaReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietarioXMarcaReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXMarcaReplicRow( _dst, false );
			Old = new vPropietarioXMarcaReplicRow( _dst , true );
		}
		
		
		public vPropietarioXMarcaReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietarioXMarcaReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXMarcaReplicRow( _dst, false );
			Old = new vPropietarioXMarcaReplicRow( _dst , true );
		}
				
		public vPropietarioXMarcaReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietarioXMarcaReplic() : base() 
		{
			Init();
		}
		
		public vPropietarioXMarcaReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietarioXMarcaReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXMarcaReplicRow( _dst, false );
			Old = new vPropietarioXMarcaReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioXMarcaReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietarioXMarcaReplic

#region vTramiteDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTramiteDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public Int_Field procesoid;	
			public String_Field descrip;	
			public String_Field abrev;	
			public Int_Field trabajotipoid;	
			public String_Field bolabrev;	
			public DateTime_Field lastUpdated;	

			public vTramiteDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				procesoid		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				trabajotipoid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				bolabrev		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vTramiteDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTramiteDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTramiteDeleteReplic";
	
		
		public vTramiteDeleteReplicRow Dat;
		public vTramiteDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTramiteDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vTramiteDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteDeleteReplicRow( _dst, false );
			Old = new vTramiteDeleteReplicRow( _dst , true );
		}
		
		
		public vTramiteDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTramiteDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteDeleteReplicRow( _dst, false );
			Old = new vTramiteDeleteReplicRow( _dst , true );
		}
				
		public vTramiteDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTramiteDeleteReplic() : base() 
		{
			Init();
		}
		
		public vTramiteDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTramiteDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "procesoid", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "trabajotipoid", typeof( int ) );  
			_dt.Columns.Add( "bolabrev", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramiteDeleteReplicRow( _dst, false );
			Old = new vTramiteDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTramiteDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTramiteDeleteReplic

#region vMarcaTipoDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaTipoDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field descrip;	
			public String_Field abrev;	
			public DateTime_Field lastUpdated;	

			public vMarcaTipoDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vMarcaTipoDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaTipoDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaTipoDeleteReplic";
	
		
		public vMarcaTipoDeleteReplicRow Dat;
		public vMarcaTipoDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaTipoDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaTipoDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaTipoDeleteReplicRow( _dst, false );
			Old = new vMarcaTipoDeleteReplicRow( _dst , true );
		}
		
		
		public vMarcaTipoDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaTipoDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaTipoDeleteReplicRow( _dst, false );
			Old = new vMarcaTipoDeleteReplicRow( _dst , true );
		}
				
		public vMarcaTipoDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaTipoDeleteReplic() : base() 
		{
			Init();
		}
		
		public vMarcaTipoDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaTipoDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "abrev", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaTipoDeleteReplicRow( _dst, false );
			Old = new vMarcaTipoDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaTipoDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaTipoDeleteReplic

#region vClaseDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClaseDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field Nro;	
			public Int_Field NizaEdicionID;	
			public Int_Field ClaseTipoID;	
			public String_Field Descrip;	
			public String_Field DescripBreve;	
			public DateTime_Field lastUpdated;	

			public vClaseDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				NizaEdicionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				DescripBreve		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
			}
		} // end class vClaseDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClaseDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClaseDeleteReplic";
	
		
		public vClaseDeleteReplicRow Dat;
		public vClaseDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClaseDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vClaseDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseDeleteReplicRow( _dst, false );
			Old = new vClaseDeleteReplicRow( _dst , true );
		}
		
		
		public vClaseDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClaseDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseDeleteReplicRow( _dst, false );
			Old = new vClaseDeleteReplicRow( _dst , true );
		}
				
		public vClaseDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClaseDeleteReplic() : base() 
		{
			Init();
		}
		
		public vClaseDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClaseDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "NizaEdicionID", typeof( int ) );  
			_dt.Columns.Add( "ClaseTipoID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "DescripBreve", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClaseDeleteReplicRow( _dst, false );
			Old = new vClaseDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClaseDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClaseDeleteReplic

#region vClienteDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vClienteDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Direccion;	
			public String_Field Correo;	
			public String_Field Documento;	
			public String_Field RUC;	
			public String_Field Personeria;	
			public String_Field Obs;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaModificacion;	
			public Int_Field IdiomaID;	
			public Int_Field PaisID;	
			public Boolean_Field Multiple;	
			public Int_Field GrupoEmpresarialID;	
			public Boolean_Field Activo;	
			public Boolean_Field TraduccionAuto;	
			public Int_Field CiudadID;	
			public Boolean_Field Inubicable;	
			public Int_Field Ddi;	
			public Boolean_Field PGeneral;	
			public Boolean_Field PIntelectual;	
			public Boolean_Field Distribuidor;	
			public DateTime_Field lastUpdated;	

			public vClienteDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Direccion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Documento		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				RUC		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Personeria		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				FechaModificacion		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
				IdiomaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PaisID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Multiple		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				GrupoEmpresarialID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				TraduccionAuto		= new Boolean_Field(	_dst, 15, IsOldDataVersion  );	
				CiudadID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				Inubicable		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Ddi		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PGeneral		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				PIntelectual		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				Distribuidor		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vClienteDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vClienteDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vClienteDeleteReplic";
	
		
		public vClienteDeleteReplicRow Dat;
		public vClienteDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vClienteDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vClienteDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteDeleteReplicRow( _dst, false );
			Old = new vClienteDeleteReplicRow( _dst , true );
		}
		
		
		public vClienteDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vClienteDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteDeleteReplicRow( _dst, false );
			Old = new vClienteDeleteReplicRow( _dst , true );
		}
				
		public vClienteDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vClienteDeleteReplic() : base() 
		{
			Init();
		}
		
		public vClienteDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vClienteDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Direccion", typeof( String ) );  
			_dt.Columns.Add( "Correo", typeof( String ) );  
			_dt.Columns.Add( "Documento", typeof( String ) );  
			_dt.Columns.Add( "RUC", typeof( String ) );  
			_dt.Columns.Add( "Personeria", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaModificacion", typeof( DateTime ) );  
			_dt.Columns.Add( "IdiomaID", typeof( int ) );  
			_dt.Columns.Add( "PaisID", typeof( int ) );  
			_dt.Columns.Add( "Multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "GrupoEmpresarialID", typeof( int ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "TraduccionAuto", typeof( Boolean ) );  
			_dt.Columns.Add( "CiudadID", typeof( int ) );  
			_dt.Columns.Add( "Inubicable", typeof( Boolean ) );  
			_dt.Columns.Add( "Ddi", typeof( int ) );  
			_dt.Columns.Add( "PGeneral", typeof( Boolean ) );  
			_dt.Columns.Add( "PIntelectual", typeof( Boolean ) );  
			_dt.Columns.Add( "Distribuidor", typeof( Boolean ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vClienteDeleteReplicRow( _dst, false );
			Old = new vClienteDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vClienteDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vClienteDeleteReplic

#region vTramite_SitDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vTramite_SitDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field SituacionID;	
			public Int_Field Plazo;	
			public Int_Field UnidadID;	
			public Boolean_Field Vigente;	
			public Boolean_Field Automatico;	
			public Int_Field Orden;	
			public DateTime_Field lastUpdated;	

			public vTramite_SitDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Plazo		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				UnidadID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Automatico		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Orden		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
			}
		} // end class vTramite_SitDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vTramite_SitDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vTramite_SitDeleteReplic";
	
		
		public vTramite_SitDeleteReplicRow Dat;
		public vTramite_SitDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vTramite_SitDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vTramite_SitDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramite_SitDeleteReplicRow( _dst, false );
			Old = new vTramite_SitDeleteReplicRow( _dst , true );
		}
		
		
		public vTramite_SitDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vTramite_SitDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramite_SitDeleteReplicRow( _dst, false );
			Old = new vTramite_SitDeleteReplicRow( _dst , true );
		}
				
		public vTramite_SitDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vTramite_SitDeleteReplic() : base() 
		{
			Init();
		}
		
		public vTramite_SitDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vTramite_SitDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Plazo", typeof( int ) );  
			_dt.Columns.Add( "UnidadID", typeof( int ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "Automatico", typeof( Boolean ) );  
			_dt.Columns.Add( "Orden", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vTramite_SitDeleteReplicRow( _dst, false );
			Old = new vTramite_SitDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vTramite_SitDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vTramite_SitDeleteReplic

#region vSituacionDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vSituacionDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Descrip;	
			public String_Field Abrev;	
			public Boolean_Field StandBy;	
			public Boolean_Field EnTramite;	
			public DateTime_Field lastUpdated;	

			public vSituacionDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Abrev		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 3, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vSituacionDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vSituacionDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vSituacionDeleteReplic";
	
		
		public vSituacionDeleteReplicRow Dat;
		public vSituacionDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vSituacionDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vSituacionDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionDeleteReplicRow( _dst, false );
			Old = new vSituacionDeleteReplicRow( _dst , true );
		}
		
		
		public vSituacionDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vSituacionDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionDeleteReplicRow( _dst, false );
			Old = new vSituacionDeleteReplicRow( _dst , true );
		}
				
		public vSituacionDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vSituacionDeleteReplic() : base() 
		{
			Init();
		}
		
		public vSituacionDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vSituacionDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "Abrev", typeof( String ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vSituacionDeleteReplicRow( _dst, false );
			Old = new vSituacionDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vSituacionDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vSituacionDeleteReplic

#region vExpedienteDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpedienteDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Int_Field ExpedienteID;	
			public Int_Field BoletinDetalleID;	
			public Int_Field DiarioID;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field Documento;	
			public Int_Field Bib;	
			public Int_Field Exp;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Concluido;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field MarcaRegRenID;	
			public Int_Field PoderInscID;	
			public Int_Field MarcaID;	
			public DateTime_Field FechaAband;	
			public String_Field Obs;	
			public String_Field Acta;	
			public String_Field Publicacion;	
			public String_Field Label;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field lastUpdated;	

			public vExpedienteDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				BoletinDetalleID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				DiarioID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				Documento		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Bib		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				Exp		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 19, IsOldDataVersion  );	
				Concluido		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 21, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				PoderInscID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				FechaAband		= new DateTime_Field(	_dst, 25, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				Publicacion		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 30, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 31, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 32, IsOldDataVersion  );	
			}
		} // end class vExpedienteDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpedienteDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpedienteDeleteReplic";
	
		
		public vExpedienteDeleteReplicRow Dat;
		public vExpedienteDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpedienteDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vExpedienteDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteDeleteReplicRow( _dst, false );
			Old = new vExpedienteDeleteReplicRow( _dst , true );
		}
		
		
		public vExpedienteDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpedienteDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteDeleteReplicRow( _dst, false );
			Old = new vExpedienteDeleteReplicRow( _dst , true );
		}
				
		public vExpedienteDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpedienteDeleteReplic() : base() 
		{
			Init();
		}
		
		public vExpedienteDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpedienteDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "BoletinDetalleID", typeof( int ) );  
			_dt.Columns.Add( "DiarioID", typeof( int ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "Documento", typeof( Boolean ) );  
			_dt.Columns.Add( "Bib", typeof( int ) );  
			_dt.Columns.Add( "Exp", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Concluido", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "PoderInscID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "FechaAband", typeof( DateTime ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "Publicacion", typeof( String ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpedienteDeleteReplicRow( _dst, false );
			Old = new vExpedienteDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpedienteDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpedienteDeleteReplic

#region vMarcaDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public String_Field Fonetizada;	
			public Int_Field MarcaTipoID;	
			public Int_Field ClaseID;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public Boolean_Field Vigente;	
			public Int_Field LogotipoID;	
			public Int_Field ExpedienteVigenteID;	
			public Boolean_Field OtrosClientes;	
			public Int_Field MarcaRegRenID;	
			public Int_Field MarcaRegRenAnt;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public String_Field Obs;	
			public DateTime_Field lastUpdated;	

			public vMarcaDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				Fonetizada		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 12, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ExpedienteVigenteID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				OtrosClientes		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				MarcaRegRenAnt		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 24, IsOldDataVersion  );	
			}
		} // end class vMarcaDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaDeleteReplic";
	
		
		public vMarcaDeleteReplicRow Dat;
		public vMarcaDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaDeleteReplicRow( _dst, false );
			Old = new vMarcaDeleteReplicRow( _dst , true );
		}
		
		
		public vMarcaDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaDeleteReplicRow( _dst, false );
			Old = new vMarcaDeleteReplicRow( _dst , true );
		}
				
		public vMarcaDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaDeleteReplic() : base() 
		{
			Init();
		}
		
		public vMarcaDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "Fonetizada", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteVigenteID", typeof( int ) );  
			_dt.Columns.Add( "OtrosClientes", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "MarcaRegRenAnt", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaDeleteReplicRow( _dst, false );
			Old = new vMarcaDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaDeleteReplic

#region vExpediente_SituacionDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpediente_SituacionDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field TramiteSitID;	
			public DateTime_Field AltaFecha;	
			public DateTime_Field SituacionFecha;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field FuncionarioID;	
			public String_Field Obs;	
			public String_Field Datos;	
			public DateTime_Field lastUpdated;	

			public vExpediente_SituacionDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				Datos		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 9, IsOldDataVersion  );	
			}
		} // end class vExpediente_SituacionDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpediente_SituacionDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpediente_SituacionDeleteReplic";
	
		
		public vExpediente_SituacionDeleteReplicRow Dat;
		public vExpediente_SituacionDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpediente_SituacionDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vExpediente_SituacionDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpediente_SituacionDeleteReplicRow( _dst, false );
			Old = new vExpediente_SituacionDeleteReplicRow( _dst , true );
		}
		
		
		public vExpediente_SituacionDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpediente_SituacionDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpediente_SituacionDeleteReplicRow( _dst, false );
			Old = new vExpediente_SituacionDeleteReplicRow( _dst , true );
		}
				
		public vExpediente_SituacionDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpediente_SituacionDeleteReplic() : base() 
		{
			Init();
		}
		
		public vExpediente_SituacionDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpediente_SituacionDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "Datos", typeof( String ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpediente_SituacionDeleteReplicRow( _dst, false );
			Old = new vExpediente_SituacionDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpediente_SituacionDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpediente_SituacionDeleteReplic

#region vMarcaRegRenDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaRegRenDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field ExpedienteID;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public DateTime_Field ConcesionFecha;	
			public Boolean_Field Limitada;	
			public Boolean_Field Vigente;	
			public String_Field RefMarca;	
			public String_Field ObsAvRen;	
			public Boolean_Field TituloError;	
			public String_Field Registro;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field lastUpdated;	

			public vMarcaRegRenDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				RefMarca		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ObsAvRen		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TituloError		= new Boolean_Field(	_dst, 9, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
			}
		} // end class vMarcaRegRenDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaRegRenDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaRegRenDeleteReplic";
	
		
		public vMarcaRegRenDeleteReplicRow Dat;
		public vMarcaRegRenDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaRegRenDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaRegRenDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRegRenDeleteReplicRow( _dst, false );
			Old = new vMarcaRegRenDeleteReplicRow( _dst , true );
		}
		
		
		public vMarcaRegRenDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaRegRenDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRegRenDeleteReplicRow( _dst, false );
			Old = new vMarcaRegRenDeleteReplicRow( _dst , true );
		}
				
		public vMarcaRegRenDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaRegRenDeleteReplic() : base() 
		{
			Init();
		}
		
		public vMarcaRegRenDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaRegRenDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RefMarca", typeof( String ) );  
			_dt.Columns.Add( "ObsAvRen", typeof( String ) );  
			_dt.Columns.Add( "TituloError", typeof( Boolean ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaRegRenDeleteReplicRow( _dst, false );
			Old = new vMarcaRegRenDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaRegRenDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaRegRenDeleteReplic

#region vPropietarioXMarcaDeleteReplic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPropietarioXMarcaDeleteReplicRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field PropietarioID;	
			public Int_Field MarcaID;	
			public DateTime_Field lastUpdated;	

			public vPropietarioXMarcaDeleteReplicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				lastUpdated		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
			}
		} // end class vPropietarioXMarcaDeleteReplicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPropietarioXMarcaDeleteReplic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPropietarioXMarcaDeleteReplic";
	
		
		public vPropietarioXMarcaDeleteReplicRow Dat;
		public vPropietarioXMarcaDeleteReplicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPropietarioXMarcaDeleteReplic( DataTable tab ) : base() 
		{
			_dbTableName = "vPropietarioXMarcaDeleteReplic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXMarcaDeleteReplicRow( _dst, false );
			Old = new vPropietarioXMarcaDeleteReplicRow( _dst , true );
		}
		
		
		public vPropietarioXMarcaDeleteReplic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPropietarioXMarcaDeleteReplic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXMarcaDeleteReplicRow( _dst, false );
			Old = new vPropietarioXMarcaDeleteReplicRow( _dst , true );
		}
				
		public vPropietarioXMarcaDeleteReplic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPropietarioXMarcaDeleteReplic() : base() 
		{
			Init();
		}
		
		public vPropietarioXMarcaDeleteReplic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPropietarioXMarcaDeleteReplic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "lastUpdated", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPropietarioXMarcaDeleteReplicRow( _dst, false );
			Old = new vPropietarioXMarcaDeleteReplicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPropietarioXMarcaDeleteReplicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPropietarioXMarcaDeleteReplic

#region vMarcaSolCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaSolCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Denominacion;	
			public Int_Field ClaseNro;	
			public Int_Field BusOpoCabID;	
			public DateTime_Field SolicitudFecha;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public String_Field AgenteLocalNombre;	
			public Int_Field AgenteLocalMatricula;	
			public String_Field MarcaTipo;	
			public Int_Field TramiteID;	

			public vMarcaSolCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				BusOpoCabID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				SolicitudFecha		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				AgenteLocalNombre		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				AgenteLocalMatricula		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vMarcaSolCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaSolCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaSolCab";
	
		
		public vMarcaSolCabRow Dat;
		public vMarcaSolCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaSolCab( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaSolCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaSolCabRow( _dst, false );
			Old = new vMarcaSolCabRow( _dst , true );
		}
		
		
		public vMarcaSolCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaSolCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaSolCabRow( _dst, false );
			Old = new vMarcaSolCabRow( _dst , true );
		}
				
		public vMarcaSolCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaSolCab() : base() 
		{
			Init();
		}
		
		public vMarcaSolCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaSolCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "SolicitudFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "AgenteLocalNombre", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocalMatricula", typeof( int ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaSolCabRow( _dst, false );
			Old = new vMarcaSolCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaSolCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaSolCab

#region vAvisoInstruccion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAvisoInstruccionRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field InstruccionTipoID;	
			public String_Field Obs;	
			public DateTime_Field FecAlta;	
			public Int_Field CorrespondenciaID;	
			public Int_Field FuncionarioRegID;	
			public Int_Field FuncionarioRecID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	
			public Int_Field MarcaSolID;	
			public Int_Field AvisoOpoCabID;	
			public Int_Field BolAnio;	
			public Int_Field BolNro;	
			public Int_Field BolCarpeta;	

			public vAvisoInstruccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				FuncionarioRecID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				MarcaSolID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				AvisoOpoCabID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				BolCarpeta		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
			}
		} // end class vAvisoInstruccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAvisoInstruccion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAvisoInstruccion";
	
		
		public vAvisoInstruccionRow Dat;
		public vAvisoInstruccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAvisoInstruccion( DataTable tab ) : base() 
		{
			_dbTableName = "vAvisoInstruccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoInstruccionRow( _dst, false );
			Old = new vAvisoInstruccionRow( _dst , true );
		}
		
		
		public vAvisoInstruccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAvisoInstruccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoInstruccionRow( _dst, false );
			Old = new vAvisoInstruccionRow( _dst , true );
		}
				
		public vAvisoInstruccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAvisoInstruccion() : base() 
		{
			Init();
		}
		
		public vAvisoInstruccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAvisoInstruccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRecID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolCarpeta", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAvisoInstruccionRow( _dst, false );
			Old = new vAvisoInstruccionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAvisoInstruccionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAvisoInstruccion

#region vCorsearch
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vCorsearchRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Trademark;	
			public Int_Field DesignID;	
			public Int_Field Class;	
			public String_Field TrademarkType;	
			public String_Field Owner;	
			public String_Field OwnerCountry;	
			public String_Field AppNumber;	
			public DateTime_Field AppDate;	
			public Int_Field RegNumber;	
			public DateTime_Field GrantedDate;	
			public DateTime_Field Expiration_Renewal_Date;	
			public DateTime_Field PublicationDate;	
			public String_Field ProcedureName;	
			public String_Field Status;	
			public Binary_Field imagen;	

			public vCorsearchRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Trademark		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DesignID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Class		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				TrademarkType		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Owner		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				OwnerCountry		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				AppNumber		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				AppDate		= new DateTime_Field(	_dst, 8, IsOldDataVersion  );	
				RegNumber		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				GrantedDate		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				Expiration_Renewal_Date		= new DateTime_Field(	_dst, 11, IsOldDataVersion  );	
				PublicationDate		= new DateTime_Field(	_dst, 12, IsOldDataVersion  );	
				ProcedureName		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				Status		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				imagen		= new Binary_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vCorsearchRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCorsearch : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCorsearch";
	
		
		public vCorsearchRow Dat;
		public vCorsearchRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCorsearch( DataTable tab ) : base() 
		{
			_dbTableName = "vCorsearch";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorsearchRow( _dst, false );
			Old = new vCorsearchRow( _dst , true );
		}
		
		
		public vCorsearch( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCorsearch";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorsearchRow( _dst, false );
			Old = new vCorsearchRow( _dst , true );
		}
				
		public vCorsearch( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCorsearch() : base() 
		{
			Init();
		}
		
		public vCorsearch( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCorsearch";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Trademark", typeof( String ) );  
			_dt.Columns.Add( "DesignID", typeof( int ) );  
			_dt.Columns.Add( "Class", typeof( int ) );  
			_dt.Columns.Add( "TrademarkType", typeof( String ) );  
			_dt.Columns.Add( "Owner", typeof( String ) );  
			_dt.Columns.Add( "OwnerCountry", typeof( String ) );  
			_dt.Columns.Add( "AppNumber", typeof( String ) );  
			_dt.Columns.Add( "AppDate", typeof( DateTime ) );  
			_dt.Columns.Add( "RegNumber", typeof( int ) );  
			_dt.Columns.Add( "GrantedDate", typeof( DateTime ) );  
			_dt.Columns.Add( "Expiration_Renewal_Date", typeof( DateTime ) );  
			_dt.Columns.Add( "PublicationDate", typeof( DateTime ) );  
			_dt.Columns.Add( "ProcedureName", typeof( String ) );  
			_dt.Columns.Add( "Status", typeof( String ) );  
			_dt.Columns.Add( "imagen", typeof( Byte[] ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorsearchRow( _dst, false );
			Old = new vCorsearchRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vCorsearchAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCorsearch

#region vMergeAvisosRep
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeAvisosRepRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field denominacion;	
			public Int_Field marcatipoid;	
			public Int_Field claseid;	
			public Int_Field expedienteid;	
			public Int_Field registronro;	
			public Int_Field registroanio;	
			public DateTime_Field vencimientofecha;	
			public Int_Field clienteid;	
			public String_Field cnombre;	
			public Int_Field propietarioid;	
			public String_Field pnombre;	
			public String_Field pdireccion;	
			public String_Field descripidioma;	

			public vMergeAvisosRepRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				marcatipoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				claseid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				registronro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				registroanio		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				vencimientofecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				cnombre		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				propietarioid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				pnombre		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				pdireccion		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				descripidioma		= new String_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vMergeAvisosRepRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeAvisosRep : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeAvisosRep";
	
		
		public vMergeAvisosRepRow Dat;
		public vMergeAvisosRepRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeAvisosRep( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeAvisosRep";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosRepRow( _dst, false );
			Old = new vMergeAvisosRepRow( _dst , true );
		}
		
		
		public vMergeAvisosRep( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeAvisosRep";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosRepRow( _dst, false );
			Old = new vMergeAvisosRepRow( _dst , true );
		}
				
		public vMergeAvisosRep( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeAvisosRep() : base() 
		{
			Init();
		}
		
		public vMergeAvisosRep( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeAvisosRep";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "marcatipoid", typeof( int ) );  
			_dt.Columns.Add( "claseid", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "registronro", typeof( int ) );  
			_dt.Columns.Add( "registroanio", typeof( int ) );  
			_dt.Columns.Add( "vencimientofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "cnombre", typeof( String ) );  
			_dt.Columns.Add( "propietarioid", typeof( int ) );  
			_dt.Columns.Add( "pnombre", typeof( String ) );  
			_dt.Columns.Add( "pdireccion", typeof( String ) );  
			_dt.Columns.Add( "descripidioma", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosRepRow( _dst, false );
			Old = new vMergeAvisosRepRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeAvisosRepAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeAvisosRep

#region vListadoPosibleOPO
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoPosibleOPORow 
		{
			private  DSTab _dst;
			
			public String_Field Denominacion;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field ClaseNro;	
			public DateTime_Field PresentacionFecha;	
			public Int_Field ExpedienteID;	
			public Int_Field ID;	
			public Int_Field AvisoOpoDetID;	
			public Int_Field InstruccionTipoID;	
			public String_Field Obs;	
			public DateTime_Field FecAlta;	
			public Int_Field CorrespondenciaID;	
			public Int_Field FuncionarioRegID;	
			public Int_Field FuncionarioRecID;	
			public Int_Field MarcaBaseID;	
			public Int_Field MarcaBaseExtID;	
			public Int_Field MarcaSolID;	
			public Int_Field AvisoID;	
			public Int_Field BolAnio;	
			public Int_Field BolNro;	
			public Int_Field BolCarpeta;	
			public String_Field PropietarioSolic;	
			public DateTime_Field FecVenFict;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public String_Field Observacion;	

			public vListadoPosibleOPORow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				Denominacion		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				AvisoOpoDetID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				InstruccionTipoID		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				FecAlta		= new DateTime_Field(	_dst, 10, IsOldDataVersion  );	
				CorrespondenciaID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioRegID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				FuncionarioRecID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				MarcaBaseID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				MarcaBaseExtID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				MarcaSolID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				AvisoID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				BolAnio		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				BolNro		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				BolCarpeta		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				PropietarioSolic		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				FecVenFict		= new DateTime_Field(	_dst, 22, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				Observacion		= new String_Field(	_dst, 25, IsOldDataVersion  );	
			}
		} // end class vListadoPosibleOPORow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListadoPosibleOPO : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListadoPosibleOPO";
	
		
		public vListadoPosibleOPORow Dat;
		public vListadoPosibleOPORow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListadoPosibleOPO( DataTable tab ) : base() 
		{
			_dbTableName = "vListadoPosibleOPO";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoPosibleOPORow( _dst, false );
			Old = new vListadoPosibleOPORow( _dst , true );
		}
		
		
		public vListadoPosibleOPO( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListadoPosibleOPO";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoPosibleOPORow( _dst, false );
			Old = new vListadoPosibleOPORow( _dst , true );
		}
				
		public vListadoPosibleOPO( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListadoPosibleOPO() : base() 
		{
			Init();
		}
		
		public vListadoPosibleOPO( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListadoPosibleOPO";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "AvisoOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "InstruccionTipoID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "FecAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "CorrespondenciaID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRegID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioRecID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseID", typeof( int ) );  
			_dt.Columns.Add( "MarcaBaseExtID", typeof( int ) );  
			_dt.Columns.Add( "MarcaSolID", typeof( int ) );  
			_dt.Columns.Add( "AvisoID", typeof( int ) );  
			_dt.Columns.Add( "BolAnio", typeof( int ) );  
			_dt.Columns.Add( "BolNro", typeof( int ) );  
			_dt.Columns.Add( "BolCarpeta", typeof( int ) );  
			_dt.Columns.Add( "PropietarioSolic", typeof( String ) );  
			_dt.Columns.Add( "FecVenFict", typeof( DateTime ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "Observacion", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoPosibleOPORow( _dst, false );
			Old = new vListadoPosibleOPORow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoPosibleOPOAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListadoPosibleOPO

#region vFuncionario
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vFuncionarioRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Funcionario;	
			public String_Field Usuario;	
			public String_Field NombreCorto;	
			public String_Field Email;	
			public Boolean_Field Activo;	
			public String_Field NombrePila;	
			public Int_Field AreaID;	

			public vFuncionarioRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Funcionario		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Usuario		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				NombreCorto		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				Email		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Activo		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				NombrePila		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vFuncionarioRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vFuncionario : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vFuncionario";
	
		
		public vFuncionarioRow Dat;
		public vFuncionarioRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vFuncionario( DataTable tab ) : base() 
		{
			_dbTableName = "vFuncionario";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vFuncionarioRow( _dst, false );
			Old = new vFuncionarioRow( _dst , true );
		}
		
		
		public vFuncionario( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vFuncionario";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vFuncionarioRow( _dst, false );
			Old = new vFuncionarioRow( _dst , true );
		}
				
		public vFuncionario( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vFuncionario() : base() 
		{
			Init();
		}
		
		public vFuncionario( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vFuncionario";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Funcionario", typeof( String ) );  
			_dt.Columns.Add( "Usuario", typeof( String ) );  
			_dt.Columns.Add( "NombreCorto", typeof( String ) );  
			_dt.Columns.Add( "Email", typeof( String ) );  
			_dt.Columns.Add( "Activo", typeof( Boolean ) );  
			_dt.Columns.Add( "NombrePila", typeof( String ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vFuncionarioRow( _dst, false );
			Old = new vFuncionarioRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vFuncionarioAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vFuncionario

#region vPreMergeCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPreMergeCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field ordentrabajoid;	
			public Int_Field nro;	
			public Int_Field anio;	
			public Int_Field atencionid;	
			public String_Field refcorr;	
			public String_Field refcliente;	
			public Int_Field clienteid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public Boolean_Field multiple;	
			public Boolean_Field traduccionauto;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public Int_Field atencionid1;	
			public DateTime_Field fechacorresp;	
			public Int_Field nrocorresp;	
			public Int_Field aniocorresp;	
			public Int_Field tramiteid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	

			public vPreMergeCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ordentrabajoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				refcorr		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				refcliente		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				traduccionauto		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				atencionid1		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				fechacorresp		= new DateTime_Field(	_dst, 16, IsOldDataVersion  );	
				nrocorresp		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				aniocorresp		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 20, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
			}
		} // end class vPreMergeCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPreMergeCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPreMergeCab";
	
		
		public vPreMergeCabRow Dat;
		public vPreMergeCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPreMergeCab( DataTable tab ) : base() 
		{
			_dbTableName = "vPreMergeCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeCabRow( _dst, false );
			Old = new vPreMergeCabRow( _dst , true );
		}
		
		
		public vPreMergeCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPreMergeCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeCabRow( _dst, false );
			Old = new vPreMergeCabRow( _dst , true );
		}
				
		public vPreMergeCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPreMergeCab() : base() 
		{
			Init();
		}
		
		public vPreMergeCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPreMergeCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ordentrabajoid", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "refcorr", typeof( String ) );  
			_dt.Columns.Add( "refcliente", typeof( String ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "traduccionauto", typeof( Boolean ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "atencionid1", typeof( int ) );  
			_dt.Columns.Add( "fechacorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "nrocorresp", typeof( int ) );  
			_dt.Columns.Add( "aniocorresp", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeCabRow( _dst, false );
			Old = new vPreMergeCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPreMergeCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPreMergeCab

#region vMergeConcCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeConcCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field clienteid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public Boolean_Field multiple;	
			public Boolean_Field traduccionauto;	
			public Int_Field paisid;	
			public String_Field nompais;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public Int_Field atencionid;	
			public Int_Field tramiteid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	

			public vMergeConcCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				clienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 4, IsOldDataVersion  );	
				traduccionauto		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				paisid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				nompais		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 14, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
			}
		} // end class vMergeConcCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeConcCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeConcCab";
	
		
		public vMergeConcCabRow Dat;
		public vMergeConcCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeConcCab( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeConcCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeConcCabRow( _dst, false );
			Old = new vMergeConcCabRow( _dst , true );
		}
		
		
		public vMergeConcCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeConcCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeConcCabRow( _dst, false );
			Old = new vMergeConcCabRow( _dst , true );
		}
				
		public vMergeConcCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeConcCab() : base() 
		{
			Init();
		}
		
		public vMergeConcCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeConcCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "traduccionauto", typeof( Boolean ) );  
			_dt.Columns.Add( "paisid", typeof( int ) );  
			_dt.Columns.Add( "nompais", typeof( String ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeConcCabRow( _dst, false );
			Old = new vMergeConcCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeConcCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeConcCab

#region vPreMergeCabEnvTit
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vPreMergeCabEnvTitRow 
		{
			private  DSTab _dst;
			
			public Int_Field ordentrabajoid;	
			public Int_Field nro;	
			public Int_Field anio;	
			public Int_Field atencionid;	
			public String_Field refcorr;	
			public String_Field refcliente;	
			public Int_Field clienteid;	
			public String_Field clientenombre;	
			public String_Field clientecorreo;	
			public Int_Field idiomaid;	
			public Boolean_Field multiple;	
			public Boolean_Field traduccionauto;	
			public String_Field idioma;	
			public String_Field atencion;	
			public Int_Field areaid;	
			public DateTime_Field fechacorresp;	
			public Int_Field nrocorresp;	
			public Int_Field aniocorresp;	
			public Int_Field tramiteid;	
			public Int_Field mergeid;	
			public Boolean_Field generado;	
			public Int_Field mergedocid;	

			public vPreMergeCabEnvTitRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ordentrabajoid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				atencionid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				refcorr		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				refcliente		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				clientenombre		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				clientecorreo		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 10, IsOldDataVersion  );	
				traduccionauto		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				atencion		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				areaid		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				fechacorresp		= new DateTime_Field(	_dst, 15, IsOldDataVersion  );	
				nrocorresp		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				aniocorresp		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				tramiteid		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				mergeid		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				generado		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				mergedocid		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
			}
		} // end class vPreMergeCabEnvTitRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vPreMergeCabEnvTit : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vPreMergeCabEnvTit";
	
		
		public vPreMergeCabEnvTitRow Dat;
		public vPreMergeCabEnvTitRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vPreMergeCabEnvTit( DataTable tab ) : base() 
		{
			_dbTableName = "vPreMergeCabEnvTit";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeCabEnvTitRow( _dst, false );
			Old = new vPreMergeCabEnvTitRow( _dst , true );
		}
		
		
		public vPreMergeCabEnvTit( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vPreMergeCabEnvTit";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeCabEnvTitRow( _dst, false );
			Old = new vPreMergeCabEnvTitRow( _dst , true );
		}
				
		public vPreMergeCabEnvTit( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vPreMergeCabEnvTit() : base() 
		{
			Init();
		}
		
		public vPreMergeCabEnvTit( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vPreMergeCabEnvTit";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ordentrabajoid", typeof( int ) );  
			_dt.Columns.Add( "nro", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "atencionid", typeof( int ) );  
			_dt.Columns.Add( "refcorr", typeof( String ) );  
			_dt.Columns.Add( "refcliente", typeof( String ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "clientenombre", typeof( String ) );  
			_dt.Columns.Add( "clientecorreo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "traduccionauto", typeof( Boolean ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "atencion", typeof( String ) );  
			_dt.Columns.Add( "areaid", typeof( int ) );  
			_dt.Columns.Add( "fechacorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "nrocorresp", typeof( int ) );  
			_dt.Columns.Add( "aniocorresp", typeof( int ) );  
			_dt.Columns.Add( "tramiteid", typeof( int ) );  
			_dt.Columns.Add( "mergeid", typeof( int ) );  
			_dt.Columns.Add( "generado", typeof( Boolean ) );  
			_dt.Columns.Add( "mergedocid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vPreMergeCabEnvTitRow( _dst, false );
			Old = new vPreMergeCabEnvTitRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vPreMergeCabEnvTitAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vPreMergeCabEnvTit

#region vMarcaClaseIdiomaTraduccion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaClaseIdiomaTraduccionRow 
		{
			private  DSTab _dst;
			
			public String_Field denominacion;	
			public Int_Field clasenro;	
			public String_Field idioma;	
			public String_Field traduccion;	
			public Int_Field marcaid;	

			public vMarcaClaseIdiomaTraduccionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				denominacion		= new String_Field(	_dst, 0, IsOldDataVersion  );	
				clasenro		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				traduccion		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				marcaid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vMarcaClaseIdiomaTraduccionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaClaseIdiomaTraduccion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaClaseIdiomaTraduccion";
	
		
		public vMarcaClaseIdiomaTraduccionRow Dat;
		public vMarcaClaseIdiomaTraduccionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaClaseIdiomaTraduccion( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaClaseIdiomaTraduccion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClaseIdiomaTraduccionRow( _dst, false );
			Old = new vMarcaClaseIdiomaTraduccionRow( _dst , true );
		}
		
		
		public vMarcaClaseIdiomaTraduccion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaClaseIdiomaTraduccion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClaseIdiomaTraduccionRow( _dst, false );
			Old = new vMarcaClaseIdiomaTraduccionRow( _dst , true );
		}
				
		public vMarcaClaseIdiomaTraduccion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaClaseIdiomaTraduccion() : base() 
		{
			Init();
		}
		
		public vMarcaClaseIdiomaTraduccion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaClaseIdiomaTraduccion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "clasenro", typeof( int ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			_dt.Columns.Add( "traduccion", typeof( String ) );  
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaClaseIdiomaTraduccionRow( _dst, false );
			Old = new vMarcaClaseIdiomaTraduccionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaClaseIdiomaTraduccionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaClaseIdiomaTraduccion

#region vCorrespMain
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vCorrespMainRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Boolean_Field Entrante;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaCorresp;	
			public String_Field RefCorresp;	
			public Int_Field EntidadID;	
			public Int_Field IdiniRecep;	
			public Int_Field Idvia;	
			public String_Field RefCliente;	
			public Int_Field PrioridadID;	
			public String_Field Obs;	
			public Int_Field ClienteID;	
			public String_Field Nombre;	
			public Int_Field FuncionarioID;	
			public Boolean_Field Estado;	
			public Boolean_Field Facturable;	
			public Boolean_Field Acusado;	
			public Int_Field idarea;	
			public Boolean_Field documento;	
			public Boolean_Field renovacion;	

			public vCorrespMainRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Entrante		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FechaCorresp		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				RefCorresp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				EntidadID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				IdiniRecep		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Idvia		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				RefCliente		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				PrioridadID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				Estado		= new Boolean_Field(	_dst, 16, IsOldDataVersion  );	
				Facturable		= new Boolean_Field(	_dst, 17, IsOldDataVersion  );	
				Acusado		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
				idarea		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				documento		= new Boolean_Field(	_dst, 20, IsOldDataVersion  );	
				renovacion		= new Boolean_Field(	_dst, 21, IsOldDataVersion  );	
			}
		} // end class vCorrespMainRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCorrespMain : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCorrespMain";
	
		
		public vCorrespMainRow Dat;
		public vCorrespMainRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCorrespMain( DataTable tab ) : base() 
		{
			_dbTableName = "vCorrespMain";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespMainRow( _dst, false );
			Old = new vCorrespMainRow( _dst , true );
		}
		
		
		public vCorrespMain( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCorrespMain";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespMainRow( _dst, false );
			Old = new vCorrespMainRow( _dst , true );
		}
				
		public vCorrespMain( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCorrespMain() : base() 
		{
			Init();
		}
		
		public vCorrespMain( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCorrespMain";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Entrante", typeof( Boolean ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaCorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "RefCorresp", typeof( String ) );  
			_dt.Columns.Add( "EntidadID", typeof( int ) );  
			_dt.Columns.Add( "IdiniRecep", typeof( int ) );  
			_dt.Columns.Add( "Idvia", typeof( int ) );  
			_dt.Columns.Add( "RefCliente", typeof( String ) );  
			_dt.Columns.Add( "PrioridadID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Estado", typeof( Boolean ) );  
			_dt.Columns.Add( "Facturable", typeof( Boolean ) );  
			_dt.Columns.Add( "Acusado", typeof( Boolean ) );  
			_dt.Columns.Add( "idarea", typeof( int ) );  
			_dt.Columns.Add( "documento", typeof( Boolean ) );  
			_dt.Columns.Add( "renovacion", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespMainRow( _dst, false );
			Old = new vCorrespMainRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vCorrespMainAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCorrespMain

#region vCtrlNroCorresp
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vCtrlNroCorrespRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field idarea;	
			public Int_Field anio;	
			public Int_Field nrocorresp;	
			public String_Field descrip;	
			public Int_Field ultnrodistrib;	

			public vCtrlNroCorrespRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				idarea		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				anio		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				nrocorresp		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				descrip		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				ultnrodistrib		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vCtrlNroCorrespRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCtrlNroCorresp : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCtrlNroCorresp";
	
		
		public vCtrlNroCorrespRow Dat;
		public vCtrlNroCorrespRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCtrlNroCorresp( DataTable tab ) : base() 
		{
			_dbTableName = "vCtrlNroCorresp";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCtrlNroCorrespRow( _dst, false );
			Old = new vCtrlNroCorrespRow( _dst , true );
		}
		
		
		public vCtrlNroCorresp( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCtrlNroCorresp";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCtrlNroCorrespRow( _dst, false );
			Old = new vCtrlNroCorrespRow( _dst , true );
		}
				
		public vCtrlNroCorresp( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCtrlNroCorresp() : base() 
		{
			Init();
		}
		
		public vCtrlNroCorresp( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCtrlNroCorresp";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "idarea", typeof( int ) );  
			_dt.Columns.Add( "anio", typeof( int ) );  
			_dt.Columns.Add( "nrocorresp", typeof( int ) );  
			_dt.Columns.Add( "descrip", typeof( String ) );  
			_dt.Columns.Add( "ultnrodistrib", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCtrlNroCorrespRow( _dst, false );
			Old = new vCtrlNroCorrespRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vCtrlNroCorrespAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCtrlNroCorresp

#region vBusDetRes
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vBusDetResRow 
		{
			private  DSTab _dst;
			
			public Int_Field BusOpoCabID;	
			public Int_Field BoletinDetID;	
			public String_Field Denominacion;	
			public Int_Field ClaseNro;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public DateTime_Field FecSol;	
			public String_Field Patrones;	
			public String_Field ClaseOpc;	
			public Int_Field ExpedienteID;	
			public Int_Field DetMarcaID;	
			public Int_Field BusOpoDetID;	
			public Int_Field ResExpedienteID;	
			public Int_Field ResActaNro;	
			public Int_Field ResActaAnio;	
			public String_Field ResDenominacion;	
			public String_Field ResDenominacionClave;	
			public Int_Field ResClaseNro;	
			public Int_Field Puntaje;	
			public String_Field PatronFonetizado;	
			public String_Field PatronSerializado;	
			public String_Field PalabraFonetizada;	
			public String_Field PalabraSerializada;	
			public Boolean_Field Seleccionado;	
			public Int_Field ResMarcaID;	
			public Int_Field ResMarcaExtID;	
			public Int_Field BusOpoResID;	
			public String_Field ResPropietario;	
			public String_Field ResClienteNombre;	
			public Int_Field ResClienteID;	
			public String_Field MarcaTipo;	
			public Int_Field RegistroNro;	
			public DateTime_Field ConcesionFecha;	
			public DateTime_Field VencimientoFecha;	
			public Int_Field TramiteID;	
			public String_Field Propietario;	

			public vBusDetResRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				BusOpoCabID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				BoletinDetID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				FecSol		= new DateTime_Field(	_dst, 6, IsOldDataVersion  );	
				Patrones		= new String_Field(	_dst, 7, IsOldDataVersion  );	
				ClaseOpc		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				DetMarcaID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				BusOpoDetID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				ResExpedienteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				ResActaNro		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ResActaAnio		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ResDenominacion		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				ResDenominacionClave		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				ResClaseNro		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				Puntaje		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PatronFonetizado		= new String_Field(	_dst, 19, IsOldDataVersion  );	
				PatronSerializado		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				PalabraFonetizada		= new String_Field(	_dst, 21, IsOldDataVersion  );	
				PalabraSerializada		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				Seleccionado		= new Boolean_Field(	_dst, 23, IsOldDataVersion  );	
				ResMarcaID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				ResMarcaExtID		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				BusOpoResID		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				ResPropietario		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				ResClienteNombre		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				ResClienteID		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 32, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 33, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 34, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 35, IsOldDataVersion  );	
			}
		} // end class vBusDetResRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vBusDetRes : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vBusDetRes";
	
		
		public vBusDetResRow Dat;
		public vBusDetResRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vBusDetRes( DataTable tab ) : base() 
		{
			_dbTableName = "vBusDetRes";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusDetResRow( _dst, false );
			Old = new vBusDetResRow( _dst , true );
		}
		
		
		public vBusDetRes( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vBusDetRes";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusDetResRow( _dst, false );
			Old = new vBusDetResRow( _dst , true );
		}
				
		public vBusDetRes( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vBusDetRes() : base() 
		{
			Init();
		}
		
		public vBusDetRes( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vBusDetRes";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "BusOpoCabID", typeof( int ) );  
			_dt.Columns.Add( "BoletinDetID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "FecSol", typeof( DateTime ) );  
			_dt.Columns.Add( "Patrones", typeof( String ) );  
			_dt.Columns.Add( "ClaseOpc", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "DetMarcaID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoDetID", typeof( int ) );  
			_dt.Columns.Add( "ResExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ResActaNro", typeof( int ) );  
			_dt.Columns.Add( "ResActaAnio", typeof( int ) );  
			_dt.Columns.Add( "ResDenominacion", typeof( String ) );  
			_dt.Columns.Add( "ResDenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "ResClaseNro", typeof( int ) );  
			_dt.Columns.Add( "Puntaje", typeof( int ) );  
			_dt.Columns.Add( "PatronFonetizado", typeof( String ) );  
			_dt.Columns.Add( "PatronSerializado", typeof( String ) );  
			_dt.Columns.Add( "PalabraFonetizada", typeof( String ) );  
			_dt.Columns.Add( "PalabraSerializada", typeof( String ) );  
			_dt.Columns.Add( "Seleccionado", typeof( Boolean ) );  
			_dt.Columns.Add( "ResMarcaID", typeof( int ) );  
			_dt.Columns.Add( "ResMarcaExtID", typeof( int ) );  
			_dt.Columns.Add( "BusOpoResID", typeof( int ) );  
			_dt.Columns.Add( "ResPropietario", typeof( String ) );  
			_dt.Columns.Add( "ResClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "ResClienteID", typeof( int ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vBusDetResRow( _dst, false );
			Old = new vBusDetResRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vBusDetResAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vBusDetRes

#region vMergeAvisosCab
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeAvisosCabRow 
		{
			private  DSTab _dst;
			
			public Int_Field clienteid;	
			public String_Field nombre;	
			public Boolean_Field multiple;	
			public String_Field correo;	
			public Int_Field idiomaid;	
			public String_Field idioma;	

			public vMergeAvisosCabRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				clienteid		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 2, IsOldDataVersion  );	
				correo		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				idiomaid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				idioma		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vMergeAvisosCabRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeAvisosCab : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeAvisosCab";
	
		
		public vMergeAvisosCabRow Dat;
		public vMergeAvisosCabRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeAvisosCab( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeAvisosCab";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosCabRow( _dst, false );
			Old = new vMergeAvisosCabRow( _dst , true );
		}
		
		
		public vMergeAvisosCab( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeAvisosCab";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosCabRow( _dst, false );
			Old = new vMergeAvisosCabRow( _dst , true );
		}
				
		public vMergeAvisosCab( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeAvisosCab() : base() 
		{
			Init();
		}
		
		public vMergeAvisosCab( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeAvisosCab";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "nombre", typeof( String ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			_dt.Columns.Add( "correo", typeof( String ) );  
			_dt.Columns.Add( "idiomaid", typeof( int ) );  
			_dt.Columns.Add( "idioma", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosCabRow( _dst, false );
			Old = new vMergeAvisosCabRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeAvisosCabAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeAvisosCab

#region vChkExpSit
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vChkExpSitRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public Int_Field TramiteSitID;	
			public Int_Field SituacionID;	
			public String_Field Descrip;	
			public DateTime_Field SituacionFecha;	

			public vChkExpSitRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				SituacionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				SituacionFecha		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
			}
		} // end class vChkExpSitRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vChkExpSit : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vChkExpSit";
	
		
		public vChkExpSitRow Dat;
		public vChkExpSitRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vChkExpSit( DataTable tab ) : base() 
		{
			_dbTableName = "vChkExpSit";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vChkExpSitRow( _dst, false );
			Old = new vChkExpSitRow( _dst , true );
		}
		
		
		public vChkExpSit( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vChkExpSit";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vChkExpSitRow( _dst, false );
			Old = new vChkExpSitRow( _dst , true );
		}
				
		public vChkExpSit( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vChkExpSit() : base() 
		{
			Init();
		}
		
		public vChkExpSit( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vChkExpSit";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "SituacionID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "SituacionFecha", typeof( DateTime ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vChkExpSitRow( _dst, false );
			Old = new vChkExpSitRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vChkExpSitAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vChkExpSit

#region vListadoTarjetasCongreso
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vListadoTarjetasCongresoRow 
		{
			private  DSTab _dst;
			
			public Int_Field cliente_id;	
			public String_Field cliente_nombre;	
			public String_Field cliente_correo;	
			public Int_Field atencion_id;	
			public String_Field atencion_nombre;	
			public Int_Field congreso_id;	
			public String_Field congreso_descrip;	
			public String_Field pais_descrip;	

			public vListadoTarjetasCongresoRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				cliente_id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				cliente_nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				cliente_correo		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				atencion_id		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				atencion_nombre		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				congreso_id		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				congreso_descrip		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				pais_descrip		= new String_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vListadoTarjetasCongresoRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vListadoTarjetasCongreso : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vListadoTarjetasCongreso";
	
		
		public vListadoTarjetasCongresoRow Dat;
		public vListadoTarjetasCongresoRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vListadoTarjetasCongreso( DataTable tab ) : base() 
		{
			_dbTableName = "vListadoTarjetasCongreso";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoTarjetasCongresoRow( _dst, false );
			Old = new vListadoTarjetasCongresoRow( _dst , true );
		}
		
		
		public vListadoTarjetasCongreso( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vListadoTarjetasCongreso";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoTarjetasCongresoRow( _dst, false );
			Old = new vListadoTarjetasCongresoRow( _dst , true );
		}
				
		public vListadoTarjetasCongreso( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vListadoTarjetasCongreso() : base() 
		{
			Init();
		}
		
		public vListadoTarjetasCongreso( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vListadoTarjetasCongreso";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "cliente_id", typeof( int ) );  
			_dt.Columns.Add( "cliente_nombre", typeof( String ) );  
			_dt.Columns.Add( "cliente_correo", typeof( String ) );  
			_dt.Columns.Add( "atencion_id", typeof( int ) );  
			_dt.Columns.Add( "atencion_nombre", typeof( String ) );  
			_dt.Columns.Add( "congreso_id", typeof( int ) );  
			_dt.Columns.Add( "congreso_descrip", typeof( String ) );  
			_dt.Columns.Add( "pais_descrip", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vListadoTarjetasCongresoRow( _dst, false );
			Old = new vListadoTarjetasCongresoRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vListadoTarjetasCongresoAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vListadoTarjetasCongreso

#region vMarcaFonetica
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMarcaFoneticaRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public String_Field DenominacionClave;	
			public Int_Field MarcaTipoID;	
			public Int_Field ClaseID;	
			public Int_Field ClaseNro;	
			public Boolean_Field Nuestra;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Int_Field MarcaRegRenID;	
			public String_Field Propietario;	
			public String_Field ProDir;	
			public String_Field ProPais;	
			public Boolean_Field Vigente;	
			public Int_Field ClienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public DateTime_Field PresentacionFecha;	
			public Int_Field TramiteID;	
			public Int_Field ExpedienteID;	

			public vMarcaFoneticaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				MarcaTipoID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				Nuestra		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 7, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 8, IsOldDataVersion  );	
				MarcaRegRenID		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Propietario		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				ProDir		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				ProPais		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 13, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
			}
		} // end class vMarcaFoneticaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMarcaFonetica : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMarcaFonetica";
	
		
		public vMarcaFoneticaRow Dat;
		public vMarcaFoneticaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMarcaFonetica( DataTable tab ) : base() 
		{
			_dbTableName = "vMarcaFonetica";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaFoneticaRow( _dst, false );
			Old = new vMarcaFoneticaRow( _dst , true );
		}
		
		
		public vMarcaFonetica( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMarcaFonetica";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaFoneticaRow( _dst, false );
			Old = new vMarcaFoneticaRow( _dst , true );
		}
				
		public vMarcaFonetica( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMarcaFonetica() : base() 
		{
			Init();
		}
		
		public vMarcaFonetica( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMarcaFonetica";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipoID", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "Nuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaRegRenID", typeof( int ) );  
			_dt.Columns.Add( "Propietario", typeof( String ) );  
			_dt.Columns.Add( "ProDir", typeof( String ) );  
			_dt.Columns.Add( "ProPais", typeof( String ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMarcaFoneticaRow( _dst, false );
			Old = new vMarcaFoneticaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMarcaFoneticaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMarcaFonetica

#region vExpeMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vExpeMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ExpedienteID;	
			public String_Field Acta;	
			public Int_Field ExpedienteIDPadre;	
			public String_Field Registro;	
			public String_Field OrdenTrabajo;	
			public String_Field Denominacion;	
			public String_Field Clase;	
			public Int_Field ClaseNro;	
			public String_Field TramiteDescrip;	
			public String_Field TramiteAbrev;	
			public String_Field SituacionDecrip;	
			public Boolean_Field EnTramite;	
			public Int_Field TramiteID;	
			public Int_Field TramiteSitID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public Int_Field OrdenTrabajoID;	
			public Int_Field ClienteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public DateTime_Field AltaFecha;	
			public Int_Field PropietarioID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioPais;	
			public Int_Field ClaseID;	
			public Int_Field OtNro;	
			public Int_Field OtAnio;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public Int_Field MarcaID;	
			public String_Field Label;	
			public Boolean_Field ExpeNuestro;	
			public Int_Field PublicPag;	
			public Int_Field PublicAnio;	
			public Boolean_Field MarcaNuestra;	
			public Boolean_Field MarcaActiva;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Sustituida;	
			public Boolean_Field StandBy;	
			public DateTime_Field VencimientoFecha;	
			public DateTime_Field RegVigenteVencim;	
			public Int_Field RegVigenteNro;	
			public Int_Field RegVigenteAnio;	
			public DateTime_Field RegVigenteConcesionFecha;	
			public Boolean_Field Vigente;	
			public Boolean_Field RegistroVigente;	
			public String_Field ActaPadre;	
			public String_Field DenominacionClave;	
			public String_Field MarcaTipo;	
			public String_Field ClaseDescripEsp;	
			public Boolean_Field Limitada;	
			public Int_Field LogotipoID;	
			public String_Field NombreCliente;	
			public Int_Field TipoAtencionxMarca;	
			public Int_Field IDTipoAtencionxMarca;	

			public vExpeMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ExpedienteID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ExpedienteIDPadre		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Clase		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				TramiteDescrip		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				SituacionDecrip		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				EnTramite		= new Boolean_Field(	_dst, 11, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				OrdenTrabajoID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				AltaFecha		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				PropietarioID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 23, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 24, IsOldDataVersion  );	
				OtNro		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				OtAnio		= new Int_Field(	_dst, 26, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 27, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 29, IsOldDataVersion  );	
				Label		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				ExpeNuestro		= new Boolean_Field(	_dst, 31, IsOldDataVersion  );	
				PublicPag		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
				PublicAnio		= new Int_Field(	_dst, 33, IsOldDataVersion  );	
				MarcaNuestra		= new Boolean_Field(	_dst, 34, IsOldDataVersion  );	
				MarcaActiva		= new Boolean_Field(	_dst, 35, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 36, IsOldDataVersion  );	
				Sustituida		= new Boolean_Field(	_dst, 37, IsOldDataVersion  );	
				StandBy		= new Boolean_Field(	_dst, 38, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 39, IsOldDataVersion  );	
				RegVigenteVencim		= new DateTime_Field(	_dst, 40, IsOldDataVersion  );	
				RegVigenteNro		= new Int_Field(	_dst, 41, IsOldDataVersion  );	
				RegVigenteAnio		= new Int_Field(	_dst, 42, IsOldDataVersion  );	
				RegVigenteConcesionFecha		= new DateTime_Field(	_dst, 43, IsOldDataVersion  );	
				Vigente		= new Boolean_Field(	_dst, 44, IsOldDataVersion  );	
				RegistroVigente		= new Boolean_Field(	_dst, 45, IsOldDataVersion  );	
				ActaPadre		= new String_Field(	_dst, 46, IsOldDataVersion  );	
				DenominacionClave		= new String_Field(	_dst, 47, IsOldDataVersion  );	
				MarcaTipo		= new String_Field(	_dst, 48, IsOldDataVersion  );	
				ClaseDescripEsp		= new String_Field(	_dst, 49, IsOldDataVersion  );	
				Limitada		= new Boolean_Field(	_dst, 50, IsOldDataVersion  );	
				LogotipoID		= new Int_Field(	_dst, 51, IsOldDataVersion  );	
				NombreCliente		= new String_Field(	_dst, 52, IsOldDataVersion  );	
				TipoAtencionxMarca		= new Int_Field(	_dst, 53, IsOldDataVersion  );	
				IDTipoAtencionxMarca		= new Int_Field(	_dst, 54, IsOldDataVersion  );	
			}
		} // end class vExpeMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vExpeMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vExpeMarca";
	
		
		public vExpeMarcaRow Dat;
		public vExpeMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vExpeMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vExpeMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaRow( _dst, false );
			Old = new vExpeMarcaRow( _dst , true );
		}
		
		
		public vExpeMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vExpeMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaRow( _dst, false );
			Old = new vExpeMarcaRow( _dst , true );
		}
				
		public vExpeMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vExpeMarca() : base() 
		{
			Init();
		}
		
		public vExpeMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vExpeMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "ExpedienteIDPadre", typeof( int ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "Clase", typeof( String ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "TramiteDescrip", typeof( String ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "SituacionDecrip", typeof( String ) );  
			_dt.Columns.Add( "EnTramite", typeof( Boolean ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "OrdenTrabajoID", typeof( int ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "AltaFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "PropietarioID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "OtNro", typeof( int ) );  
			_dt.Columns.Add( "OtAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Label", typeof( String ) );  
			_dt.Columns.Add( "ExpeNuestro", typeof( Boolean ) );  
			_dt.Columns.Add( "PublicPag", typeof( int ) );  
			_dt.Columns.Add( "PublicAnio", typeof( int ) );  
			_dt.Columns.Add( "MarcaNuestra", typeof( Boolean ) );  
			_dt.Columns.Add( "MarcaActiva", typeof( Boolean ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Sustituida", typeof( Boolean ) );  
			_dt.Columns.Add( "StandBy", typeof( Boolean ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteVencim", typeof( DateTime ) );  
			_dt.Columns.Add( "RegVigenteNro", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteAnio", typeof( int ) );  
			_dt.Columns.Add( "RegVigenteConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Vigente", typeof( Boolean ) );  
			_dt.Columns.Add( "RegistroVigente", typeof( Boolean ) );  
			_dt.Columns.Add( "ActaPadre", typeof( String ) );  
			_dt.Columns.Add( "DenominacionClave", typeof( String ) );  
			_dt.Columns.Add( "MarcaTipo", typeof( String ) );  
			_dt.Columns.Add( "ClaseDescripEsp", typeof( String ) );  
			_dt.Columns.Add( "Limitada", typeof( Boolean ) );  
			_dt.Columns.Add( "LogotipoID", typeof( int ) );  
			_dt.Columns.Add( "NombreCliente", typeof( String ) );  
			_dt.Columns.Add( "TipoAtencionxMarca", typeof( int ) );  
			_dt.Columns.Add( "IDTipoAtencionxMarca", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vExpeMarcaRow( _dst, false );
			Old = new vExpeMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vExpeMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vExpeMarca

#region vAtencionArea
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAtencionAreaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public String_Field Nombre;	
			public String_Field Obs;	
			public Int_Field ClienteID;	
			public Int_Field AreaID;	
			public String_Field Descrip;	
			public String_Field strVias;	
			public Int_Field TarjetaID;	

			public vAtencionAreaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 2, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				Descrip		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				strVias		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				TarjetaID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
			}
		} // end class vAtencionAreaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAtencionArea : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAtencionArea";
	
		
		public vAtencionAreaRow Dat;
		public vAtencionAreaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAtencionArea( DataTable tab ) : base() 
		{
			_dbTableName = "vAtencionArea";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionAreaRow( _dst, false );
			Old = new vAtencionAreaRow( _dst , true );
		}
		
		
		public vAtencionArea( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAtencionArea";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionAreaRow( _dst, false );
			Old = new vAtencionAreaRow( _dst , true );
		}
				
		public vAtencionArea( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAtencionArea() : base() 
		{
			Init();
		}
		
		public vAtencionArea( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAtencionArea";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "Descrip", typeof( String ) );  
			_dt.Columns.Add( "strVias", typeof( String ) );  
			_dt.Columns.Add( "TarjetaID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionAreaRow( _dst, false );
			Old = new vAtencionAreaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAtencionAreaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAtencionArea

#region vConsMarcaLitigios
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vConsMarcaLitigiosRow 
		{
			private  DSTab _dst;
			
			public Int_Field MarcaID;	
			public String_Field Denominacion;	
			public Int_Field ClaseID;	
			public String_Field PropietarioNombre;	
			public String_Field PropietarioPais;	
			public Boolean_Field Vigilada;	
			public Boolean_Field Activa;	
			public Int_Field ExpedienteID;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Acta;	
			public Int_Field TramiteID;	
			public Int_Field AgenteLocalID;	
			public DateTime_Field PresentacionFecha;	
			public Int_Field ClaseNro;	
			public Int_Field RegistroNro;	
			public Int_Field RegistroAnio;	
			public DateTime_Field VencimientoFecha;	
			public String_Field Registro;	
			public DateTime_Field ConcesionFecha;	
			public String_Field TramiteAbrev;	
			public Int_Field ClienteID;	
			public String_Field ClienteNombre;	
			public Int_Field TramiteSitID;	
			public String_Field SituacionDescrip;	
			public String_Field marcatipo;	
			public String_Field str_public;	
			public String_Field bolinfo;	
			public String_Field OrdenTrabajo;	
			public String_Field Nombre;	
			public String_Field str_AgenteLocal;	
			public Int_Field TipoAtencionxMarca;	
			public Int_Field IDTipoAtencionxMarca;	

			public vConsMarcaLitigiosRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				MarcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				PropietarioNombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				PropietarioPais		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				Vigilada		= new Boolean_Field(	_dst, 5, IsOldDataVersion  );	
				Activa		= new Boolean_Field(	_dst, 6, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Acta		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				PresentacionFecha		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				ClaseNro		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				RegistroAnio		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				VencimientoFecha		= new DateTime_Field(	_dst, 17, IsOldDataVersion  );	
				Registro		= new String_Field(	_dst, 18, IsOldDataVersion  );	
				ConcesionFecha		= new DateTime_Field(	_dst, 19, IsOldDataVersion  );	
				TramiteAbrev		= new String_Field(	_dst, 20, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				ClienteNombre		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				TramiteSitID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				SituacionDescrip		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				marcatipo		= new String_Field(	_dst, 25, IsOldDataVersion  );	
				str_public		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				bolinfo		= new String_Field(	_dst, 27, IsOldDataVersion  );	
				OrdenTrabajo		= new String_Field(	_dst, 28, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 29, IsOldDataVersion  );	
				str_AgenteLocal		= new String_Field(	_dst, 30, IsOldDataVersion  );	
				TipoAtencionxMarca		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
				IDTipoAtencionxMarca		= new Int_Field(	_dst, 32, IsOldDataVersion  );	
			}
		} // end class vConsMarcaLitigiosRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vConsMarcaLitigios : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vConsMarcaLitigios";
	
		
		public vConsMarcaLitigiosRow Dat;
		public vConsMarcaLitigiosRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vConsMarcaLitigios( DataTable tab ) : base() 
		{
			_dbTableName = "vConsMarcaLitigios";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsMarcaLitigiosRow( _dst, false );
			Old = new vConsMarcaLitigiosRow( _dst , true );
		}
		
		
		public vConsMarcaLitigios( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vConsMarcaLitigios";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsMarcaLitigiosRow( _dst, false );
			Old = new vConsMarcaLitigiosRow( _dst , true );
		}
				
		public vConsMarcaLitigios( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vConsMarcaLitigios() : base() 
		{
			Init();
		}
		
		public vConsMarcaLitigios( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vConsMarcaLitigios";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "PropietarioNombre", typeof( String ) );  
			_dt.Columns.Add( "PropietarioPais", typeof( String ) );  
			_dt.Columns.Add( "Vigilada", typeof( Boolean ) );  
			_dt.Columns.Add( "Activa", typeof( Boolean ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Acta", typeof( String ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "PresentacionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "ClaseNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "RegistroAnio", typeof( int ) );  
			_dt.Columns.Add( "VencimientoFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "Registro", typeof( String ) );  
			_dt.Columns.Add( "ConcesionFecha", typeof( DateTime ) );  
			_dt.Columns.Add( "TramiteAbrev", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "ClienteNombre", typeof( String ) );  
			_dt.Columns.Add( "TramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "SituacionDescrip", typeof( String ) );  
			_dt.Columns.Add( "marcatipo", typeof( String ) );  
			_dt.Columns.Add( "str_public", typeof( String ) );  
			_dt.Columns.Add( "bolinfo", typeof( String ) );  
			_dt.Columns.Add( "OrdenTrabajo", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "str_AgenteLocal", typeof( String ) );  
			_dt.Columns.Add( "TipoAtencionxMarca", typeof( int ) );  
			_dt.Columns.Add( "IDTipoAtencionxMarca", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vConsMarcaLitigiosRow( _dst, false );
			Old = new vConsMarcaLitigiosRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vConsMarcaLitigiosAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vConsMarcaLitigios

#region vAtencionesxMarca
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vAtencionesxMarcaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Int_Field MarcaID;	
			public Int_Field AtencionID;	
			public String_Field Nombre;	
			public Int_Field AreaID;	
			public String_Field DescripArea;	

			public vAtencionesxMarcaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				MarcaID		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				AtencionID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 3, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				DescripArea		= new String_Field(	_dst, 5, IsOldDataVersion  );	
			}
		} // end class vAtencionesxMarcaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vAtencionesxMarca : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vAtencionesxMarca";
	
		
		public vAtencionesxMarcaRow Dat;
		public vAtencionesxMarcaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vAtencionesxMarca( DataTable tab ) : base() 
		{
			_dbTableName = "vAtencionesxMarca";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionesxMarcaRow( _dst, false );
			Old = new vAtencionesxMarcaRow( _dst , true );
		}
		
		
		public vAtencionesxMarca( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vAtencionesxMarca";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionesxMarcaRow( _dst, false );
			Old = new vAtencionesxMarcaRow( _dst , true );
		}
				
		public vAtencionesxMarca( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vAtencionesxMarca() : base() 
		{
			Init();
		}
		
		public vAtencionesxMarca( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vAtencionesxMarca";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "MarcaID", typeof( int ) );  
			_dt.Columns.Add( "AtencionID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "DescripArea", typeof( String ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vAtencionesxMarcaRow( _dst, false );
			Old = new vAtencionesxMarcaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vAtencionesxMarcaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vAtencionesxMarca

#region vOrdenPublicacionLic
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOrdenPublicacionLicRow 
		{
			private  DSTab _dst;
			
			public Int_Field marcaID;	
			public String_Field denominacion;	
			public Int_Field expedienteID;	
			public DateTime_Field presentacionfecha;	
			public Int_Field actanro;	
			public Int_Field actaanio;	
			public Int_Field ClaseID;	
			public Int_Field claseNro;	
			public String_Field propietario;	
			public String_Field prodir;	
			public Int_Field tramiteID;	
			public String_Field trDescrip;	
			public String_Field trAbrev;	
			public DateTime_Field situacionfecha;	
			public Int_Field tramiteSitID;	
			public String_Field sitAbrev;	
			public String_Field licenciatario;	
			public String_Field licDomicilio;	
			public Int_Field expePadreID;	
			public Int_Field registroPadre;	
			public DateTime_Field concesionFechaPadre;	
			public Int_Field ExpedienteSitID;	

			public vOrdenPublicacionLicRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				marcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				expedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				presentacionfecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				actanro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				actaanio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				claseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				propietario		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				prodir		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				tramiteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				trDescrip		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				trAbrev		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				situacionfecha		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				tramiteSitID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				sitAbrev		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				licenciatario		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				licDomicilio		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				expePadreID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				registroPadre		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				concesionFechaPadre		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				ExpedienteSitID		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
			}
		} // end class vOrdenPublicacionLicRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOrdenPublicacionLic : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOrdenPublicacionLic";
	
		
		public vOrdenPublicacionLicRow Dat;
		public vOrdenPublicacionLicRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOrdenPublicacionLic( DataTable tab ) : base() 
		{
			_dbTableName = "vOrdenPublicacionLic";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenPublicacionLicRow( _dst, false );
			Old = new vOrdenPublicacionLicRow( _dst , true );
		}
		
		
		public vOrdenPublicacionLic( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOrdenPublicacionLic";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenPublicacionLicRow( _dst, false );
			Old = new vOrdenPublicacionLicRow( _dst , true );
		}
				
		public vOrdenPublicacionLic( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOrdenPublicacionLic() : base() 
		{
			Init();
		}
		
		public vOrdenPublicacionLic( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOrdenPublicacionLic";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "marcaID", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "expedienteID", typeof( int ) );  
			_dt.Columns.Add( "presentacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "actanro", typeof( int ) );  
			_dt.Columns.Add( "actaanio", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "claseNro", typeof( int ) );  
			_dt.Columns.Add( "propietario", typeof( String ) );  
			_dt.Columns.Add( "prodir", typeof( String ) );  
			_dt.Columns.Add( "tramiteID", typeof( int ) );  
			_dt.Columns.Add( "trDescrip", typeof( String ) );  
			_dt.Columns.Add( "trAbrev", typeof( String ) );  
			_dt.Columns.Add( "situacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "tramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "sitAbrev", typeof( String ) );  
			_dt.Columns.Add( "licenciatario", typeof( String ) );  
			_dt.Columns.Add( "licDomicilio", typeof( String ) );  
			_dt.Columns.Add( "expePadreID", typeof( int ) );  
			_dt.Columns.Add( "registroPadre", typeof( int ) );  
			_dt.Columns.Add( "concesionFechaPadre", typeof( DateTime ) );  
			_dt.Columns.Add( "ExpedienteSitID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenPublicacionLicRow( _dst, false );
			Old = new vOrdenPublicacionLicRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOrdenPublicacionLicAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOrdenPublicacionLic

#region vOrdenPublicacion
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vOrdenPublicacionRow 
		{
			private  DSTab _dst;
			
			public Int_Field marcaID;	
			public String_Field denominacion;	
			public Int_Field expedienteID;	
			public DateTime_Field presentacionfecha;	
			public Int_Field actanro;	
			public Int_Field actaanio;	
			public Int_Field ClaseID;	
			public Int_Field claseNro;	
			public String_Field propietario;	
			public String_Field prodir;	
			public Int_Field tramiteID;	
			public String_Field trDescrip;	
			public String_Field trAbrev;	
			public DateTime_Field situacionfecha;	
			public Int_Field tramiteSitID;	
			public String_Field sitAbrev;	
			public String_Field propietarioAnterior;	
			public String_Field propietarioActual;	
			public Int_Field expePadreID;	
			public Int_Field registroPadre;	
			public DateTime_Field concesionFechaPadre;	
			public Int_Field hinro;	
			public Int_Field hianio;	
			public Int_Field ExpedienteSitID;	

			public vOrdenPublicacionRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				marcaID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				expedienteID		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				presentacionfecha		= new DateTime_Field(	_dst, 3, IsOldDataVersion  );	
				actanro		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				actaanio		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				ClaseID		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				claseNro		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				propietario		= new String_Field(	_dst, 8, IsOldDataVersion  );	
				prodir		= new String_Field(	_dst, 9, IsOldDataVersion  );	
				tramiteID		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				trDescrip		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				trAbrev		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				situacionfecha		= new DateTime_Field(	_dst, 13, IsOldDataVersion  );	
				tramiteSitID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				sitAbrev		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				propietarioAnterior		= new String_Field(	_dst, 16, IsOldDataVersion  );	
				propietarioActual		= new String_Field(	_dst, 17, IsOldDataVersion  );	
				expePadreID		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				registroPadre		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				concesionFechaPadre		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				hinro		= new Int_Field(	_dst, 21, IsOldDataVersion  );	
				hianio		= new Int_Field(	_dst, 22, IsOldDataVersion  );	
				ExpedienteSitID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
			}
		} // end class vOrdenPublicacionRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vOrdenPublicacion : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vOrdenPublicacion";
	
		
		public vOrdenPublicacionRow Dat;
		public vOrdenPublicacionRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vOrdenPublicacion( DataTable tab ) : base() 
		{
			_dbTableName = "vOrdenPublicacion";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenPublicacionRow( _dst, false );
			Old = new vOrdenPublicacionRow( _dst , true );
		}
		
		
		public vOrdenPublicacion( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vOrdenPublicacion";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenPublicacionRow( _dst, false );
			Old = new vOrdenPublicacionRow( _dst , true );
		}
				
		public vOrdenPublicacion( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vOrdenPublicacion() : base() 
		{
			Init();
		}
		
		public vOrdenPublicacion( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vOrdenPublicacion";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "marcaID", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "expedienteID", typeof( int ) );  
			_dt.Columns.Add( "presentacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "actanro", typeof( int ) );  
			_dt.Columns.Add( "actaanio", typeof( int ) );  
			_dt.Columns.Add( "ClaseID", typeof( int ) );  
			_dt.Columns.Add( "claseNro", typeof( int ) );  
			_dt.Columns.Add( "propietario", typeof( String ) );  
			_dt.Columns.Add( "prodir", typeof( String ) );  
			_dt.Columns.Add( "tramiteID", typeof( int ) );  
			_dt.Columns.Add( "trDescrip", typeof( String ) );  
			_dt.Columns.Add( "trAbrev", typeof( String ) );  
			_dt.Columns.Add( "situacionfecha", typeof( DateTime ) );  
			_dt.Columns.Add( "tramiteSitID", typeof( int ) );  
			_dt.Columns.Add( "sitAbrev", typeof( String ) );  
			_dt.Columns.Add( "propietarioAnterior", typeof( String ) );  
			_dt.Columns.Add( "propietarioActual", typeof( String ) );  
			_dt.Columns.Add( "expePadreID", typeof( int ) );  
			_dt.Columns.Add( "registroPadre", typeof( int ) );  
			_dt.Columns.Add( "concesionFechaPadre", typeof( DateTime ) );  
			_dt.Columns.Add( "hinro", typeof( int ) );  
			_dt.Columns.Add( "hianio", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteSitID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vOrdenPublicacionRow( _dst, false );
			Old = new vOrdenPublicacionRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vOrdenPublicacionAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vOrdenPublicacion

#region vCorrespondencia
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vCorrespondenciaRow 
		{
			private  DSTab _dst;
			
			public Int_Field ID;	
			public Boolean_Field Entrante;	
			public Int_Field Nro;	
			public Int_Field Anio;	
			public DateTime_Field FechaAlta;	
			public DateTime_Field FechaCorresp;	
			public String_Field RefCorresp;	
			public Int_Field EntidadID;	
			public Int_Field IdiniRecep;	
			public Int_Field Idvia;	
			public String_Field RefCliente;	
			public Int_Field PrioridadID;	
			public String_Field Obs;	
			public Int_Field movID;	
			public Int_Field TrabajoTipoID;	
			public String_Field TrabajoTipo;	
			public Int_Field AreaID;	
			public Int_Field IdiniDistrib;	
			public Int_Field IdiniRespons;	
			public Int_Field IdiniProceso;	
			public DateTime_Field FechaAcuse;	
			public DateTime_Field FechaProceso;	
			public String_Field movObs;	
			public Int_Field ClienteID;	
			public String_Field Nombre;	
			public Int_Field FuncionarioID;	
			public String_Field Asignado;	
			public Boolean_Field Estado;	
			public Int_Field FuncAreaID;	
			public Boolean_Field Facturable;	
			public Boolean_Field Acusado;	
			public Int_Field CorAreaID;	

			public vCorrespondenciaRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				ID		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				Entrante		= new Boolean_Field(	_dst, 1, IsOldDataVersion  );	
				Nro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				Anio		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				FechaAlta		= new DateTime_Field(	_dst, 4, IsOldDataVersion  );	
				FechaCorresp		= new DateTime_Field(	_dst, 5, IsOldDataVersion  );	
				RefCorresp		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				EntidadID		= new Int_Field(	_dst, 7, IsOldDataVersion  );	
				IdiniRecep		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				Idvia		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				RefCliente		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				PrioridadID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				Obs		= new String_Field(	_dst, 12, IsOldDataVersion  );	
				movID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
				TrabajoTipoID		= new Int_Field(	_dst, 14, IsOldDataVersion  );	
				TrabajoTipo		= new String_Field(	_dst, 15, IsOldDataVersion  );	
				AreaID		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				IdiniDistrib		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				IdiniRespons		= new Int_Field(	_dst, 18, IsOldDataVersion  );	
				IdiniProceso		= new Int_Field(	_dst, 19, IsOldDataVersion  );	
				FechaAcuse		= new DateTime_Field(	_dst, 20, IsOldDataVersion  );	
				FechaProceso		= new DateTime_Field(	_dst, 21, IsOldDataVersion  );	
				movObs		= new String_Field(	_dst, 22, IsOldDataVersion  );	
				ClienteID		= new Int_Field(	_dst, 23, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 24, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 25, IsOldDataVersion  );	
				Asignado		= new String_Field(	_dst, 26, IsOldDataVersion  );	
				Estado		= new Boolean_Field(	_dst, 27, IsOldDataVersion  );	
				FuncAreaID		= new Int_Field(	_dst, 28, IsOldDataVersion  );	
				Facturable		= new Boolean_Field(	_dst, 29, IsOldDataVersion  );	
				Acusado		= new Boolean_Field(	_dst, 30, IsOldDataVersion  );	
				CorAreaID		= new Int_Field(	_dst, 31, IsOldDataVersion  );	
			}
		} // end class vCorrespondenciaRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCorrespondencia : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCorrespondencia";
	
		
		public vCorrespondenciaRow Dat;
		public vCorrespondenciaRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCorrespondencia( DataTable tab ) : base() 
		{
			_dbTableName = "vCorrespondencia";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespondenciaRow( _dst, false );
			Old = new vCorrespondenciaRow( _dst , true );
		}
		
		
		public vCorrespondencia( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCorrespondencia";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespondenciaRow( _dst, false );
			Old = new vCorrespondenciaRow( _dst , true );
		}
				
		public vCorrespondencia( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCorrespondencia() : base() 
		{
			Init();
		}
		
		public vCorrespondencia( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCorrespondencia";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "ID", typeof( int ) );  
			_dt.Columns.Add( "Entrante", typeof( Boolean ) );  
			_dt.Columns.Add( "Nro", typeof( int ) );  
			_dt.Columns.Add( "Anio", typeof( int ) );  
			_dt.Columns.Add( "FechaAlta", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaCorresp", typeof( DateTime ) );  
			_dt.Columns.Add( "RefCorresp", typeof( String ) );  
			_dt.Columns.Add( "EntidadID", typeof( int ) );  
			_dt.Columns.Add( "IdiniRecep", typeof( int ) );  
			_dt.Columns.Add( "Idvia", typeof( int ) );  
			_dt.Columns.Add( "RefCliente", typeof( String ) );  
			_dt.Columns.Add( "PrioridadID", typeof( int ) );  
			_dt.Columns.Add( "Obs", typeof( String ) );  
			_dt.Columns.Add( "movID", typeof( int ) );  
			_dt.Columns.Add( "TrabajoTipoID", typeof( int ) );  
			_dt.Columns.Add( "TrabajoTipo", typeof( String ) );  
			_dt.Columns.Add( "AreaID", typeof( int ) );  
			_dt.Columns.Add( "IdiniDistrib", typeof( int ) );  
			_dt.Columns.Add( "IdiniRespons", typeof( int ) );  
			_dt.Columns.Add( "IdiniProceso", typeof( int ) );  
			_dt.Columns.Add( "FechaAcuse", typeof( DateTime ) );  
			_dt.Columns.Add( "FechaProceso", typeof( DateTime ) );  
			_dt.Columns.Add( "movObs", typeof( String ) );  
			_dt.Columns.Add( "ClienteID", typeof( int ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "Asignado", typeof( String ) );  
			_dt.Columns.Add( "Estado", typeof( Boolean ) );  
			_dt.Columns.Add( "FuncAreaID", typeof( int ) );  
			_dt.Columns.Add( "Facturable", typeof( Boolean ) );  
			_dt.Columns.Add( "Acusado", typeof( Boolean ) );  
			_dt.Columns.Add( "CorAreaID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCorrespondenciaRow( _dst, false );
			Old = new vCorrespondenciaRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vCorrespondenciaAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCorrespondencia

#region vMergeAvisosDet
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vMergeAvisosDetRow 
		{
			private  DSTab _dst;
			
			public Int_Field id;	
			public String_Field denominacion;	
			public Int_Field marcatipoid;	
			public Int_Field claseid;	
			public Int_Field expedienteid;	
			public Int_Field registronro;	
			public Int_Field registroanio;	
			public DateTime_Field vencimientofecha;	
			public Int_Field clienteid;	
			public Int_Field marca_clienteid;	
			public Int_Field expe_clienteid;	
			public String_Field cnombre;	
			public Int_Field propietarioid;	
			public String_Field pnombre;	
			public String_Field pdireccion;	
			public Int_Field marcaid;	
			public Int_Field TipoAtencionxMarca;	
			public Int_Field IDTipoAtencionxMarca;	
			public Boolean_Field multiple;	

			public vMergeAvisosDetRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				id		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				denominacion		= new String_Field(	_dst, 1, IsOldDataVersion  );	
				marcatipoid		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				claseid		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				expedienteid		= new Int_Field(	_dst, 4, IsOldDataVersion  );	
				registronro		= new Int_Field(	_dst, 5, IsOldDataVersion  );	
				registroanio		= new Int_Field(	_dst, 6, IsOldDataVersion  );	
				vencimientofecha		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				clienteid		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				marca_clienteid		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				expe_clienteid		= new Int_Field(	_dst, 10, IsOldDataVersion  );	
				cnombre		= new String_Field(	_dst, 11, IsOldDataVersion  );	
				propietarioid		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				pnombre		= new String_Field(	_dst, 13, IsOldDataVersion  );	
				pdireccion		= new String_Field(	_dst, 14, IsOldDataVersion  );	
				marcaid		= new Int_Field(	_dst, 15, IsOldDataVersion  );	
				TipoAtencionxMarca		= new Int_Field(	_dst, 16, IsOldDataVersion  );	
				IDTipoAtencionxMarca		= new Int_Field(	_dst, 17, IsOldDataVersion  );	
				multiple		= new Boolean_Field(	_dst, 18, IsOldDataVersion  );	
			}
		} // end class vMergeAvisosDetRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vMergeAvisosDet : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vMergeAvisosDet";
	
		
		public vMergeAvisosDetRow Dat;
		public vMergeAvisosDetRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vMergeAvisosDet( DataTable tab ) : base() 
		{
			_dbTableName = "vMergeAvisosDet";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosDetRow( _dst, false );
			Old = new vMergeAvisosDetRow( _dst , true );
		}
		
		
		public vMergeAvisosDet( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vMergeAvisosDet";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosDetRow( _dst, false );
			Old = new vMergeAvisosDetRow( _dst , true );
		}
				
		public vMergeAvisosDet( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vMergeAvisosDet() : base() 
		{
			Init();
		}
		
		public vMergeAvisosDet( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vMergeAvisosDet";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "id", typeof( int ) );  
			_dt.Columns.Add( "denominacion", typeof( String ) );  
			_dt.Columns.Add( "marcatipoid", typeof( int ) );  
			_dt.Columns.Add( "claseid", typeof( int ) );  
			_dt.Columns.Add( "expedienteid", typeof( int ) );  
			_dt.Columns.Add( "registronro", typeof( int ) );  
			_dt.Columns.Add( "registroanio", typeof( int ) );  
			_dt.Columns.Add( "vencimientofecha", typeof( DateTime ) );  
			_dt.Columns.Add( "clienteid", typeof( int ) );  
			_dt.Columns.Add( "marca_clienteid", typeof( int ) );  
			_dt.Columns.Add( "expe_clienteid", typeof( int ) );  
			_dt.Columns.Add( "cnombre", typeof( String ) );  
			_dt.Columns.Add( "propietarioid", typeof( int ) );  
			_dt.Columns.Add( "pnombre", typeof( String ) );  
			_dt.Columns.Add( "pdireccion", typeof( String ) );  
			_dt.Columns.Add( "marcaid", typeof( int ) );  
			_dt.Columns.Add( "TipoAtencionxMarca", typeof( int ) );  
			_dt.Columns.Add( "IDTipoAtencionxMarca", typeof( int ) );  
			_dt.Columns.Add( "multiple", typeof( Boolean ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vMergeAvisosDetRow( _dst, false );
			Old = new vMergeAvisosDetRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vMergeAvisosDetAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vMergeAvisosDet

#region vCtrlGenHDesc
namespace Berke.DG.ViewTab
{
	using Berke.DG.Base;
	using Berke.DG.ViewTab.Row;
	
	#region Row
   	namespace Row{
		public class vCtrlGenHDescRow 
		{
			private  DSTab _dst;
			
			public Int_Field HINro;	
			public Int_Field HIAnio;	
			public Int_Field RegistroNro;	
			public Int_Field ExpedienteID;	
			public String_Field Tramite;	
			public String_Field NombrePila;	
			public String_Field Nombre;	
			public DateTime_Field FechaHoraGeneracion;	
			public Int_Field ActaNro;	
			public Int_Field ActaAnio;	
			public String_Field Denominacion;	
			public Int_Field AgenteLocalID;	
			public Int_Field FuncionarioID;	
			public Int_Field TramiteID;	

			public vCtrlGenHDescRow( DSTab dst, bool IsOldDataVersion  )
			{
				_dst = dst;
				
				HINro		= new Int_Field(	_dst, 0, IsOldDataVersion  );	
				HIAnio		= new Int_Field(	_dst, 1, IsOldDataVersion  );	
				RegistroNro		= new Int_Field(	_dst, 2, IsOldDataVersion  );	
				ExpedienteID		= new Int_Field(	_dst, 3, IsOldDataVersion  );	
				Tramite		= new String_Field(	_dst, 4, IsOldDataVersion  );	
				NombrePila		= new String_Field(	_dst, 5, IsOldDataVersion  );	
				Nombre		= new String_Field(	_dst, 6, IsOldDataVersion  );	
				FechaHoraGeneracion		= new DateTime_Field(	_dst, 7, IsOldDataVersion  );	
				ActaNro		= new Int_Field(	_dst, 8, IsOldDataVersion  );	
				ActaAnio		= new Int_Field(	_dst, 9, IsOldDataVersion  );	
				Denominacion		= new String_Field(	_dst, 10, IsOldDataVersion  );	
				AgenteLocalID		= new Int_Field(	_dst, 11, IsOldDataVersion  );	
				FuncionarioID		= new Int_Field(	_dst, 12, IsOldDataVersion  );	
				TramiteID		= new Int_Field(	_dst, 13, IsOldDataVersion  );	
			}
		} // end class vCtrlGenHDescRow 
	} // end namespace Rows
	#endregion Row
	

	
	#region Table
	public class vCtrlGenHDesc : ViewBase 
	{
		#region Datos Miembro
		
		private string _tableName = "vCtrlGenHDesc";
	
		
		public vCtrlGenHDescRow Dat;
		public vCtrlGenHDescRow Old;

		#endregion Datos Miembro
	
		#region Constructor 

		public vCtrlGenHDesc( DataTable tab ) : base() 
		{
			_dbTableName = "vCtrlGenHDesc";
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCtrlGenHDescRow( _dst, false );
			Old = new vCtrlGenHDescRow( _dst , true );
		}
		
		
		public vCtrlGenHDesc( DataTable tab, string tableName ) : base() 
		{
			_dbTableName = "vCtrlGenHDesc";
			_tableName = tableName;
			if( tab.TableName != _tableName ) throw new Exception( this.GetType().Name + " :DataTable incompatible con " +_tableName );

			DataTable _dt = tab ;	
		
			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCtrlGenHDescRow( _dst, false );
			Old = new vCtrlGenHDescRow( _dst , true );
		}
				
		public vCtrlGenHDesc( AccesoDB db ) : base() 
		{
			Init();
			InitAdapter( db );
		}
		
		public vCtrlGenHDesc() : base() 
		{
			Init();
		}
		
		public vCtrlGenHDesc( string tableName) : base() 
		{
			_tableName = tableName;
			Init();
		}
		
		private void Init(){
			_dbTableName = "vCtrlGenHDesc";
			DataTable _dt = new DataTable(_tableName);

			// Crear Data Tabble
			
			_dt.Columns.Add( "HINro", typeof( int ) );  
			_dt.Columns.Add( "HIAnio", typeof( int ) );  
			_dt.Columns.Add( "RegistroNro", typeof( int ) );  
			_dt.Columns.Add( "ExpedienteID", typeof( int ) );  
			_dt.Columns.Add( "Tramite", typeof( String ) );  
			_dt.Columns.Add( "NombrePila", typeof( String ) );  
			_dt.Columns.Add( "Nombre", typeof( String ) );  
			_dt.Columns.Add( "FechaHoraGeneracion", typeof( DateTime ) );  
			_dt.Columns.Add( "ActaNro", typeof( int ) );  
			_dt.Columns.Add( "ActaAnio", typeof( int ) );  
			_dt.Columns.Add( "Denominacion", typeof( String ) );  
			_dt.Columns.Add( "AgenteLocalID", typeof( int ) );  
			_dt.Columns.Add( "FuncionarioID", typeof( int ) );  
			_dt.Columns.Add( "TramiteID", typeof( int ) );  
			
			

			

			// Enlazar con DSTab
			_dst = new DSTab( _dt );

			// Asociar objetos con Datos
			Dat = new vCtrlGenHDescRow( _dst, false );
			Old = new vCtrlGenHDescRow( _dst , true );
		
		}
		#endregion Constructor 

		
		public override void InitAdapter( AccesoDB db )
		{
			_adapter = new Berke.DG.Adapters.vCtrlGenHDescAdapter( this, db );
		}


	}
	#endregion Table
	

} // namespace  Berke.DG.ViewTab
#endregion vCtrlGenHDesc

#endregion Vistas

#region Adapters

#region vClase_Distinct
namespace Berke.DG.Adapters
{
	public class vClase_DistinctAdapter : ViewAdapter{
	
		public vClase_DistinctAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Clase cl" );
			
   			_fMap[0].SqlColName = "Nro";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClase_DistinctAdapter 


} // namespace Berke.DG.Adapters
#endregion vClase_Distinct

#region vClase
namespace Berke.DG.Adapters
{
	public class vClaseAdapter : ViewAdapter{
	
		public vClaseAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Clase cl,
  NizaEdicion nz" );
			
   			_fMap[0].SqlColName = "cl.ID";
   			_fMap[1].SqlColName = " cl.nro";
   			_fMap[2].SqlColName = " cl.Descrip";
   			_fMap[3].SqlColName = " cl.NizaEdicionID";
   			_fMap[4].SqlColName = " nz.Abrev";

			this.SetDefaultWhere(@"cl.NizaEdicionID = nz.ID" );
		}

	} // end class vClaseAdapter 


} // namespace Berke.DG.Adapters
#endregion vClase

#region vOrdenTrabajoList
namespace Berke.DG.Adapters
{
	public class vOrdenTrabajoListAdapter : ViewAdapter{
	
		public vOrdenTrabajoListAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"OrdenTrabajo ot INNER JOIN
                      Expediente ON ot.ID = Expediente.OrdenTrabajoID INNER JOIN
                      Marca ON Expediente.MarcaID = Marca.ID INNER JOIN
                      Clase ON Marca.ClaseID = Clase.ID INNER JOIN
                      TrabajoTipo ON ot.TrabajoTipoID = TrabajoTipo.ID INNER JOIN
                      Tramite ON TrabajoTipo.ID = Tramite.TrabajoTipoID INNER JOIN
                      NizaEdicion ON Clase.NizaEdicionID = NizaEdicion.ID" );
			
   			_fMap[0].SqlColName = "ot.ID";
   			_fMap[1].SqlColName = " ot.OrdenTrabajo";
   			_fMap[2].SqlColName = " ot.Nro";
   			_fMap[3].SqlColName = " ot.Anio";
   			_fMap[4].SqlColName = " Tramite.ID";
   			_fMap[5].SqlColName = " Tramite.Abrev";
   			_fMap[6].SqlColName = " ot.FuncionarioID";
   			_fMap[7].SqlColName = " Marca.Denominacion";
   			_fMap[8].SqlColName = " Clase.Nro";
   			_fMap[9].SqlColName = " NizaEdicion.Abrev";
   			_fMap[10].SqlColName = " Expediente.Sustituida";
   			_fMap[11].SqlColName = " Expediente.AgenteLocalID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vOrdenTrabajoListAdapter 


} // namespace Berke.DG.Adapters
#endregion vOrdenTrabajoList

#region vTramiteSit
namespace Berke.DG.Adapters
{
	public class vTramiteSitAdapter : ViewAdapter{
	
		public vTramiteSitAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Tramite_Sit INNER JOIN
                      Situacion ON Tramite_Sit.SituacionID = Situacion.ID" );
			
   			_fMap[0].SqlColName = "Tramite_Sit.ID";
   			_fMap[1].SqlColName = " Tramite_Sit.TramiteID";
   			_fMap[2].SqlColName = " Tramite_Sit.SituacionID";
   			_fMap[3].SqlColName = " Situacion.Descrip";
   			_fMap[4].SqlColName = " Tramite_Sit.Vigente";
   			_fMap[5].SqlColName = " Tramite_Sit.Automatico";

			this.SetDefaultWhere(@"" );
		}

	} // end class vTramiteSitAdapter 


} // namespace Berke.DG.Adapters
#endregion vTramiteSit

#region vOrdenTrabajoNroAnio
namespace Berke.DG.Adapters
{
	public class vOrdenTrabajoNroAnioAdapter : ViewAdapter{
	
		public vOrdenTrabajoNroAnioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"OrdenTrabajo INNER JOIN
                      TrabajoTipo ON OrdenTrabajo.TrabajoTipoID = TrabajoTipo.ID INNER JOIN
                      Tramite ON TrabajoTipo.ID = Tramite.TrabajoTipoID" );
			
   			_fMap[0].SqlColName = "Tramite.ID";
   			_fMap[1].SqlColName = " OrdenTrabajo.Nro";
   			_fMap[2].SqlColName = " OrdenTrabajo.Anio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vOrdenTrabajoNroAnioAdapter 


} // namespace Berke.DG.Adapters
#endregion vOrdenTrabajoNroAnio

#region vOrdenTrabajo_Propietarios
namespace Berke.DG.Adapters
{
	public class vOrdenTrabajo_PropietariosAdapter : ViewAdapter{
	
		public vOrdenTrabajo_PropietariosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"OrdenTrabajo INNER JOIN
                      Expediente ON OrdenTrabajo.ID = Expediente.OrdenTrabajoID INNER JOIN
                      Expediente_Poderdante ON Expediente.ID = Expediente_Poderdante.ExpedienteID INNER JOIN
                      Poderdante ON Expediente_Poderdante.PoderdanteID = Poderdante.ID INNER JOIN
                      Poder ON Poderdante.PoderID = Poder.ID LEFT OUTER JOIN
                      PoderInsc ON Poder.PoderInscID = PoderInsc.ID LEFT OUTER JOIN
                      Expediente Expediente1 ON PoderInsc.ExpedienteID = Expediente1.ID LEFT OUTER JOIN
                      PoderDomicilio ON Expediente_Poderdante.PoderDomicilioID = PoderDomicilio.ID LEFT OUTER JOIN
                      CCiudad ON PoderDomicilio.CiudadID = CCiudad.idciudad" );
			
   			_fMap[0].SqlColName = " OrdenTrabajo.ID";
   			_fMap[1].SqlColName = " Poderdante.PropietarioID";
   			_fMap[2].SqlColName = " Expediente_Poderdante.PoderdanteID";
   			_fMap[3].SqlColName = " Poderdante.Denominacion";
   			_fMap[4].SqlColName = " Expediente_Poderdante.PoderDomicilioID";
   			_fMap[5].SqlColName = " PoderDomicilio.Domicilio";
   			_fMap[6].SqlColName = " CCiudad.nombreve";
   			_fMap[7].SqlColName = " PoderInsc.Inscripcion";
   			_fMap[8].SqlColName = " Expediente1.Acta";
   			_fMap[9].SqlColName = " Expediente_Poderdante.Origen";

			this.SetDefaultWhere(@"" );
		}

	} // end class vOrdenTrabajo_PropietariosAdapter 


} // namespace Berke.DG.Adapters
#endregion vOrdenTrabajo_Propietarios

#region vOrdenTrabajo_Documento
namespace Berke.DG.Adapters
{
	public class vOrdenTrabajo_DocumentoAdapter : ViewAdapter{
	
		public vOrdenTrabajo_DocumentoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"OrdenTrabajo INNER JOIN
                      Expediente ON OrdenTrabajo.ID = Expediente.OrdenTrabajoID INNER JOIN
                      Expediente_Documento ON Expediente.ID = Expediente_Documento.ExpedienteID INNER JOIN
                      Documento ON Expediente_Documento.DocumentoID = Documento.ID" );
			
   			_fMap[0].SqlColName = " OrdenTrabajo.ID";
   			_fMap[1].SqlColName = " Documento.ID";
   			_fMap[2].SqlColName = " Documento.DocumentoTipoID";
   			_fMap[3].SqlColName = " Documento.IdentificadorNro";
   			_fMap[4].SqlColName = " Documento.IdentificadorAnio";
   			_fMap[5].SqlColName = " Documento.ReferenciaExterna";
   			_fMap[6].SqlColName = " Documento.Path";

			this.SetDefaultWhere(@"" );
		}

	} // end class vOrdenTrabajo_DocumentoAdapter 


} // namespace Berke.DG.Adapters
#endregion vOrdenTrabajo_Documento

#region vExpedienteSitList
namespace Berke.DG.Adapters
{
	public class vExpedienteSitListAdapter : ViewAdapter{
	
		public vExpedienteSitListAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Marca m INNER JOIN
                   Expediente e ON m.ID = e.MarcaID LEFT OUTER JOIN
                   MarcaRegRen mrr ON e.ID = mrr.ExpedienteID LEFT OUTER JOIN
                   OrdenTrabajo o ON e.OrdenTrabajoID = o.ID" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.Denominacion";
   			_fMap[2].SqlColName = " m.ClaseID";
   			_fMap[3].SqlColName = " m.Nuestra";
   			_fMap[4].SqlColName = " m.StandBy";
   			_fMap[5].SqlColName = " m.Vigente";
   			_fMap[6].SqlColName = " e.ID";
   			_fMap[7].SqlColName = " e.Publicacion";
   			_fMap[8].SqlColName = " e.TramiteID";
   			_fMap[9].SqlColName = " e.TramiteSitID";
   			_fMap[10].SqlColName = " e.ActaNro";
   			_fMap[11].SqlColName = " e.ActaAnio";
   			_fMap[12].SqlColName = " e.Acta";
   			_fMap[13].SqlColName = " e.OrdenTrabajoID";
   			_fMap[14].SqlColName = " e.AgenteLocalID";
   			_fMap[15].SqlColName = " e.DiarioID";
   			_fMap[16].SqlColName = " e.PublicPag";
   			_fMap[17].SqlColName = " e.PublicAnio";
   			_fMap[18].SqlColName = " e.Bib";
   			_fMap[19].SqlColName = " e.Exp";
   			_fMap[20].SqlColName = " e.Nuestra";
   			_fMap[21].SqlColName = " e.StandBy";
   			_fMap[22].SqlColName = " e.VencimientoFecha";
   			_fMap[23].SqlColName = " e.Concluido";
   			_fMap[24].SqlColName = " e.MarcaRegRenID";
   			_fMap[25].SqlColName = " e.ExpedienteID";
   			_fMap[26].SqlColName = " mrr.RegistroNro";
   			_fMap[27].SqlColName = " mrr.RegistroAnio";
   			_fMap[28].SqlColName = " mrr.Registro";
   			_fMap[29].SqlColName = " mrr.ConcesionFecha";
   			_fMap[30].SqlColName = " o.OrdenTrabajo";
   			_fMap[31].SqlColName = " o.Nro";
   			_fMap[32].SqlColName = " o.Anio";

			this.SetDefaultWhere(@"(m.Vigente =1 or (m.Vigente IS NULL)) AND e.TramiteSitID IN ( @LST  )" );
		}

	} // end class vExpedienteSitListAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpedienteSitList

#region vMarcaBusqFonResul
namespace Berke.DG.Adapters
{
	public class vMarcaBusqFonResulAdapter : ViewAdapter{
	
		public vMarcaBusqFonResulAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Marca m,
    BusqFonDet det,
    Clase cl,
    NizaEdicion ne" );
			
   			_fMap[0].SqlColName = "det.ID";
   			_fMap[1].SqlColName = " m.ID";
   			_fMap[2].SqlColName = " det.Patron";
   			_fMap[3].SqlColName = " Denominacion";
   			_fMap[4].SqlColName = " DenominacionClave";
   			_fMap[5].SqlColName = " m.ClaseID";
   			_fMap[6].SqlColName = " cl.Nro";
   			_fMap[7].SqlColName = " cl.NizaEdicionID";
   			_fMap[8].SqlColName = " cl.DescripBreve";
   			_fMap[9].SqlColName = " m.ClienteID";
   			_fMap[10].SqlColName = " ne.abrev";
   			_fMap[11].SqlColName = " m.Nuestra";
   			_fMap[12].SqlColName = " m.Vigilada";
   			_fMap[13].SqlColName = " m.Sustituida";
   			_fMap[14].SqlColName = " m.StandBy";
   			_fMap[15].SqlColName = " m.ExpedienteVigenteID";
   			_fMap[16].SqlColName = " m.MarcaTipoID";

			this.SetDefaultWhere(@"cl.ID = det.ClaseID and 
    ne.ID = cl.NizaEdicionID and 
    m.MarcaTipoID in ( 1,3) and 
    (
       m.ClaseID = det.ClaseID or 
       (
      det.Relac = 1 and
      m.ClaseID in (select ClaseRelacID from clase_clase cc where cc.ClaseID = det.ClaseID)
       )
    )" );
		}

	} // end class vMarcaBusqFonResulAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaBusqFonResul

#region vPoderSitList
namespace Berke.DG.Adapters
{
	public class vPoderSitListAdapter : ViewAdapter{
	
		public vPoderSitListAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Expediente INNER JOIN
                      PoderInsc ON Expediente.ID = PoderInsc.ExpedienteID INNER JOIN
                      Poder ON PoderInsc.ID = Poder.PoderInscID LEFT OUTER JOIN
                      OrdenTrabajo ON Expediente.OrdenTrabajoID = OrdenTrabajo.ID INNER JOIN
                      Poderdante ON Poder.ID = Poderdante.PoderID" );
			
   			_fMap[0].SqlColName = "Poder.ID";
   			_fMap[1].SqlColName = " Poder.Nuestra";
   			_fMap[2].SqlColName = " PoderInsc.ID";
   			_fMap[3].SqlColName = " PoderInsc.Inscripcion";
   			_fMap[4].SqlColName = " PoderInsc.InscripcionNro";
   			_fMap[5].SqlColName = " PoderInsc.InscripcionAnio";
   			_fMap[6].SqlColName = " Expediente.ID";
   			_fMap[7].SqlColName = " Expediente.Acta";
   			_fMap[8].SqlColName = " Expediente.ActaNro";
   			_fMap[9].SqlColName = " Expediente.ActaAnio";
   			_fMap[10].SqlColName = " Expediente.TramiteID";
   			_fMap[11].SqlColName = " Expediente.TramiteSitID";
   			_fMap[12].SqlColName = " Expediente.OrdenTrabajoID";
   			_fMap[13].SqlColName = " OrdenTrabajo.Nro";
   			_fMap[14].SqlColName = " OrdenTrabajo.Anio";
   			_fMap[15].SqlColName = " OrdenTrabajo.OrdenTrabajo";

			this.SetDefaultWhere(@"(Poderdante.PropietarioID = @P OR @P = -1) AND Expediente.TramiteSitID IN ( @LST  )" );
		}

	} // end class vPoderSitListAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderSitList

#region vExpedienteMensaje
namespace Berke.DG.Adapters
{
	public class vExpedienteMensajeAdapter : ViewAdapter{
	
		public vExpedienteMensajeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente expe LEFT OUTER JOIN    dbo.Expediente_Instruccion men ON expe.ID = men.ExpedienteID" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.TramiteID";
   			_fMap[2].SqlColName = " expe.TramiteSitID";
   			_fMap[3].SqlColName = " expe.Acta";
   			_fMap[4].SqlColName = " expe.VencimientoFecha";
   			_fMap[5].SqlColName = " men.ID";
   			_fMap[6].SqlColName = " men.InstruccionTipoID";
   			_fMap[7].SqlColName = " men.InstruccionTipoID";
   			_fMap[8].SqlColName = " men.MensajeTipoID";
   			_fMap[9].SqlColName = " men.Fecha";
   			_fMap[10].SqlColName = " men.ViaComID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpedienteMensajeAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpedienteMensaje

#region vPoderdante
namespace Berke.DG.Adapters
{
	public class vPoderdanteAdapter : ViewAdapter{
	
		public vPoderdanteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"PoderDomicilio pd RIGHT OUTER JOIN
                      Poderdante p ON pd.PoderID = p.PoderID RIGHT OUTER JOIN
                      Marca_Poderdante mp ON p.ID = mp.PoderdanteID" );
			
   			_fMap[0].SqlColName = "p.ID";
   			_fMap[1].SqlColName = " p.Denominacion";
   			_fMap[2].SqlColName = " mp.MarcaID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderdanteAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderdante

#region ParamTab
namespace Berke.DG.Adapters
{
	public class ParamTabAdapter : ViewAdapter{
	
		public ParamTabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"" );
			
   			_fMap[0].SqlColName = "Entero";
   			_fMap[1].SqlColName = "Alfa";
   			_fMap[2].SqlColName = "Fecha";
   			_fMap[3].SqlColName = "Logico";

			this.SetDefaultWhere(@"" );
		}

	} // end class ParamTabAdapter 


} // namespace Berke.DG.Adapters
#endregion ParamTab

#region ListTab
namespace Berke.DG.Adapters
{
	public class ListTabAdapter : ViewAdapter{
	
		public ListTabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = "Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class ListTabAdapter 


} // namespace Berke.DG.Adapters
#endregion ListTab

#region CambioSitParam
namespace Berke.DG.Adapters
{
	public class CambioSitParamAdapter : ViewAdapter{
	
		public CambioSitParamAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"" );
			
   			_fMap[0].SqlColName = "TramiteSitDestinoID";
   			_fMap[1].SqlColName = "SitFecha";
   			_fMap[2].SqlColName = "SitHora";
   			_fMap[3].SqlColName = "Plazo";
   			_fMap[4].SqlColName = "UnidadID";
   			_fMap[5].SqlColName = "SitVencim";
   			_fMap[6].SqlColName = "AgenteLocalID";
   			_fMap[7].SqlColName = "NroActa";
   			_fMap[8].SqlColName = "NroRegistro";
   			_fMap[9].SqlColName = "DiarioID";
   			_fMap[10].SqlColName = "PublicPagina";
   			_fMap[11].SqlColName = "PublicAnio";
   			_fMap[12].SqlColName = "Bib";
   			_fMap[13].SqlColName = "Exp";
   			_fMap[14].SqlColName = "ExpedienteID";
   			_fMap[15].SqlColName = "RegVencim";
   			_fMap[16].SqlColName = "Obs";
   			_fMap[17].SqlColName = "AnioRegistro";
   			_fMap[18].SqlColName = "AnioActa";

			this.SetDefaultWhere(@"" );
		}

	} // end class CambioSitParamAdapter 


} // namespace Berke.DG.Adapters
#endregion CambioSitParam

#region vExpePoder
namespace Berke.DG.Adapters
{
	public class vExpePoderAdapter : ViewAdapter{
	
		public vExpePoderAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Poderdante pdd INNER JOIN
                      dbo.Expediente_Poderdante exp_pdd ON pdd.ID = exp_pdd.PoderdanteID RIGHT OUTER JOIN
                      dbo.Tramite trm INNER JOIN
                      dbo.Tramite_Sit trm_sit ON trm.ID = trm_sit.TramiteID INNER JOIN
                      dbo.Situacion sit ON trm_sit.SituacionID = sit.ID RIGHT OUTER JOIN
                      dbo.Expediente exp ON trm_sit.ID = exp.TramiteSitID ON exp_pdd.ExpedienteID = exp.ID LEFT OUTER JOIN
                      dbo.OrdenTrabajo ot ON exp.OrdenTrabajoID = ot.ID LEFT OUTER JOIN
                      dbo.PoderInsc ins ON exp.PoderInscID = ins.ID" );
			
   			_fMap[0].SqlColName = "exp.ID";
   			_fMap[1].SqlColName = " exp.Concluido";
   			_fMap[2].SqlColName = " exp.VencimientoFecha";
   			_fMap[3].SqlColName = " exp.Acta";
   			_fMap[4].SqlColName = " exp.ActaNro";
   			_fMap[5].SqlColName = " exp.ActaAnio";
   			_fMap[6].SqlColName = " exp.OrdenTrabajoID";
   			_fMap[7].SqlColName = " exp.ClienteID";
   			_fMap[8].SqlColName = " exp.AgenteLocalID";
   			_fMap[9].SqlColName = " exp.ExpedienteID";
   			_fMap[10].SqlColName = " exp.PoderInscID";
   			_fMap[11].SqlColName = " exp.Obs";
   			_fMap[12].SqlColName = " exp.DiarioID";
   			_fMap[13].SqlColName = " exp.PublicPag";
   			_fMap[14].SqlColName = " exp.PublicAnio";
   			_fMap[15].SqlColName = " exp.Documento";
   			_fMap[16].SqlColName = " exp.Bib";
   			_fMap[17].SqlColName = " exp.Exp";
   			_fMap[18].SqlColName = " trm_sit.TramiteID";
   			_fMap[19].SqlColName = " trm_sit.SituacionID";
   			_fMap[20].SqlColName = " ins.InscripcionNro";
   			_fMap[21].SqlColName = " ins.InscripcionAnio";
   			_fMap[22].SqlColName = " ins.Inscripcion";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpePoderAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpePoder

#region vRenovacionLimitadas
namespace Berke.DG.Adapters
{
	public class vRenovacionLimitadasAdapter : ViewAdapter{
	
		public vRenovacionLimitadasAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"" );
			
   			_fMap[0].SqlColName = "Denominacion";
   			_fMap[1].SqlColName = "Clase";
   			_fMap[2].SqlColName = "ClaseID";
   			_fMap[3].SqlColName = "MarcaID";
   			_fMap[4].SqlColName = "IdiomaID";
   			_fMap[5].SqlColName = "Idioma";
   			_fMap[6].SqlColName = "Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vRenovacionLimitadasAdapter 


} // namespace Berke.DG.Adapters
#endregion vRenovacionLimitadas

#region ActaRegistroPoder
namespace Berke.DG.Adapters
{
	public class ActaRegistroPoderAdapter : ViewAdapter{
	
		public ActaRegistroPoderAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"" );
			
   			_fMap[0].SqlColName = "Acta";
   			_fMap[1].SqlColName = "Anio";
   			_fMap[2].SqlColName = "Registro";
   			_fMap[3].SqlColName = "Poder";

			this.SetDefaultWhere(@"" );
		}

	} // end class ActaRegistroPoderAdapter 


} // namespace Berke.DG.Adapters
#endregion ActaRegistroPoder

#region vExpedienteGral
namespace Berke.DG.Adapters
{
	public class vExpedienteGralAdapter : ViewAdapter{
	
		public vExpedienteGralAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Proceso proce INNER JOIN
      dbo.Tramite trm INNER JOIN
      dbo.Situacion Sit INNER JOIN
      dbo.Tramite_Sit trmSit ON Sit.ID = trmSit.SituacionID ON trm.ID = trmSit.TramiteID ON proce.ID = trm.ProcesoID RIGHT OUTER JOIN
      dbo.Expediente expe ON trmSit.ID = expe.TramiteSitID LEFT OUTER JOIN
      dbo.OrdenTrabajo ot ON expe.OrdenTrabajoID = ot.ID" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " trm.ProcesoID";
   			_fMap[2].SqlColName = " expe.TramiteSitID";
   			_fMap[3].SqlColName = " trmSit.TramiteID";
   			_fMap[4].SqlColName = " trmSit.SituacionID";
   			_fMap[5].SqlColName = " trm.Abrev";
   			_fMap[6].SqlColName = " Sit.Abrev";
   			_fMap[7].SqlColName = " expe.ActaNro";
   			_fMap[8].SqlColName = " expe.ActaAnio";
   			_fMap[9].SqlColName = " expe.ClienteID";
   			_fMap[10].SqlColName = " expe.AgenteLocalID";
   			_fMap[11].SqlColName = " expe.Nuestra";
   			_fMap[12].SqlColName = " expe.Concluido";
   			_fMap[13].SqlColName = " expe.VencimientoFecha";
   			_fMap[14].SqlColName = " expe.Obs";
   			_fMap[15].SqlColName = " ot.Nro";
   			_fMap[16].SqlColName = " ot.Anio";
   			_fMap[17].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[18].SqlColName = " Sit.Descrip";
   			_fMap[19].SqlColName = " '?'";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpedienteGralAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpedienteGral

#region vPoderActual
namespace Berke.DG.Adapters
{
	public class vPoderActualAdapter : ViewAdapter{
	
		public vPoderActualAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Poder po" );
			
   			_fMap[0].SqlColName = "po.ID";
   			_fMap[1].SqlColName = " po.Denominacion";
   			_fMap[2].SqlColName = " po.Domicilio";
   			_fMap[3].SqlColName = " po.Concepto";
   			_fMap[4].SqlColName = " po.Obs";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderActualAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderActual

#region vPoderAnterior
namespace Berke.DG.Adapters
{
	public class vPoderAnteriorAdapter : ViewAdapter{
	
		public vPoderAnteriorAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Marca_Poderdante mp 
INNER JOIN Poderdante pod ON pod.ID = mp.PoderdanteID
INNER JOIN Poder po ON po.ID = pod.PoderID
INNER JOIN PoderDomicilio pd ON po.ID = pd.PoderID" );
			
   			_fMap[0].SqlColName = "mp.MarcaID";
   			_fMap[1].SqlColName = " po.ID";
   			_fMap[2].SqlColName = " po.Denominacion";
   			_fMap[3].SqlColName = " pd.Domicilio";
   			_fMap[4].SqlColName = " po.Concepto";
   			_fMap[5].SqlColName = " po.Obs";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderAnteriorAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderAnterior

#region vMarcaPoderdante
namespace Berke.DG.Adapters
{
	public class vMarcaPoderdanteAdapter : ViewAdapter{
	
		public vMarcaPoderdanteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.CCiudad ciu LEFT OUTER JOIN
   dbo.CPais pai ON ciu.idpais = pai.idpais RIGHT OUTER JOIN
   dbo.PoderDomicilio pdd ON ciu.idciudad = pdd.CiudadID RIGHT OUTER JOIN
   dbo.Marca_Poderdante mp INNER JOIN
   dbo.Poderdante pd ON mp.PoderdanteID = pd.ID ON pdd.ID = pd.PoderDomicilioID" );
			
   			_fMap[0].SqlColName = "mp.MarcaID";
   			_fMap[1].SqlColName = " mp.PoderdanteID";
   			_fMap[2].SqlColName = " pd.Denominacion";
   			_fMap[3].SqlColName = " pdd.Domicilio";
   			_fMap[4].SqlColName = " ciu.idciudad";
   			_fMap[5].SqlColName = " ciu.nombreve";
   			_fMap[6].SqlColName = " pai.idpais";
   			_fMap[7].SqlColName = " pai.paisalfa";
   			_fMap[8].SqlColName = " pai.descrip";
   			_fMap[9].SqlColName = " pd.PropietarioID";
   			_fMap[10].SqlColName = " pd.PoderDomicilioID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaPoderdanteAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaPoderdante

#region vClaseClase
namespace Berke.DG.Adapters
{
	public class vClaseClaseAdapter : ViewAdapter{
	
		public vClaseClaseAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Clase INNER JOIN
 dbo.Clase_Clase ON dbo.Clase.ID = dbo.Clase_Clase.ClaseID INNER JOIN
 dbo.Clase Clase_1 ON dbo.Clase_Clase.ClaseRelacID = Clase_1.ID" );
			
   			_fMap[0].SqlColName = "dbo.Clase_Clase.ID";
   			_fMap[1].SqlColName = " dbo.Clase_Clase.ClaseID";
   			_fMap[2].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[3].SqlColName = " dbo.Clase_Clase.ClaseRelacID";
   			_fMap[4].SqlColName = " Clase_1.DescripBreve";
   			_fMap[5].SqlColName = " dbo.Clase_Clase.Ancestro";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClaseClaseAdapter 


} // namespace Berke.DG.Adapters
#endregion vClaseClase

#region RegistrosActasClientePropietario
namespace Berke.DG.Adapters
{
	public class RegistrosActasClientePropietarioAdapter : ViewAdapter{
	
		public RegistrosActasClientePropietarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"" );
			
   			_fMap[0].SqlColName = "ClienteID";
   			_fMap[1].SqlColName = "PropietarioID";
   			_fMap[2].SqlColName = "Registros";
   			_fMap[3].SqlColName = "Actas";
   			_fMap[4].SqlColName = "EsTVS";

			this.SetDefaultWhere(@"" );
		}

	} // end class RegistrosActasClientePropietarioAdapter 


} // namespace Berke.DG.Adapters
#endregion RegistrosActasClientePropietario

#region vExpeDocum
namespace Berke.DG.Adapters
{
	public class vExpeDocumAdapter : ViewAdapter{
	
		public vExpeDocumAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Expediente_Documento rel,
	Expediente exp,
	Documento doc ,
	DocumentoTipo doctipo" );
			
   			_fMap[0].SqlColName = "rel.ID";
   			_fMap[1].SqlColName = " rel.ExpedienteID";
   			_fMap[2].SqlColName = " rel.DocumentoID";
   			_fMap[3].SqlColName = " exp.ActaNro";
   			_fMap[4].SqlColName = " exp.ActaAnio";
   			_fMap[5].SqlColName = " exp.Acta";
   			_fMap[6].SqlColName = " doc.DocumentoTipoID";
   			_fMap[7].SqlColName = " doc.IdentificadorNro";
   			_fMap[8].SqlColName = " doc.IdentificadorAnio";
   			_fMap[9].SqlColName = " doc.ReferenciaExterna";
   			_fMap[10].SqlColName = " doc.Path";
   			_fMap[11].SqlColName = " doc.Descrip";
   			_fMap[12].SqlColName = " doc.Fecha";
   			_fMap[13].SqlColName = " doctipo.Descrip";
   			_fMap[14].SqlColName = " doctipo.Abrev";
   			_fMap[15].SqlColName = " doctipo.IdentifNombre";

			this.SetDefaultWhere(@"rel.ExpedienteID = exp.ID and
	rel.DocumentoID = doc.ID and
	doc.DocumentoTipoID = doctipo.ID" );
		}

	} // end class vExpeDocumAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeDocum

#region vDocum
namespace Berke.DG.Adapters
{
	public class vDocumAdapter : ViewAdapter{
	
		public vDocumAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.DocumentoTipo doctipo INNER JOIN
       dbo.Documento doc ON doctipo.ID = doc.DocumentoTipoID LEFT OUTER JOIN
       dbo.Expediente_Documento rel INNER JOIN
       dbo.Expediente exp ON rel.ExpedienteID = exp.ID ON doc.ID = rel.DocumentoID" );
			
   			_fMap[0].SqlColName = "doc.ID";
   			_fMap[1].SqlColName = " doc.Fecha";
   			_fMap[2].SqlColName = " doctipo.Abrev";
   			_fMap[3].SqlColName = " doc.IdentificadorNro";
   			_fMap[4].SqlColName = " doc.IdentificadorAnio";
   			_fMap[5].SqlColName = " doc.Descrip";
   			_fMap[6].SqlColName = " doc.ReferenciaExterna";
   			_fMap[7].SqlColName = " doc.Path";
   			_fMap[8].SqlColName = " doc.DocumentoTipoID";
   			_fMap[9].SqlColName = " doctipo.Descrip";
   			_fMap[10].SqlColName = " doctipo.IdentifNombre";
   			_fMap[11].SqlColName = " doctipo.EsEscritoVario";
   			_fMap[12].SqlColName = " exp.ID";
   			_fMap[13].SqlColName = " exp.ActaNro";
   			_fMap[14].SqlColName = " exp.ActaAnio";
   			_fMap[15].SqlColName = " exp.Acta";

			this.SetDefaultWhere(@"" );
		}

	} // end class vDocumAdapter 


} // namespace Berke.DG.Adapters
#endregion vDocum

#region vBoletin_SinBusqFon
namespace Berke.DG.Adapters
{
	public class vBoletin_SinBusqFonAdapter : ViewAdapter{
	
		public vBoletin_SinBusqFonAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Boletin" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nro";
   			_fMap[2].SqlColName = " Anio";
   			_fMap[3].SqlColName = " Complemento";
   			_fMap[4].SqlColName = " Fecha";
   			_fMap[5].SqlColName = " Boletin";

			this.SetDefaultWhere(@"ID NOT IN (  Select BoletinID  FROM BusqFon where BoletinID is not null )" );
		}

	} // end class vBoletin_SinBusqFonAdapter 


} // namespace Berke.DG.Adapters
#endregion vBoletin_SinBusqFon

#region vBusqFon
namespace Berke.DG.Adapters
{
	public class vBusqFonAdapter : ViewAdapter{
	
		public vBusqFonAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.BusqFon, 
   dbo.BusqFonDet,
   dbo.BusqFonResul" );
			
   			_fMap[0].SqlColName = "dbo.BusqFon.Id";
   			_fMap[1].SqlColName = " dbo.BusqFonResul.Id";
   			_fMap[2].SqlColName = " dbo.BusqFon.Clave";
   			_fMap[3].SqlColName = " dbo.BusqFon.FuncionarioID";
   			_fMap[4].SqlColName = " dbo.BusqFonDet.ID";
   			_fMap[5].SqlColName = " dbo.BusqFonDet.Relac";
   			_fMap[6].SqlColName = " dbo.BusqFonResul.Registro";
   			_fMap[7].SqlColName = " dbo.BusqFonResul.Denominacion";
   			_fMap[8].SqlColName = " dbo.BusqFonResul.Fonetizado";
   			_fMap[9].SqlColName = " dbo.BusqFonResul.Puntaje";
   			_fMap[10].SqlColName = " dbo.BusqFonResul.Patron";
   			_fMap[11].SqlColName = " dbo.BusqFonResul.Nuestra";
   			_fMap[12].SqlColName = " dbo.BusqFonResul.Vigilada";
   			_fMap[13].SqlColName = " dbo.BusqFonResul.Sustituida";
   			_fMap[14].SqlColName = " dbo.BusqFonResul.StandBy";
   			_fMap[15].SqlColName = " dbo.BusqFonResul.CLienteID";
   			_fMap[16].SqlColName = " dbo.BusqFonResul.ClienteNombre";
   			_fMap[17].SqlColName = " dbo.BusqFonResul.Propietarios";
   			_fMap[18].SqlColName = " dbo.BusqFonResul.Acta";
   			_fMap[19].SqlColName = " dbo.BusqFonResul.MarcaTipo";
   			_fMap[20].SqlColName = " dbo.BusqFonResul.Imprimir";
   			_fMap[21].SqlColName = " dbo.BusqFonResul.Tramite";
   			_fMap[22].SqlColName = " dbo.BusqFonResul.ClaseNumero";
   			_fMap[23].SqlColName = " dbo.BusqFonResul.ClaseDescrip";
   			_fMap[24].SqlColName = " dbo.BusqFonResul.FConcesion";
   			_fMap[25].SqlColName = " dbo.BusqFonResul.FVencimiento";

			this.SetDefaultWhere(@"dbo.BusqFon.Id = dbo.BusqFonDet.BusqFonID and
    dbo.BusqFonDet.ID = dbo.BusqFonResul.BusqFonDetID" );
		}

	} // end class vBusqFonAdapter 


} // namespace Berke.DG.Adapters
#endregion vBusqFon

#region vHIresu
namespace Berke.DG.Adapters
{
	public class vHIresuAdapter : ViewAdapter{
	
		public vHIresuAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"OrdenTrabajo ot, TrabajoTipo tt" );
			
   			_fMap[0].SqlColName = "ot.ID";
   			_fMap[1].SqlColName = " ot.Nro";
   			_fMap[2].SqlColName = " ot.Anio";
   			_fMap[3].SqlColName = " ot.AltaFecha";
   			_fMap[4].SqlColName = " ot.OrdenTrabajo";
   			_fMap[5].SqlColName = " tt.ID";
   			_fMap[6].SqlColName = " tt.Descrip";

			this.SetDefaultWhere(@"ot.TrabajoTipoID = tt.ID" );
		}

	} // end class vHIresuAdapter 


} // namespace Berke.DG.Adapters
#endregion vHIresu

#region vExpeMarcaL
namespace Berke.DG.Adapters
{
	public class vExpeMarcaLAdapter : ViewAdapter{
	
		public vExpeMarcaLAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.OrdenTrabajo ot RIGHT OUTER JOIN
                      dbo.MarcaRegRen regRen INNER JOIN
                      dbo.Clase cla INNER JOIN
                      dbo.Marca mar ON cla.ID = mar.ClaseID INNER JOIN
                      dbo.Expediente expe ON mar.ID = expe.MarcaID ON regRen.ID = expe.MarcaRegRenID INNER JOIN
                      dbo.Situacion sit INNER JOIN
                      dbo.Tramite_Sit tramSit ON sit.ID = tramSit.SituacionID ON expe.TramiteSitID = tramSit.ID INNER JOIN
                      dbo.Tramite tram ON expe.TramiteID = tram.ID ON ot.ID = expe.OrdenTrabajoID" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.Acta";
   			_fMap[2].SqlColName = " regRen.Registro";
   			_fMap[3].SqlColName = " ot.OrdenTrabajo";
   			_fMap[4].SqlColName = " mar.Denominacion";
   			_fMap[5].SqlColName = " cla.DescripBreve";
   			_fMap[6].SqlColName = " tram.Descrip";
   			_fMap[7].SqlColName = " tram.Abrev";
   			_fMap[8].SqlColName = " sit.Descrip";
   			_fMap[9].SqlColName = " expe.TramiteID";
   			_fMap[10].SqlColName = " expe.TramiteSitID";
   			_fMap[11].SqlColName = " expe.ActaNro";
   			_fMap[12].SqlColName = " expe.ActaAnio";
   			_fMap[13].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[14].SqlColName = " expe.ClienteID";
   			_fMap[15].SqlColName = " expe.AgenteLocalID";
   			_fMap[16].SqlColName = " mar.ClaseID";
   			_fMap[17].SqlColName = " ot.Nro";
   			_fMap[18].SqlColName = " ot.Anio";
   			_fMap[19].SqlColName = " regRen.RegistroNro";
   			_fMap[20].SqlColName = " regRen.RegistroAnio";
   			_fMap[21].SqlColName = " expe.MarcaID";
   			_fMap[22].SqlColName = " expe.Nuestra";
   			_fMap[23].SqlColName = " mar.Nuestra";
   			_fMap[24].SqlColName = " mar.Vigente";
   			_fMap[25].SqlColName = " expe.VencimientoFecha";
   			_fMap[26].SqlColName = " regRen.Vigente";

			this.SetDefaultWhere(@"(expe.TramiteID IN
                          (SELECT     ID
                            FROM          Tramite
                            WHERE      ProcesoID = 1))" );
		}

	} // end class vExpeMarcaLAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeMarcaL

#region vPropietarioResumida
namespace Berke.DG.Adapters
{
	public class vPropietarioResumidaAdapter : ViewAdapter{
	
		public vPropietarioResumidaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"CPropietario as Prop" );
			
   			_fMap[0].SqlColName = "Prop.idprop";
   			_fMap[1].SqlColName = " Prop.Nombre";
   			_fMap[2].SqlColName = " Prop.Direccion";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropietarioResumidaAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietarioResumida

#region vHIPoder
namespace Berke.DG.Adapters
{
	public class vHIPoderAdapter : ViewAdapter{
	
		public vHIPoderAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Poderdante INNER JOIN
 Expediente_Poderdante ON Poderdante.ID = Expediente_Poderdante.PoderdanteID INNER JOIN
 Expediente ON Expediente_Poderdante.ExpedienteID = Expediente.ID INNER JOIN
 OrdenTrabajo ON Expediente.OrdenTrabajoID = OrdenTrabajo.ID" );
			
   			_fMap[0].SqlColName = "DISTINCT";
   			_fMap[1].SqlColName = " OrdenTrabajo.ID";
   			_fMap[2].SqlColName = " Expediente_Poderdante.Origen";

			this.SetDefaultWhere(@"" );
		}

	} // end class vHIPoderAdapter 


} // namespace Berke.DG.Adapters
#endregion vHIPoder

#region vHIPropietario
namespace Berke.DG.Adapters
{
	public class vHIPropietarioAdapter : ViewAdapter{
	
		public vHIPropietarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Poderdante INNER JOIN
 Expediente_Poderdante ON Poderdante.ID = Expediente_Poderdante.PoderdanteID INNER JOIN
 Expediente ON Expediente_Poderdante.ExpedienteID = Expediente.ID INNER JOIN
 OrdenTrabajo ON Expediente.OrdenTrabajoID = OrdenTrabajo.ID" );
			
   			_fMap[0].SqlColName = "DISTINCT";
   			_fMap[1].SqlColName = " OrdenTrabajo.ID";
   			_fMap[2].SqlColName = " Expediente_Poderdante.Origen";

			this.SetDefaultWhere(@"" );
		}

	} // end class vHIPropietarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vHIPropietario

#region vPoderExpe
namespace Berke.DG.Adapters
{
	public class vPoderExpeAdapter : ViewAdapter{
	
		public vPoderExpeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Poder LEFT OUTER JOIN
 Expediente ON Poder.ExpedienteID = Expediente.ID  LEFT OUTER JOIN
 Cpais ON Poder.PaisID=Cpais.idpais" );
			
   			_fMap[0].SqlColName = "Poder.ID";
   			_fMap[1].SqlColName = " Poder.Inscripcion";
   			_fMap[2].SqlColName = " Expediente.Acta";
   			_fMap[3].SqlColName = " Poder.Denominacion";
   			_fMap[4].SqlColName = " Poder.Domicilio";
   			_fMap[5].SqlColName = " Poder.Concepto";
   			_fMap[6].SqlColName = " Poder.Obs";
   			_fMap[7].SqlColName = " CPais.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderExpeAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderExpe

#region vPoderList
namespace Berke.DG.Adapters
{
	public class vPoderListAdapter : ViewAdapter{
	
		public vPoderListAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.OrdenTrabajo RIGHT OUTER JOIN
                      dbo.Expediente RIGHT OUTER JOIN
                      dbo.PoderTipo INNER JOIN
                      dbo.Poder ON dbo.PoderTipo.ID = dbo.Poder.PoderTipoID LEFT OUTER JOIN
                      dbo.Poderdante ON dbo.Poder.ID = dbo.Poderdante.PoderID ON dbo.Expediente.ID = dbo.Poder.ExpedienteID ON 
                      dbo.OrdenTrabajo.ID = dbo.Expediente.OrdenTrabajoID" );
			
   			_fMap[0].SqlColName = "dbo.Poder.ID";
   			_fMap[1].SqlColName = " dbo.Poder.PoderTipoID";
   			_fMap[2].SqlColName = " dbo.Poder.Nuestra";
   			_fMap[3].SqlColName = " dbo.PoderTipo.Descrip";
   			_fMap[4].SqlColName = " dbo.Poderdante.PropietarioID";
   			_fMap[5].SqlColName = " dbo.Poderdante.ID";
   			_fMap[6].SqlColName = " dbo.Expediente.Acta";
   			_fMap[7].SqlColName = " dbo.Expediente.ActaNro";
   			_fMap[8].SqlColName = " dbo.Expediente.ActaAnio";
   			_fMap[9].SqlColName = " dbo.Expediente.OrdenTrabajoID";
   			_fMap[10].SqlColName = " dbo.OrdenTrabajo.Nro";
   			_fMap[11].SqlColName = " dbo.OrdenTrabajo.Anio";
   			_fMap[12].SqlColName = " dbo.OrdenTrabajo.OrdenTrabajo";
   			_fMap[13].SqlColName = " dbo.Poder.InscripcionNro";
   			_fMap[14].SqlColName = " dbo.Poder.InscripcionAnio";
   			_fMap[15].SqlColName = " dbo.Poder.Inscripcion";
   			_fMap[16].SqlColName = " dbo.Poder.Denominacion";
   			_fMap[17].SqlColName = " dbo.Poder.Domicilio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderListAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderList

#region vSituacionSigte
namespace Berke.DG.Adapters
{
	public class vSituacionSigteAdapter : ViewAdapter{
	
		public vSituacionSigteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Tramite_SitSgte tss, 
      Tramite_Sit ts1,
      Tramite_Sit ts2,
      Situacion s1,
      Situacion  s2,
      Tramite t1,
      Tramite t2,
      Tramite t" );
			
   			_fMap[0].SqlColName = "tss.id";
   			_fMap[1].SqlColName = " ts1.TramiteID";
   			_fMap[2].SqlColName = " t1.Descrip";
   			_fMap[3].SqlColName = " tss.TramiteSitID";
   			_fMap[4].SqlColName = " s1.Descrip";
   			_fMap[5].SqlColName = " tss.TramiteSitSgteID";
   			_fMap[6].SqlColName = " s2.Descrip";

			this.SetDefaultWhere(@"tss.TramiteSitID = ts1.ID and 
    tss.TramiteSitSgteID = ts2.ID and
    ts1.TramiteID = t1.ID  and
    ts2.TramiteID = t2.ID and
    ts1.SituacionID = s1.ID  and
    ts2.SituacionID = s2.ID" );
		}

	} // end class vSituacionSigteAdapter 


} // namespace Berke.DG.Adapters
#endregion vSituacionSigte

#region vExpeCorresp
namespace Berke.DG.Adapters
{
	public class vExpeCorrespAdapter : ViewAdapter{
	
		public vExpeCorrespAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente
 INNER JOIN dbo.Expediente_Documento ON dbo.Expediente.ID = dbo.Expediente_Documento.ExpedienteID 
 INNER JOIN dbo.Documento ON dbo.Expediente_Documento.DocumentoID = dbo.Documento.ID
 INNER JOIN dbo.Correspondencia ON dbo.Documento.CorrespondenciaID = dbo.Correspondencia.ID" );
			
   			_fMap[0].SqlColName = "dbo.Expediente.ID";
   			_fMap[1].SqlColName = " dbo.Documento.ReferenciaExterna";
   			_fMap[2].SqlColName = " dbo.Correspondencia.FechaAlta";
   			_fMap[3].SqlColName = " dbo.Correspondencia.Nro";
   			_fMap[4].SqlColName = " dbo.Correspondencia.Anio";
   			_fMap[5].SqlColName = " dbo.Correspondencia.RefCorresp";
   			_fMap[6].SqlColName = " dbo.Correspondencia.RefCliente";
   			_fMap[7].SqlColName = " dbo.Correspondencia.Obs";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpeCorrespAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeCorresp

#region vExpeEscritoVario
namespace Berke.DG.Adapters
{
	public class vExpeEscritoVarioAdapter : ViewAdapter{
	
		public vExpeEscritoVarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente 
   INNER JOIN dbo.Expediente_Documento ON dbo.Expediente.ID = dbo.Expediente_Documento.ExpedienteID 
   INNER JOIN dbo.Documento ON dbo.Expediente_Documento.DocumentoID = dbo.Documento.ID 
   INNER JOIN dbo.DocumentoTipo ON dbo.Documento.DocumentoTipoID = dbo.DocumentoTipo.ID" );
			
   			_fMap[0].SqlColName = "dbo.Expediente.ID";
   			_fMap[1].SqlColName = " dbo.Documento.ID";
   			_fMap[2].SqlColName = " dbo.Documento.Descrip";
   			_fMap[3].SqlColName = " dbo.Documento.Fecha";
   			_fMap[4].SqlColName = " dbo.DocumentoTipo.ID";
   			_fMap[5].SqlColName = " dbo.DocumentoTipo.Descrip";
   			_fMap[6].SqlColName = " dbo.DocumentoTipo.Abrev";
   			_fMap[7].SqlColName = " dbo.DocumentoTipo.IdentifNombre";
   			_fMap[8].SqlColName = " dbo.Documento.IdentificadorNro";
   			_fMap[9].SqlColName = " dbo.Documento.IdentificadorAnio";

			this.SetDefaultWhere(@"dbo.DocumentoTipo.EsEscritoVario = 1" );
		}

	} // end class vExpeEscritoVarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeEscritoVario

#region vMerge
namespace Berke.DG.Adapters
{
	public class vMergeAdapter : ViewAdapter{
	
		public vMergeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Expediente expe INNER JOIN
Marca mar ON expe.marcaID = mar.ID LEFT OUTER JOIN
CCliente cli ON expe.ClienteID = cli.idcli LEFT OUTER JOIN
Clase cla ON cla.ID=mar.claseID LEFT OUTER JOIN
OrdenTrabajo ot ON expe.OrdenTrabajoID = ot.ID LEFT OUTER JOIN
Tramite tram ON expe.TramiteID = tram.ID LEFT OUTER JOIN
Merge_Expediente ME ON ME.expedienteID=expe.ID LEFT OUTER JOIN
MergeDoc MD ON MD.ID=ME.MergeDocID" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " ot.OrdenTrabajo";
   			_fMap[2].SqlColName = " tram.Abrev";
   			_fMap[3].SqlColName = " mar.Denominacion";
   			_fMap[4].SqlColName = " cla.DescripBreve";
   			_fMap[5].SqlColName = " cla.Nro";
   			_fMap[6].SqlColName = " cli.Nombre";
   			_fMap[7].SqlColName = " expe.ClienteID";
   			_fMap[8].SqlColName = " ME.Generado";
   			_fMap[9].SqlColName = " MD.Url";
   			_fMap[10].SqlColName = " ME.Terminado";
   			_fMap[11].SqlColName = " ME.MergeDocID";
   			_fMap[12].SqlColName = " ME.MergeID";
   			_fMap[13].SqlColName = " expe.TramiteID";
   			_fMap[14].SqlColName = " expe.TramiteSitID";
   			_fMap[15].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[16].SqlColName = " expe.MarcaID";
   			_fMap[17].SqlColName = " expe.Nuestra";
   			_fMap[18].SqlColName = " expe.VencimientoFecha";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergeAdapter 


} // namespace Berke.DG.Adapters
#endregion vMerge

#region vClienteXVia
namespace Berke.DG.Adapters
{
	public class vClienteXViaAdapter : ViewAdapter{
	
		public vClienteXViaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ClienteXVia  cv
JOIN CViaCom cvc 
ON (cv.ViaID = cvc.IDVia)" );
			
   			_fMap[0].SqlColName = "cv.ID";
   			_fMap[1].SqlColName = " cv.ClienteID";
   			_fMap[2].SqlColName = " cv.ViaID";
   			_fMap[3].SqlColName = " cv.Descrip";
   			_fMap[4].SqlColName = " cvc.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClienteXViaAdapter 


} // namespace Berke.DG.Adapters
#endregion vClienteXVia

#region vClienteObs
namespace Berke.DG.Adapters
{
	public class vClienteObsAdapter : ViewAdapter{
	
		public vClienteObsAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ClienteObs  co
JOIN Area ar
on (co.AreaID = ar.ID)" );
			
   			_fMap[0].SqlColName = "co.ID";
   			_fMap[1].SqlColName = " co.ClienteID";
   			_fMap[2].SqlColName = " co.AreaID";
   			_fMap[3].SqlColName = " co.Obs";
   			_fMap[4].SqlColName = " ar.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClienteObsAdapter 


} // namespace Berke.DG.Adapters
#endregion vClienteObs

#region vAtencionXVia
namespace Berke.DG.Adapters
{
	public class vAtencionXViaAdapter : ViewAdapter{
	
		public vAtencionXViaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"AtencionXVia atv
JOIN CViacom cvc
ON (atv.ViaID = cvc.idvia)" );
			
   			_fMap[0].SqlColName = "atv.ID";
   			_fMap[1].SqlColName = " atv.AtencionID";
   			_fMap[2].SqlColName = " atv.ViaID";
   			_fMap[3].SqlColName = " atv.Descrip";
   			_fMap[4].SqlColName = " cvc.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAtencionXViaAdapter 


} // namespace Berke.DG.Adapters
#endregion vAtencionXVia

#region vMarca
namespace Berke.DG.Adapters
{
	public class vMarcaAdapter : ViewAdapter{
	
		public vMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Marca INNER JOIN
        dbo.Expediente ON dbo.Marca.ExpedienteVigenteID = dbo.Expediente.ID INNER JOIN
        dbo.MarcaRegRen ON dbo.Expediente.MarcaRegRenID = dbo.MarcaRegRen.ID INNER JOIN
        dbo.Tramite_Sit ON dbo.Expediente.TramiteSitID = dbo.Tramite_Sit.ID INNER JOIN
        dbo.Tramite ON dbo.Tramite_Sit.TramiteID = dbo.Tramite.ID INNER JOIN
        dbo.Situacion ON dbo.Tramite_Sit.SituacionID = dbo.Situacion.ID INNER JOIN
        dbo.Clase ON dbo.Marca.ClaseID = dbo.Clase.ID INNER JOIN
        dbo.MarcaTipo ON dbo.Marca.MarcaTipoID = dbo.MarcaTipo.ID" );
			
   			_fMap[0].SqlColName = "dbo.Marca.ID";
   			_fMap[1].SqlColName = " dbo.Marca.Denominacion";
   			_fMap[2].SqlColName = " dbo.MarcaTipo.Abrev";
   			_fMap[3].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[4].SqlColName = " dbo.Marca.Nuestra";
   			_fMap[5].SqlColName = " dbo.Marca.Vigilada";
   			_fMap[6].SqlColName = " dbo.Marca.Vigente";
   			_fMap[7].SqlColName = " dbo.Marca.Propietario";
   			_fMap[8].SqlColName = " dbo.Marca.ProDir";
   			_fMap[9].SqlColName = " dbo.Marca.ProPais";
   			_fMap[10].SqlColName = " dbo.MarcaRegRen.RegistroNro";
   			_fMap[11].SqlColName = " dbo.MarcaRegRen.RegistroAnio";
   			_fMap[12].SqlColName = " dbo.Tramite.Abrev";
   			_fMap[13].SqlColName = " dbo.Situacion.Abrev";
   			_fMap[14].SqlColName = " dbo.Tramite.ID";
   			_fMap[15].SqlColName = " dbo.Situacion.ID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarca

#region vPropietarioXVia
namespace Berke.DG.Adapters
{
	public class vPropietarioXViaAdapter : ViewAdapter{
	
		public vPropietarioXViaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"PropietarioXVia  pv
JOIN CViaCom cvc 
ON (pv.ViaID = cvc.IDVia)" );
			
   			_fMap[0].SqlColName = "pv.ID";
   			_fMap[1].SqlColName = " pv.PropietarioID";
   			_fMap[2].SqlColName = " pv.ViaID";
   			_fMap[3].SqlColName = " pv.Descrip";
   			_fMap[4].SqlColName = " cvc.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropietarioXViaAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietarioXVia

#region vPropietarioDatos
namespace Berke.DG.Adapters
{
	public class vPropietarioDatosAdapter : ViewAdapter{
	
		public vPropietarioDatosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Propietario p
LEFT JOIN CPais  pp
ON (p.PaisID = pp.idpais)

LEFT JOIN CCiudad c
ON (p.ciudadID = c.idciudad)


LEFT JOIN CIdioma i
ON ( p.IdiomaID = i.ididioma)

LEFT JOIN GrupoEmpresarial gp
ON (p.grupoEmpresarialID= gp.id)" );
			
   			_fMap[0].SqlColName = "p.ID";
   			_fMap[1].SqlColName = " p.Nombre";
   			_fMap[2].SqlColName = " p.Direccion";
   			_fMap[3].SqlColName = " p.Documento";
   			_fMap[4].SqlColName = " p.RUC";
   			_fMap[5].SqlColName = " p.Personeria";
   			_fMap[6].SqlColName = " p.Obs";
   			_fMap[7].SqlColName = " p.FechaAlta";
   			_fMap[8].SqlColName = " p.FechaModificacion";
   			_fMap[9].SqlColName = " p.IdiomaID";
   			_fMap[10].SqlColName = " p.PaisID";
   			_fMap[11].SqlColName = " p.GrupoEmpresarialID";
   			_fMap[12].SqlColName = " p.CiudadID";
   			_fMap[13].SqlColName = " pp.descrip";
   			_fMap[14].SqlColName = " i.descrip";
   			_fMap[15].SqlColName = " c.nomciudad";
   			_fMap[16].SqlColName = " gp.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropietarioDatosAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietarioDatos

#region vPropietarioXPoder
namespace Berke.DG.Adapters
{
	public class vPropietarioXPoderAdapter : ViewAdapter{
	
		public vPropietarioXPoderAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"PropietarioXPoder pp
JOIN Propietario p
ON (pp.PropietarioID = p.ID)

JOIN CPais cp
ON(p.PaisID = cp.idpais)

LEFT JOIN GrupoEmpresarial gp
ON (p.GrupoEmpresarialID = gp.ID )" );
			
   			_fMap[0].SqlColName = "pp.ID";
   			_fMap[1].SqlColName = " pp.PropietarioID";
   			_fMap[2].SqlColName = " pp.PoderID";
   			_fMap[3].SqlColName = " p.nombre";
   			_fMap[4].SqlColName = " p.direccion";
   			_fMap[5].SqlColName = " p.fechaalta";
   			_fMap[6].SqlColName = " cp.descrip";
   			_fMap[7].SqlColName = " gp.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropietarioXPoderAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietarioXPoder

#region vClienteXUsuario
namespace Berke.DG.Adapters
{
	public class vClienteXUsuarioAdapter : ViewAdapter{
	
		public vClienteXUsuarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ClienteXUsuario cu
JOIN usuario u
ON (cu.UsuarioID = u.ID)" );
			
   			_fMap[0].SqlColName = "cu.ID";
   			_fMap[1].SqlColName = " cu.ClienteID";
   			_fMap[2].SqlColName = " cu.UsuarioID";
   			_fMap[3].SqlColName = " u.Nombre";
   			_fMap[4].SqlColName = " u.email";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClienteXUsuarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vClienteXUsuario

#region vAgenteLocalDatos
namespace Berke.DG.Adapters
{
	public class vAgenteLocalDatosAdapter : ViewAdapter{
	
		public vAgenteLocalDatosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"CAgenteLocal c
LEFT JOIN Estudio e
ON (c.GrupoID = e.id)" );
			
   			_fMap[0].SqlColName = "c.idagloc";
   			_fMap[1].SqlColName = " c.identidad";
   			_fMap[2].SqlColName = " c.idestado";
   			_fMap[3].SqlColName = " c.nromatricula";
   			_fMap[4].SqlColName = " c.obs";
   			_fMap[5].SqlColName = " c.Nombre";
   			_fMap[6].SqlColName = " c.Direccion";
   			_fMap[7].SqlColName = " c.GrupoID";
   			_fMap[8].SqlColName = " c.Nuestro";
   			_fMap[9].SqlColName = " e.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAgenteLocalDatosAdapter 


} // namespace Berke.DG.Adapters
#endregion vAgenteLocalDatos

#region vCliente
namespace Berke.DG.Adapters
{
	public class vClienteAdapter : ViewAdapter{
	
		public vClienteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Cliente cli 
      LEFT OUTER JOIN CPais pais 
      ON cli.PaisID = pais.idpais" );
			
   			_fMap[0].SqlColName = "cli.ID";
   			_fMap[1].SqlColName = " cli.Nombre";
   			_fMap[2].SqlColName = " pais.paisalfa";
   			_fMap[3].SqlColName = " cli.Direccion";
   			_fMap[4].SqlColName = " cli.Obs";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClienteAdapter 


} // namespace Berke.DG.Adapters
#endregion vCliente

#region vAviso
namespace Berke.DG.Adapters
{
	public class vAvisoAdapter : ViewAdapter{
	
		public vAvisoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Aviso LEFT OUTER JOIN
                      dbo.Usuario orig ON dbo.Aviso.Remitente = orig.ID LEFT OUTER JOIN
                      dbo.Usuario dest ON dbo.Aviso.Destinatario = dest.ID" );
			
   			_fMap[0].SqlColName = "dbo.Aviso.ID";
   			_fMap[1].SqlColName = " dbo.Aviso.FechaAlta";
   			_fMap[2].SqlColName = " dbo.Aviso.FechaAviso";
   			_fMap[3].SqlColName = " dbo.Aviso.Pendiente";
   			_fMap[4].SqlColName = " dbo.Aviso.Asunto";
   			_fMap[5].SqlColName = " dbo.Aviso.Contenido";
   			_fMap[6].SqlColName = " dbo.Aviso.Remitente";
   			_fMap[7].SqlColName = " dbo.Aviso.Destinatario";
   			_fMap[8].SqlColName = " dbo.Aviso.Indicaciones";
   			_fMap[9].SqlColName = " orig.usuario";
   			_fMap[10].SqlColName = " dest.usuario";
   			_fMap[11].SqlColName = " dbo.Aviso.Leido";
   			_fMap[12].SqlColName = " dbo.Aviso.PrioridadID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisoAdapter 


} // namespace Berke.DG.Adapters
#endregion vAviso

#region vPropietario
namespace Berke.DG.Adapters
{
	public class vPropietarioAdapter : ViewAdapter{
	
		public vPropietarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Propietario" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nombre";
   			_fMap[2].SqlColName = " Direccion";
   			_fMap[3].SqlColName = " Documento";
   			_fMap[4].SqlColName = " RUC";
   			_fMap[5].SqlColName = " Personeria";
   			_fMap[6].SqlColName = " Obs";
   			_fMap[7].SqlColName = " FechaAlta";
   			_fMap[8].SqlColName = " FechaModificacion";
   			_fMap[9].SqlColName = " IdiomaID";
   			_fMap[10].SqlColName = " PaisID";
   			_fMap[11].SqlColName = " GrupoEmpresarialID";
   			_fMap[12].SqlColName = " CiudadID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropietarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietario

#region vAgenteBerke
namespace Berke.DG.Adapters
{
	public class vAgenteBerkeAdapter : ViewAdapter{
	
		public vAgenteBerkeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.CAgenteLocal ag" );
			
   			_fMap[0].SqlColName = "ag.idagloc";
   			_fMap[1].SqlColName = " ag.nromatricula";
   			_fMap[2].SqlColName = " ag.nombre";

			this.SetDefaultWhere(@"ag.nuestro = 1" );
		}

	} // end class vAgenteBerkeAdapter 


} // namespace Berke.DG.Adapters
#endregion vAgenteBerke

#region vAgenteLocal
namespace Berke.DG.Adapters
{
	public class vAgenteLocalAdapter : ViewAdapter{
	
		public vAgenteLocalAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"CAgenteLocal" );
			
   			_fMap[0].SqlColName = "idagloc";
   			_fMap[1].SqlColName = " Nombre";
   			_fMap[2].SqlColName = " nromatricula";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAgenteLocalAdapter 


} // namespace Berke.DG.Adapters
#endregion vAgenteLocal

#region vExpeSituacion
namespace Berke.DG.Adapters
{
	public class vExpeSituacionAdapter : ViewAdapter{
	
		public vExpeSituacionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente_Situacion expSit INNER JOIN
                      dbo.Tramite_Sit tramSit ON expSit.TramiteSitID = tramSit.ID INNER JOIN
                      dbo.Situacion sit ON tramSit.SituacionID = sit.ID LEFT OUTER JOIN
                      dbo.Usuario ON expSit.FuncionarioID = dbo.Usuario.ID" );
			
   			_fMap[0].SqlColName = "expSit.ID";
   			_fMap[1].SqlColName = " expSit.ExpedienteID";
   			_fMap[2].SqlColName = " expSit.TramiteSitID";
   			_fMap[3].SqlColName = " expSit.AltaFecha";
   			_fMap[4].SqlColName = " expSit.SituacionFecha";
   			_fMap[5].SqlColName = " expSit.VencimientoFecha";
   			_fMap[6].SqlColName = " expSit.FuncionarioID";
   			_fMap[7].SqlColName = " expSit.Obs";
   			_fMap[8].SqlColName = " expSit.Datos";
   			_fMap[9].SqlColName = " sit.Descrip";
   			_fMap[10].SqlColName = " sit.Abrev";
   			_fMap[11].SqlColName = " dbo.Usuario.Nick";
   			_fMap[12].SqlColName = " tramSit.Orden";
   			_fMap[13].SqlColName = " sit.StandBy";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpeSituacionAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeSituacion

#region vMaxBoletinFecha
namespace Berke.DG.Adapters
{
	public class vMaxBoletinFechaAdapter : ViewAdapter{
	
		public vMaxBoletinFechaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"BoletinDet" );
			
   			_fMap[0].SqlColName = "max(SolicitudFecha)";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMaxBoletinFechaAdapter 


} // namespace Berke.DG.Adapters
#endregion vMaxBoletinFecha

#region vInstruccion
namespace Berke.DG.Adapters
{
	public class vInstruccionAdapter : ViewAdapter{
	
		public vInstruccionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente_Instruccion instruc LEFT OUTER JOIN
                      dbo.Usuario ON instruc.FuncionarioID = dbo.Usuario.ID LEFT OUTER JOIN
                      dbo.Correspondencia ON instruc.CorrespondenciaID = dbo.Correspondencia.ID LEFT OUTER JOIN
                      dbo.InstruccionTipo tipo ON instruc.InstruccionTipoID = tipo.ID" );
			
   			_fMap[0].SqlColName = "instruc.ID";
   			_fMap[1].SqlColName = " instruc.MarcaID";
   			_fMap[2].SqlColName = " instruc.ExpedienteID";
   			_fMap[3].SqlColName = " instruc.CorrespondenciaMovID";
   			_fMap[4].SqlColName = " instruc.InstruccionTipoID";
   			_fMap[5].SqlColName = " instruc.Fecha";
   			_fMap[6].SqlColName = " tipo.Descrip";
   			_fMap[7].SqlColName = " tipo.Abrev";
   			_fMap[8].SqlColName = " dbo.Correspondencia.Nro";
   			_fMap[9].SqlColName = " dbo.Correspondencia.Anio";
   			_fMap[10].SqlColName = " dbo.Correspondencia.FechaAlta";
   			_fMap[11].SqlColName = " instruc.Obs";
   			_fMap[12].SqlColName = " instruc.FuncionarioID";
   			_fMap[13].SqlColName = " dbo.Usuario.Usuario";
   			_fMap[14].SqlColName = " dbo.Usuario.Nick";

			this.SetDefaultWhere(@"" );
		}

	} // end class vInstruccionAdapter 


} // namespace Berke.DG.Adapters
#endregion vInstruccion

#region vMergeOrdenT
namespace Berke.DG.Adapters
{
	public class vMergeOrdenTAdapter : ViewAdapter{
	
		public vMergeOrdenTAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente m
join expediente e
on (e.id = m.expedienteid)

join ordentrabajo ot
on (ot.id = e.ordentrabajoid)" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.expedienteid";
   			_fMap[2].SqlColName = " m.mergeid";
   			_fMap[3].SqlColName = " m.tramiteid";
   			_fMap[4].SqlColName = " m.generado";
   			_fMap[5].SqlColName = " ot.id";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergeOrdenTAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeOrdenT

#region vPoderesPropietario
namespace Berke.DG.Adapters
{
	public class vPoderesPropietarioAdapter : ViewAdapter{
	
		public vPoderesPropietarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"poder p
join propietarioXpoder pp
on (p.id = pp.poderID )
left join Cpais cp
on (p.paisid = cp.idpais)" );
			
   			_fMap[0].SqlColName = "pp.propietarioid";
   			_fMap[1].SqlColName = " p.id";
   			_fMap[2].SqlColName = " p.actanro";
   			_fMap[3].SqlColName = " p.inscripcion";
   			_fMap[4].SqlColName = " p.denominacion";
   			_fMap[5].SqlColName = " p.domicilio";
   			_fMap[6].SqlColName = " p.paisid";
   			_fMap[7].SqlColName = " cp.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderesPropietarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderesPropietario

#region vMergeCliente
namespace Berke.DG.Adapters
{
	public class vMergeClienteAdapter : ViewAdapter{
	
		public vMergeClienteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente m
join expediente e
on (e.id = m.expedienteid)" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.expedienteid";
   			_fMap[2].SqlColName = " m.mergeid";
   			_fMap[3].SqlColName = " m.tramiteid";
   			_fMap[4].SqlColName = " m.generado";
   			_fMap[5].SqlColName = " e.clienteid";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergeClienteAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeCliente

#region vBoletin
namespace Berke.DG.Adapters
{
	public class vBoletinAdapter : ViewAdapter{
	
		public vBoletinAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"BoletinDet" );
			
   			_fMap[0].SqlColName = "DISTINCT";
   			_fMap[1].SqlColName = " BoletinID";
   			_fMap[2].SqlColName = " BolNro";

			this.SetDefaultWhere(@"" );
		}

	} // end class vBoletinAdapter 


} // namespace Berke.DG.Adapters
#endregion vBoletin

#region vPreMerge
namespace Berke.DG.Adapters
{
	public class vPreMergeAdapter : ViewAdapter{
	
		public vPreMergeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join expediente e
on ( me.expedienteid = e.id )

left join marcaRegRen mr
on ( e.marcaregrenid = mr.id )

join ordentrabajo ot
on (e.ordentrabajoid = ot.id)

left join atencion at
on ( ot.atencionid = at.id and ot.clienteid  = at.clienteid )


join cliente c
on ( c.id = e.clienteid)

left join CIdioma i
on (c.idiomaID = i.ididioma)
left join correspondencia cor
on ( ot.correspondenciaid = cor.id)" );
			
   			_fMap[0].SqlColName = "me.id";
   			_fMap[1].SqlColName = " me.expedienteid";
   			_fMap[2].SqlColName = " me.mergeid";
   			_fMap[3].SqlColName = " me.generado";
   			_fMap[4].SqlColName = " me.mergedocid";
   			_fMap[5].SqlColName = " me.terminado";
   			_fMap[6].SqlColName = " me.funcionarioid";
   			_fMap[7].SqlColName = " me.tramiteid";
   			_fMap[8].SqlColName = " me.fecha";
   			_fMap[9].SqlColName = " me.expedienteIDPadre";
   			_fMap[10].SqlColName = " me.anulado";
   			_fMap[11].SqlColName = " me.entramite";
   			_fMap[12].SqlColName = " e.ActaNro";
   			_fMap[13].SqlColName = " e.ActaAnio";
   			_fMap[14].SqlColName = " e.clienteID";
   			_fMap[15].SqlColName = " mr.registronro";
   			_fMap[16].SqlColName = " mr.registroanio";
   			_fMap[17].SqlColName = " ot.nro";
   			_fMap[18].SqlColName = " ot.anio";
   			_fMap[19].SqlColName = " ot.atencionid";
   			_fMap[20].SqlColName = " ot.id";
   			_fMap[21].SqlColName = " c.nombre";
   			_fMap[22].SqlColName = " c.correo";
   			_fMap[23].SqlColName = " c.idiomaid";
   			_fMap[24].SqlColName = " i.descrip";
   			_fMap[25].SqlColName = " at.nombre";
   			_fMap[26].SqlColName = " at.areaid";
   			_fMap[27].SqlColName = " cor.fechacorresp";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPreMergeAdapter 


} // namespace Berke.DG.Adapters
#endregion vPreMerge

#region vcd_registros_duplicados
namespace Berke.DG.Adapters
{
	public class vcd_registros_duplicadosAdapter : ViewAdapter{
	
		public vcd_registros_duplicadosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e, marcaregren m" );
			
   			_fMap[0].SqlColName = "m.registronro";
   			_fMap[1].SqlColName = " count(e.id)";

			this.SetDefaultWhere(@"e.tramiteid <> 9
and (m.registronro > 0 and m.registronro is not null)
and m.expedienteid = e.id
and m.registronro not in (999999, 9999, 99999, 1, 5, 2533)
and m.registronro not in (select rd.col001 from regdup rd)
and m.registronro not in (select rd2.col001 from regdup2 rd2)
group by m.registronro
having count(e.id) > 1
order by 1" );
		}

	} // end class vcd_registros_duplicadosAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_registros_duplicados

#region vMergePresCab
namespace Berke.DG.Adapters
{
	public class vMergePresCabAdapter : ViewAdapter{
	
		public vMergePresCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join expediente e
on ( me.expedienteid = e.id )

join expedienteXPropietario ep
on (e.id = ep.expedienteid)

join ordentrabajo ot
on (e.ordentrabajoid = ot.id)

left join atencion at
on ( ot.atencionid = at.id and 
     e.clienteid  = at.clienteid )


join cliente c
on ( c.id = e.clienteid)

left join CIdioma i
on (c.idiomaID = i.ididioma)

left join Cpais p
on ( c.paisid= p.idpais )" );
			
   			_fMap[0].SqlColName = "e.clienteid";
   			_fMap[1].SqlColName = " c.nombre";
   			_fMap[2].SqlColName = " c.correo";
   			_fMap[3].SqlColName = " c.idiomaid";
   			_fMap[4].SqlColName = " c.multiple";
   			_fMap[5].SqlColName = " c.traduccionauto";
   			_fMap[6].SqlColName = " c.paisid";
   			_fMap[7].SqlColName = " p.descrip";
   			_fMap[8].SqlColName = " i.descrip";
   			_fMap[9].SqlColName = " at.nombre";
   			_fMap[10].SqlColName = " at.areaid";
   			_fMap[11].SqlColName = " at.id";
   			_fMap[12].SqlColName = " me.mergeid";
   			_fMap[13].SqlColName = " me.generado";
   			_fMap[14].SqlColName = " me.mergedocid";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergePresCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergePresCab

#region vRepVencidas
namespace Berke.DG.Adapters
{
	public class vRepVencidasAdapter : ViewAdapter{
	
		public vRepVencidasAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"mergeVencimientoCons mc 
join mergeVencimientoCab mvc
on mc.ID = mvc.MergeVencimientoConsID
join mergeVencimientoDet mvd
on mvc.ID = mvd.MergeVencimientoCabID
join expediente e
on mvd.ExpedienteID = e.ID
join marca m
on e.marcaid = m.ID
join marcaregren mr
on e.marcaregrenid = mr.ID
join cliente cli
on m.clienteID = cli.ID
join Cidioma i
on cli.IdiomaID = i.ididioma
join clase cla
on m.claseid = cla.id
join marcatipo mt 
on m.marcatipoid = mt.id" );
			
   			_fMap[0].SqlColName = "mc.ID";
   			_fMap[1].SqlColName = " mc.fechainf";
   			_fMap[2].SqlColName = " mc.fechasup";
   			_fMap[3].SqlColName = " mc.consultafecha";
   			_fMap[4].SqlColName = " mvc.ID";
   			_fMap[5].SqlColName = " mvc.envioModo";
   			_fMap[6].SqlColName = " mvc.envioFecha";
   			_fMap[7].SqlColName = " mvc.MergeID";
   			_fMap[8].SqlColName = " mvc.MergeDocID";
   			_fMap[9].SqlColName = " mvc.ClienteID";
   			_fMap[10].SqlColName = " mvd.ID";
   			_fMap[11].SqlColName = " mvd.ExpedienteID";
   			_fMap[12].SqlColName = " m.id";
   			_fMap[13].SqlColName = " m.denominacion";
   			_fMap[14].SqlColName = " cli.nombre";
   			_fMap[15].SqlColName = " m.propietario";
   			_fMap[16].SqlColName = " i.abrev";
   			_fMap[17].SqlColName = " i.descrip";
   			_fMap[18].SqlColName = " mr.vencimientofecha";
   			_fMap[19].SqlColName = " mr.registronro";
   			_fMap[20].SqlColName = " cla.nro";
   			_fMap[21].SqlColName = " mt.abrev";

			this.SetDefaultWhere(@"" );
		}

	} // end class vRepVencidasAdapter 


} // namespace Berke.DG.Adapters
#endregion vRepVencidas

#region vcd_actas_duplicadas
namespace Berke.DG.Adapters
{
	public class vcd_actas_duplicadasAdapter : ViewAdapter{
	
		public vcd_actas_duplicadasAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e" );
			
   			_fMap[0].SqlColName = "actaanio";
   			_fMap[1].SqlColName = " actanro";
   			_fMap[2].SqlColName = " count(*)";

			this.SetDefaultWhere(@"tramiteid <> 9
and actanro > 0
and actaanio > 0
and not exists (select a.* from actadup a
		where e.actaanio = a.col002
		and e.actanro = a.col001)
group by actaanio, actanro
having count(*) > 1
order by 3 desc" );
		}

	} // end class vcd_actas_duplicadasAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_actas_duplicadas

#region vMergePresDet
namespace Berke.DG.Adapters
{
	public class vMergePresDetAdapter : ViewAdapter{
	
		public vMergePresDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join expediente e

on ( me.expedienteid = e.id )

left join marcaRegRen mr
on ( e.marcaregrenid = mr.id )

join ordentrabajo ot
on (e.ordentrabajoid = ot.id)

left join atencion at
on ( ot.atencionid = at.id and ot.clienteid  = at.clienteid )


join cliente c
on ( c.id = e.clienteid)

left join CIdioma i
on (c.idiomaID = i.ididioma)

left join correspondencia cor
on ( ot.correspondenciaid = cor.id)

left join mergedoc md
on (md.id = me.mergedocid)" );
			
   			_fMap[0].SqlColName = "me.id";
   			_fMap[1].SqlColName = " me.expedienteid";
   			_fMap[2].SqlColName = " me.mergeid";
   			_fMap[3].SqlColName = " me.generado";
   			_fMap[4].SqlColName = " me.mergedocid";
   			_fMap[5].SqlColName = " me.terminado";
   			_fMap[6].SqlColName = " me.funcionarioid";
   			_fMap[7].SqlColName = " me.tramiteid";
   			_fMap[8].SqlColName = " me.fecha";
   			_fMap[9].SqlColName = " me.expedienteIDPadre";
   			_fMap[10].SqlColName = " me.anulado";
   			_fMap[11].SqlColName = " me.entramite";
   			_fMap[12].SqlColName = " e.ActaNro";
   			_fMap[13].SqlColName = " e.ActaAnio";
   			_fMap[14].SqlColName = " e.clienteID";
   			_fMap[15].SqlColName = " e.presentacionfecha";
   			_fMap[16].SqlColName = " mr.registronro";
   			_fMap[17].SqlColName = " mr.registroanio";
   			_fMap[18].SqlColName = " ot.nro";
   			_fMap[19].SqlColName = " ot.anio";
   			_fMap[20].SqlColName = " ot.atencionid";
   			_fMap[21].SqlColName = " ot.id";
   			_fMap[22].SqlColName = " c.nombre";
   			_fMap[23].SqlColName = " c.correo";
   			_fMap[24].SqlColName = " c.idiomaid";
   			_fMap[25].SqlColName = " i.descrip";
   			_fMap[26].SqlColName = " at.nombre";
   			_fMap[27].SqlColName = " at.areaid";
   			_fMap[28].SqlColName = " cor.fechacorresp";
   			_fMap[29].SqlColName = " md.nropresupuesto";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergePresDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergePresDet

#region vPresupuestos
namespace Berke.DG.Adapters
{
	public class vPresupuestosAdapter : ViewAdapter{
	
		public vPresupuestosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"mergedoc md
join usuario u
on (md.funcionarioid = u.id)" );
			
   			_fMap[0].SqlColName = "md.id";
   			_fMap[1].SqlColName = " md.fecha";
   			_fMap[2].SqlColName = " md.contenido";
   			_fMap[3].SqlColName = " md.funcionarioid";
   			_fMap[4].SqlColName = " md.serie";
   			_fMap[5].SqlColName = " md.nropresupuesto";
   			_fMap[6].SqlColName = " md.anio";
   			_fMap[7].SqlColName = " md.anulado";
   			_fMap[8].SqlColName = " md.fechaanulacion";
   			_fMap[9].SqlColName = " md.mergeid";
   			_fMap[10].SqlColName = " md.obs";
   			_fMap[11].SqlColName = " u.usuario";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPresupuestosAdapter 


} // namespace Berke.DG.Adapters
#endregion vPresupuestos

#region vcd_marcadf
namespace Berke.DG.Adapters
{
	public class vcd_marcadfAdapter : ViewAdapter{
	
		public vcd_marcadfAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marcadf m" );
			
   			_fMap[0].SqlColName = "m.regac2";
   			_fMap[1].SqlColName = " m.nroac1";
   			_fMap[2].SqlColName = " m.nroac2";
   			_fMap[3].SqlColName = " m.regan2";

			this.SetDefaultWhere(@"not exists (
select mr.* from marcaregren mr
where m.regan2 = mr.registronro)
and m.regan2 > 99999 
and m.regac2 > 99999
and m.regan2 is not null
and m.tramite in ('REG', 'REN')
and m.marca is not null
and m.nroac1 > 0
and m.nroac2 > 0
and m.regac2 not in (
	select distinct m2.regac2
	from marcadf m2, marcadf m3
	where m2.regac2 = m3.regac2
	and m2.regan2 <> m3.regan2
	and m2.regac2 > 99999
	and m2.regan2 > 99999
	and m3.regan2 > 99999
	and m2.nroac1 > 0
	and m2.nroac2 > 0
	and m3.nroac1 > 0
	and m3.nroac2 > 0
	and not exists (
		select mr.* from marcaregren mr
		where m2.regan2 = mr.registronro)
	)
and not exists (
	select r.* from regdup r
	where m.regac2 = r.col001)
and not exists (
	select r2.* from regdup2 r2
	where m.regac2 = r2.col001)
order by m.regac2" );
		}

	} // end class vcd_marcadfAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_marcadf

#region vMergePresXMarca
namespace Berke.DG.Adapters
{
	public class vMergePresXMarcaAdapter : ViewAdapter{
	
		public vMergePresXMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me

join expediente e
on ( me.expedienteid = e.id )

join ordentrabajo ot
on (e.ordentrabajoid = ot.id)

left join atencion at
on ( ot.atencionid = at.id and
     e.clienteid  = at.clienteid )


join cliente c
on ( c.id = e.clienteid)

left join CIdioma i
on (c.idiomaID = i.ididioma)

left join correspondencia cor
on ( ot.correspondenciaid = cor.id)	

join marca m
on (e.marcaid = m.id )" );
			
   			_fMap[0].SqlColName = "ot.id";
   			_fMap[1].SqlColName = " ot.nro";
   			_fMap[2].SqlColName = " ot.anio";
   			_fMap[3].SqlColName = " ot.atencionid";
   			_fMap[4].SqlColName = " ot.refcorr";
   			_fMap[5].SqlColName = " ot.refcliente";
   			_fMap[6].SqlColName = " e.clienteid";
   			_fMap[7].SqlColName = " c.nombre";
   			_fMap[8].SqlColName = " c.correo";
   			_fMap[9].SqlColName = " c.idiomaid";
   			_fMap[10].SqlColName = " c.multiple";
   			_fMap[11].SqlColName = " c.traduccionauto";
   			_fMap[12].SqlColName = " i.descrip";
   			_fMap[13].SqlColName = " at.nombre";
   			_fMap[14].SqlColName = " at.areaid";
   			_fMap[15].SqlColName = " at.id";
   			_fMap[16].SqlColName = " cor.fechacorresp";
   			_fMap[17].SqlColName = " cor.nro";
   			_fMap[18].SqlColName = " cor.anio";
   			_fMap[19].SqlColName = " me.id";
   			_fMap[20].SqlColName = " me.tramiteid";
   			_fMap[21].SqlColName = " me.mergeid";
   			_fMap[22].SqlColName = " me.generado";
   			_fMap[23].SqlColName = " me.mergedocid";
   			_fMap[24].SqlColName = " m.id";
   			_fMap[25].SqlColName = " m.denominacion";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergePresXMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergePresXMarca

#region vMergeVencCabDet
namespace Berke.DG.Adapters
{
	public class vMergeVencCabDetAdapter : ViewAdapter{
	
		public vMergeVencCabDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"mergevencimientocab mc
join mergevencimientodet md
on (md.MergeVencimientocabID = mc.ID)" );
			
   			_fMap[0].SqlColName = "mc.ID";
   			_fMap[1].SqlColName = " mc.MergeVencimientoConsID";
   			_fMap[2].SqlColName = " mc.envioModo";
   			_fMap[3].SqlColName = " mc.enviofecha";
   			_fMap[4].SqlColName = " mc.MergeID";
   			_fMap[5].SqlColName = " mc.MergeDocID";
   			_fMap[6].SqlColName = " mc.ClienteID";
   			_fMap[7].SqlColName = " md.ID";
   			_fMap[8].SqlColName = " md.ExpedienteID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergeVencCabDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeVencCabDet

#region vcd_expecampo
namespace Berke.DG.Adapters
{
	public class vcd_expecampoAdapter : ViewAdapter{
	
		public vcd_expecampoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e,
expediente_poderdante ep1, poderdante p1,
expediente_poderdante ep2, poderdante p2,
poder pd1 left join cpais pa1 on pd1.paisid = pa1.idpais,
poder pd2 left join cpais pa2 on pd2.paisid = pa2.idpais" );
			
   			_fMap[0].SqlColName = "e.id";
   			_fMap[1].SqlColName = " upper(pd1.denominacion)";
   			_fMap[2].SqlColName = " upper(pd1.domicilio)";
   			_fMap[3].SqlColName = " upper(pa1.paisalfa)";
   			_fMap[4].SqlColName = " upper(pd2.denominacion)";
   			_fMap[5].SqlColName = " upper(pd2.domicilio)";
   			_fMap[6].SqlColName = " p2.id";
   			_fMap[7].SqlColName = " upper(pa2.paisalfa)";

			this.SetDefaultWhere(@"e.id = ep1.expedienteid
and ep1.poderdanteid = p1.id
and ep1.origen = 0
and e.id = ep2.expedienteid
and ep2.poderdanteid = p2.id
and ep2.origen = 1
and p1.poderid = pd1.id
and p2.poderid = pd2.id
order by 1
;" );
		}

	} // end class vcd_expecampoAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_expecampo

#region vcd_ren7ma8va
namespace Berke.DG.Adapters
{
	public class vcd_ren7ma8vaAdapter : ViewAdapter{
	
		public vcd_ren7ma8vaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e, 
     marca m, 
     expediente_situacion s" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " e.id";

			this.SetDefaultWhere(@"e.tramiteid = 2
and e.marcaid = m.id
and m.claseid <= 42       /* 42=7ma,  >42 8va */
and e.id = s.expedienteid
and s.tramitesitid = 30
and s.situacionfecha >= '06/03/2002'" );
		}

	} // end class vcd_ren7ma8vaAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_ren7ma8va

#region vcd_auditexpe
namespace Berke.DG.Adapters
{
	public class vcd_auditexpeAdapter : ViewAdapter{
	
		public vcd_auditexpeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_expediente a, expediente e" );
			
   			_fMap[0].SqlColName = "e.id";
   			_fMap[1].SqlColName = " a.marcaregrenid";
   			_fMap[2].SqlColName = " a.marcaid";
   			_fMap[3].SqlColName = " -cast(a.audit_fecha as integer)";

			this.SetDefaultWhere(@"a.id = e.id
and a.marcaid <> e.marcaid" );
		}

	} // end class vcd_auditexpeAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_auditexpe

#region vcd_auditmarca
namespace Berke.DG.Adapters
{
	public class vcd_auditmarcaAdapter : ViewAdapter{
	
		public vcd_auditmarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_marca" );
			
   			_fMap[0].SqlColName = "id";
   			_fMap[1].SqlColName = " denominacion";
   			_fMap[2].SqlColName = " denominacionclave";
   			_fMap[3].SqlColName = " fonetizada";
   			_fMap[4].SqlColName = " marcatipoid";
   			_fMap[5].SqlColName = " claseid";
   			_fMap[6].SqlColName = " clasedescripesp";
   			_fMap[7].SqlColName = " limitada";
   			_fMap[8].SqlColName = " clienteid";
   			_fMap[9].SqlColName = " agentelocalid";
   			_fMap[10].SqlColName = " nuestra";
   			_fMap[11].SqlColName = " vigilada";
   			_fMap[12].SqlColName = " sustituida";
   			_fMap[13].SqlColName = " standby";
   			_fMap[14].SqlColName = " vigente";
   			_fMap[15].SqlColName = " logotipoid";
   			_fMap[16].SqlColName = " expedientevigenteid";
   			_fMap[17].SqlColName = " otrosclientes";
   			_fMap[18].SqlColName = " marcaregrenid";
   			_fMap[19].SqlColName = " marcaregrenant";
   			_fMap[20].SqlColName = " propietario";
   			_fMap[21].SqlColName = " prodir";
   			_fMap[22].SqlColName = " propais";
   			_fMap[23].SqlColName = " obs";
   			_fMap[24].SqlColName = " -cast(audit_fecha as integer)";

			this.SetDefaultWhere(@"expedientevigenteid is not null" );
		}

	} // end class vcd_auditmarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_auditmarca

#region vcd_auditpropxmarca
namespace Berke.DG.Adapters
{
	public class vcd_auditpropxmarcaAdapter : ViewAdapter{
	
		public vcd_auditpropxmarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_propietarioxmarca" );
			
   			_fMap[0].SqlColName = "propietarioid";
   			_fMap[1].SqlColName = " marcaid";
   			_fMap[2].SqlColName = " -cast(audit_fecha as integer)";

			this.SetDefaultWhere(@"audit_operacion <> 'DELETE'" );
		}

	} // end class vcd_auditpropxmarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vcd_auditpropxmarca

#region vBoletinPartes
namespace Berke.DG.Adapters
{
	public class vBoletinPartesAdapter : ViewAdapter{
	
		public vBoletinPartesAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"boletin b
join boletindet bd
on (b.id = bd.boletinid)" );
			
   			_fMap[0].SqlColName = "b.id";
   			_fMap[1].SqlColName = " b.fecha";
   			_fMap[2].SqlColName = " b.boletin";
   			_fMap[3].SqlColName = " bd.bolnro";
   			_fMap[4].SqlColName = " bd.bolanio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vBoletinPartesAdapter 


} // namespace Berke.DG.Adapters
#endregion vBoletinPartes

#region vListaHI
namespace Berke.DG.Adapters
{
	public class vListaHIAdapter : ViewAdapter{
	
		public vListaHIAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join mergedoc md
on (me.mergedocid = md.id)

join expediente e
on ( me.expedienteid = e.id )

join ordentrabajo ot
on (e.ordentrabajoid = ot.id)" );
			
   			_fMap[0].SqlColName = "me.mergedocid";
   			_fMap[1].SqlColName = " ot.nro";
   			_fMap[2].SqlColName = " ot.anio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vListaHIAdapter 


} // namespace Berke.DG.Adapters
#endregion vListaHI

#region vMarcaVencim
namespace Berke.DG.Adapters
{
	public class vMarcaVencimAdapter : ViewAdapter{
	
		public vMarcaVencimAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente as expe 
		      INNER JOIN dbo.Marca 
                      ON (expe.MarcaID = dbo.Marca.ID)
                      INNER JOIN dbo.MarcaRegRen 
                      ON (expe.MarcaRegRenID = dbo.MarcaRegRen.ID) 
                      INNER JOIN dbo.Clase 
                      ON (dbo.Marca.ClaseID = dbo.Clase.ID)
                      INNER JOIN dbo.PropietarioXMarca 
                      ON (dbo.Marca.ID = dbo.PropietarioXMarca.MarcaID)
                      left join expediente_instruccion expei
                      ON ( expei.expedienteid = expe.id)
		      AND expei.fecha is not null
                      left join instrucciontipo itipo
                      ON ( expei.instrucciontipoid = itipo.id)" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " dbo.Marca.ClienteID";
   			_fMap[2].SqlColName = " dbo.Clase.Nro";
   			_fMap[3].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[4].SqlColName = " dbo.MarcaRegRen.RegistroNro";
   			_fMap[5].SqlColName = " dbo.MarcaRegRen.Vigente";
   			_fMap[6].SqlColName = " dbo.MarcaRegRen.ConcesionFecha";
   			_fMap[7].SqlColName = " dbo.MarcaRegRen.VencimientoFecha";
   			_fMap[8].SqlColName = " dbo.Marca.Denominacion";
   			_fMap[9].SqlColName = " dbo.Marca.Vigilada";
   			_fMap[10].SqlColName = " dbo.Marca.Nuestra";
   			_fMap[11].SqlColName = " dbo.PropietarioXMarca.PropietarioID";
   			_fMap[12].SqlColName = " expe.TramiteID";
   			_fMap[13].SqlColName = " itipo.Abrev";

			this.SetDefaultWhere(@"(dbo.MarcaRegRen.Vigente = 1) AND (dbo.Marca.Vigilada = 1)" );
		}

	} // end class vMarcaVencimAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaVencim

#region vRepMarcasTramites
namespace Berke.DG.Adapters
{
	public class vRepMarcasTramitesAdapter : ViewAdapter{
	
		public vRepMarcasTramitesAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"boletindet bd
join Cagentelocal ag
on (bd.AgenteLocal = ag.nromatricula)" );
			
   			_fMap[0].SqlColName = "cast(AgenteLocal as int)";
   			_fMap[1].SqlColName = " Nombre";
   			_fMap[2].SqlColName = " tramite";
   			_fMap[3].SqlColName = " count(*)";

			this.SetDefaultWhere(@"solicitudfecha between @fecdesde and @fechasta
group by AgenteLocal, Nombre, tramite" );
		}

	} // end class vRepMarcasTramitesAdapter 


} // namespace Berke.DG.Adapters
#endregion vRepMarcasTramites

#region VIstaPrimera
namespace Berke.DG.Adapters
{
	public class VIstaPrimeraAdapter : ViewAdapter{
	
		public VIstaPrimeraAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marca m
JOIN expediente e
  ON m.id = e.marcaid
JOIN cliente c
  ON m.clienteid = c.id
JOIN expediente_situacion es
  ON e.id = es.expedienteid
  AND e.tramitesitid = es.tramitesitid
JOIN tramite_sit ts
  ON e.tramiteid IN (1, 2)
  AND e.tramitesitid = ts.id
  AND ts.situacionid <> 8
JOIN situacion s
  ON ts.situacionid = s.id
JOIN marcaregren mr
  ON e.id = mr.expedienteid
JOIN cpais cp
  ON c.paisid = cp.idpais
JOIN clase cl
  ON m.claseid = cl.id
JOIN tramite t
  ON e.tramiteid = t.id" );
			
   			_fMap[0].SqlColName = "e.id";
   			_fMap[1].SqlColName = " cp.descrip";
   			_fMap[2].SqlColName = " m.clienteid";
   			_fMap[3].SqlColName = " c.nombre";
   			_fMap[4].SqlColName = " s.descrip";
   			_fMap[5].SqlColName = " m.denominacion";
   			_fMap[6].SqlColName = " cl.nro";
   			_fMap[7].SqlColName = " e.actaanio";
   			_fMap[8].SqlColName = " e.actanro";
   			_fMap[9].SqlColName = " e.presentacionfecha";
   			_fMap[10].SqlColName = " dbo.GetSituacionFecha(e.expedienteid";
   			_fMap[11].SqlColName = " 4)";
   			_fMap[12].SqlColName = " t.abrev";
   			_fMap[13].SqlColName = " es.situacionfecha";
   			_fMap[14].SqlColName = " m.propietario";
   			_fMap[15].SqlColName = " m.propais";
   			_fMap[16].SqlColName = " e.tramitesitid";
   			_fMap[17].SqlColName = " mr.concesionfecha";

			this.SetDefaultWhere(@"m.nuestra = 1
AND e.presentacionfecha BETWEEN '01/02/2007' AND '02/02/2007'" );
		}

	} // end class VIstaPrimeraAdapter 


} // namespace Berke.DG.Adapters
#endregion VIstaPrimera

#region vMarcasPropTram
namespace Berke.DG.Adapters
{
	public class vMarcasPropTramAdapter : ViewAdapter{
	
		public vMarcasPropTramAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marca m
JOIN expediente e
  ON m.id = e.marcaid
JOIN cliente c
  ON m.clienteid = c.id
JOIN expediente_situacion es
  ON e.id = es.expedienteid
  AND e.tramitesitid = es.tramitesitid
JOIN tramite_sit ts
  ON e.tramiteid IN (1, 2)
  AND e.tramitesitid = ts.id
  AND ts.situacionid <> 8
JOIN situacion s
  ON ts.situacionid = s.id
JOIN marcaregren mr
  ON e.id = mr.expedienteid
JOIN cpais cp
  ON c.paisid = cp.idpais
JOIN clase cl
  ON m.claseid = cl.id
JOIN tramite t
  ON e.tramiteid = t.id" );
			
   			_fMap[0].SqlColName = "e.id";
   			_fMap[1].SqlColName = " cp.paisalfa";
   			_fMap[2].SqlColName = " m.clienteid";
   			_fMap[3].SqlColName = " c.nombre";
   			_fMap[4].SqlColName = " s.descrip";
   			_fMap[5].SqlColName = " m.denominacion";
   			_fMap[6].SqlColName = " cl.nro";
   			_fMap[7].SqlColName = " e.actaanio";
   			_fMap[8].SqlColName = " e.actanro";
   			_fMap[9].SqlColName = " e.presentacionfecha";
   			_fMap[10].SqlColName = " dbo.GetSituacionFecha(e.expedienteid, 4)";
   			_fMap[11].SqlColName = "t.abrev";
   			_fMap[12].SqlColName = "es.situacionfecha";
   			_fMap[13].SqlColName = "m.propietario";
   			_fMap[14].SqlColName = "m.propais";
   			_fMap[15].SqlColName = "e.tramitesitid";
   			_fMap[16].SqlColName = "mr.concesionfecha";
   			_fMap[17].SqlColName = "mr.registronro";
   			_fMap[18].SqlColName = "c.multiple";
   			_fMap[19].SqlColName = "e.tramiteid";

			this.SetDefaultWhere(@"m.nuestra = 1
AND e.presentacionfecha BETWEEN @fecdesde  AND @fechasta" );
		}

	} // end class vMarcasPropTramAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcasPropTram

#region vRenovadoPorOtro
namespace Berke.DG.Adapters
{
	public class vRenovadoPorOtroAdapter : ViewAdapter{
	
		public vRenovadoPorOtroAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join expediente_instruccion expInst
on (e.id = expInst.expedienteid)

join InstruccionTipo it 
on (expInst.InstruccionTipoID = it.id)

left join marcaregren mr 
on (e.marcaregrenid = mr.id)

join expediente expHijo
on (expHijo.expedienteid = e.id)

left join marcaregren mrHijo 
on (mrHijo.id = expHijo.marcaregrenid )

join CAgenteLocal ag
on (ag.idagloc = exphijo.agentelocalid and
    ag.nuestro = 0 )

join CAgenteLocal ag2
on (ag2.idagloc = e.agentelocalid)

join marca m
on (e.marcaid = m.id)

join clase cl
on (m.claseid = cl.id)

join marcatipo mt
on (m.marcatipoid = mt.id)

join marca mhijo
on (exphijo.marcaid = mhijo.id)

left join Correspondencia c 
on (expInst.CorrespondenciaID = c.ID)

left join cliente cli
on (cli.id = m.clienteid)" );
			
   			_fMap[0].SqlColName = "expHijo.id";
   			_fMap[1].SqlColName = " it.Descrip";
   			_fMap[2].SqlColName = " expInst.Fecha";
   			_fMap[3].SqlColName = " expHijo.PresentacionFecha";
   			_fMap[4].SqlColName = " expHijo.ActaNro";
   			_fMap[5].SqlColName = " expHijo.ActaAnio";
   			_fMap[6].SqlColName = " mr.RegistroNro";
   			_fMap[7].SqlColName = " cl.nro";
   			_fMap[8].SqlColName = " mt.Abrev";
   			_fMap[9].SqlColName = " m.Denominacion";
   			_fMap[10].SqlColName = " m.Nuestra";
   			_fMap[11].SqlColName = " m.id";
   			_fMap[12].SqlColName = " m.Vigilada";
   			_fMap[13].SqlColName = " m.clienteID";
   			_fMap[14].SqlColName = " cli.nombre";
   			_fMap[15].SqlColName = " mr.Vencimientofecha";
   			_fMap[16].SqlColName = " expInst.Obs";
   			_fMap[17].SqlColName = " e.id";
   			_fMap[18].SqlColName = " expInst.obs";
   			_fMap[19].SqlColName = " ag2.nombre";
   			_fMap[20].SqlColName = " ag.idagloc";
   			_fMap[21].SqlColName = " ag.nombre";
   			_fMap[22].SqlColName = " mhijo.Propietario";
   			_fMap[23].SqlColName = " mhijo.ProPais";
   			_fMap[24].SqlColName = " mhijo.denominacion";

			this.SetDefaultWhere(@"expInst.InstruccionTipoID = 4
and expHijo.tramiteid = 2" );
		}

	} // end class vRenovadoPorOtroAdapter 


} // namespace Berke.DG.Adapters
#endregion vRenovadoPorOtro

#region vPoder
namespace Berke.DG.Adapters
{
	public class vPoderAdapter : ViewAdapter{
	
		public vPoderAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Poder" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " ID";
   			_fMap[2].SqlColName = " PoderInscID";
   			_fMap[3].SqlColName = " PoderTipoID";
   			_fMap[4].SqlColName = " ExpedienteID";
   			_fMap[5].SqlColName = " PaisID";
   			_fMap[6].SqlColName = " Concepto";
   			_fMap[7].SqlColName = " Denominacion";
   			_fMap[8].SqlColName = " Domicilio";
   			_fMap[9].SqlColName = " InscripcionNro";
   			_fMap[10].SqlColName = " InscripcionAnio";
   			_fMap[11].SqlColName = " AltaFecha";
   			_fMap[12].SqlColName = " FechaModificacion";
   			_fMap[13].SqlColName = " AgenteLocalID";
   			_fMap[14].SqlColName = " Nuestra";
   			_fMap[15].SqlColName = " LegNot";
   			_fMap[16].SqlColName = " LegCons";
   			_fMap[17].SqlColName = " LegRelExt";
   			_fMap[18].SqlColName = " Obs";
   			_fMap[19].SqlColName = " Inscripcion";
   			_fMap[20].SqlColName = " ActaNro";
   			_fMap[21].SqlColName = " ActaAnio";
   			_fMap[22].SqlColName = " Original";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoder

#region vPoderDatos
namespace Berke.DG.Adapters
{
	public class vPoderDatosAdapter : ViewAdapter{
	
		public vPoderDatosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Poder p
LEFT JOIN CPais  cp
ON (p.PaisID = cp.idpais)" );
			
   			_fMap[0].SqlColName = "p.ID";
   			_fMap[1].SqlColName = " p.ID";
   			_fMap[2].SqlColName = " p.inscripcion";
   			_fMap[3].SqlColName = " p.PoderInscID";
   			_fMap[4].SqlColName = " p.ExpedienteID";
   			_fMap[5].SqlColName = " p.PaisID";
   			_fMap[6].SqlColName = " p.Concepto";
   			_fMap[7].SqlColName = " p.Denominacion";
   			_fMap[8].SqlColName = " p.Domicilio";
   			_fMap[9].SqlColName = " p.InscripcionNro";
   			_fMap[10].SqlColName = " p.InscripcionAnio";
   			_fMap[11].SqlColName = " p.AltaFecha";
   			_fMap[12].SqlColName = " p.FechaModificacion";
   			_fMap[13].SqlColName = " p.Nuestra";
   			_fMap[14].SqlColName = " p.LegNot";
   			_fMap[15].SqlColName = " p.LegCons";
   			_fMap[16].SqlColName = " p.LegRelExt";
   			_fMap[17].SqlColName = " p.Obs";
   			_fMap[18].SqlColName = " p.Inscripcion";
   			_fMap[19].SqlColName = " p.ActaNro";
   			_fMap[20].SqlColName = " p.ActaAnio";
   			_fMap[21].SqlColName = " p.Original";
   			_fMap[22].SqlColName = " cp.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPoderDatosAdapter 


} // namespace Berke.DG.Adapters
#endregion vPoderDatos

#region vVerMerge
namespace Berke.DG.Adapters
{
	public class vVerMergeAdapter : ViewAdapter{
	
		public vVerMergeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join [merge] m
on (me.mergeid = m.id)
left join mergedoc mdoc
on (me.mergedocid = mdoc.id)
left join usuario u
on (u.id = mdoc.funcionarioid)" );
			
   			_fMap[0].SqlColName = "me.expedienteid";
   			_fMap[1].SqlColName = " me.mergeid";
   			_fMap[2].SqlColName = " m.descrip";
   			_fMap[3].SqlColName = " me.mergedocid";
   			_fMap[4].SqlColName = " me.generado";
   			_fMap[5].SqlColName = " me.tramiteid";
   			_fMap[6].SqlColName = " mdoc.fecha";
   			_fMap[7].SqlColName = " mdoc.contenido";
   			_fMap[8].SqlColName = " me.fecha";
   			_fMap[9].SqlColName = " u.nick";

			this.SetDefaultWhere(@"" );
		}

	} // end class vVerMergeAdapter 


} // namespace Berke.DG.Adapters
#endregion vVerMerge

#region vVerMergeAvisos
namespace Berke.DG.Adapters
{
	public class vVerMergeAvisosAdapter : ViewAdapter{
	
		public vVerMergeAvisosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"mergevencimientodet det
join mergevencimientocab cab

on (det.mergevencimientocabid = cab.id)

join mergedoc mdoc
on (cab.mergedocid = mdoc.id)

join [merge] m
on (m.id = cab.mergeid)

left join usuario u
on (u.id = mdoc.funcionarioid)" );
			
   			_fMap[0].SqlColName = "det.expedienteid";
   			_fMap[1].SqlColName = " cab.mergeid";
   			_fMap[2].SqlColName = " cab.mergedocid";
   			_fMap[3].SqlColName = " cab.enviomodo";
   			_fMap[4].SqlColName = " cab.enviofecha";
   			_fMap[5].SqlColName = " cab.clienteid";
   			_fMap[6].SqlColName = " m.descrip";
   			_fMap[7].SqlColName = " mdoc.contenido";
   			_fMap[8].SqlColName = " mdoc.fecha";
   			_fMap[9].SqlColName = " u.nick";

			this.SetDefaultWhere(@"" );
		}

	} // end class vVerMergeAvisosAdapter 


} // namespace Berke.DG.Adapters
#endregion vVerMergeAvisos

#region vClientesXTramite
namespace Berke.DG.Adapters
{
	public class vClientesXTramiteAdapter : ViewAdapter{
	
		public vClientesXTramiteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"cliente c
join clienteXTramite ct
on (c.id = ct.clienteID)
join tramite tr
on (ct.tramiteid = tr.id)" );
			
   			_fMap[0].SqlColName = "c.id";
   			_fMap[1].SqlColName = " c.nombre";
   			_fMap[2].SqlColName = " ct.tramiteid";
   			_fMap[3].SqlColName = " ct.clientemultipleid";
   			_fMap[4].SqlColName = " tr.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClientesXTramiteAdapter 


} // namespace Berke.DG.Adapters
#endregion vClientesXTramite

#region vConsCliente
namespace Berke.DG.Adapters
{
	public class vConsClienteAdapter : ViewAdapter{
	
		public vConsClienteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"cliente c
left join cpais p
on (c.paisid = p.idpais)

left join cciudad ciu
on (p.idpais = ciu.idpais and
    c.ciudadid = ciu.idciudad)

left join clienteXVia cvia
on (c.id = cvia.clienteid)

left join cviacom cvcom
on (cvia.viaid = cvcom.idvia)

left join atencion at
on (c.id = at.clienteid)

left join area a
on (at.areaid = a.id)

left join atencionXvia atv
on (at.id = atv.atencionid)

left join cviacom cvcom2
on (atv.viaid = cvcom2.idvia)

left join clienteXUsuario cxusu
on (c.id = cxusu.clienteid)

left join usuario u
on (cxusu.usuarioid = u.id)" );
			
   			_fMap[0].SqlColName = "c.id";
   			_fMap[1].SqlColName = " c.nombre";
   			_fMap[2].SqlColName = " c.ddi";
   			_fMap[3].SqlColName = " c.direccion";
   			_fMap[4].SqlColName = " c.correo";
   			_fMap[5].SqlColName = " c.activo";
   			_fMap[6].SqlColName = " c.multiple";
   			_fMap[7].SqlColName = " c.inubicable";
   			_fMap[8].SqlColName = " c.obs";
   			_fMap[9].SqlColName = " c.pgeneral";
   			_fMap[10].SqlColName = " c.pintelectual";
   			_fMap[11].SqlColName = " p.paisalfa";
   			_fMap[12].SqlColName = " p.paistel";
   			_fMap[13].SqlColName = " ciu.codciudad";
   			_fMap[14].SqlColName = " ciu.nomciudad";
   			_fMap[15].SqlColName = " cvcom.idvia";
   			_fMap[16].SqlColName = " cvcom.descrip";
   			_fMap[17].SqlColName = " cvia.descrip";
   			_fMap[18].SqlColName = " at.nombre";
   			_fMap[19].SqlColName = " a.id";
   			_fMap[20].SqlColName = " a.descrip";
   			_fMap[21].SqlColName = " cvcom2.idvia";
   			_fMap[22].SqlColName = " cvcom2.descrip";
   			_fMap[23].SqlColName = " atv.descrip";
   			_fMap[24].SqlColName = " u.nombre";
   			_fMap[25].SqlColName = " u.usuario";

			this.SetDefaultWhere(@"" );
		}

	} // end class vConsClienteAdapter 


} // namespace Berke.DG.Adapters
#endregion vConsCliente

#region vCorrespNro
namespace Berke.DG.Adapters
{
	public class vCorrespNroAdapter : ViewAdapter{
	
		public vCorrespNroAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"CorrespNro" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " nrodesde";
   			_fMap[2].SqlColName = " nrohasta";
   			_fMap[3].SqlColName = " vigente";
   			_fMap[4].SqlColName = " fechains";
   			_fMap[5].SqlColName = " funcionarioID";
   			_fMap[6].SqlColName = " IDArea";

			this.SetDefaultWhere(@"@nro between nrodesde and nrohasta" );
		}

	} // end class vCorrespNroAdapter 


} // namespace Berke.DG.Adapters
#endregion vCorrespNro

#region vExpeService
namespace Berke.DG.Adapters
{
	public class vExpeServiceAdapter : ViewAdapter{
	
		public vExpeServiceAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join marca m
on (e.marcaid = m.id)
join ordentrabajo ot
on (e.ordentrabajoid = ot.id)
join cagentelocal ag
on (e.agentelocalid = ag.idagloc)
join marcatipo mt
on (m.marcatipoid = mt.id)
join clase cl
on (m.claseID = cl.ID)" );
			
   			_fMap[0].SqlColName = "e.ID";
   			_fMap[1].SqlColName = " e.agentelocalid";
   			_fMap[2].SqlColName = " e.actanro";
   			_fMap[3].SqlColName = " e.actaanio";
   			_fMap[4].SqlColName = " e.presentacionFecha";
   			_fMap[5].SqlColName = " e.Sustituida";
   			_fMap[6].SqlColName = " m.ID";
   			_fMap[7].SqlColName = " m.denominacion";
   			_fMap[8].SqlColName = " m.nuestra";
   			_fMap[9].SqlColName = " m.vigente";
   			_fMap[10].SqlColName = " m.Propietario";
   			_fMap[11].SqlColName = " m.ProDir";
   			_fMap[12].SqlColName = " m.ProPais";
   			_fMap[13].SqlColName = " m.claseID";
   			_fMap[14].SqlColName = " m.clienteID";
   			_fMap[15].SqlColName = " mt.ID";
   			_fMap[16].SqlColName = " mt.Abrev";
   			_fMap[17].SqlColName = " mt.Descrip";
   			_fMap[18].SqlColName = " ot.id";
   			_fMap[19].SqlColName = " ot.nro";
   			_fMap[20].SqlColName = " ot.anio";
   			_fMap[21].SqlColName = " ag.nromatricula";
   			_fMap[22].SqlColName = " ag.nuestro";
   			_fMap[23].SqlColName = " cl.nro";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpeServiceAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeService

#region vMarcaClientePropietario
namespace Berke.DG.Adapters
{
	public class vMarcaClientePropietarioAdapter : ViewAdapter{
	
		public vMarcaClientePropietarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Marca LEFT OUTER JOIN
 dbo.Clase ON dbo.Marca.ClaseID = dbo.Clase.ID 
LEFT OUTER JOIN
 dbo.Expediente ON dbo.Marca.ExpedienteVigenteID = dbo.Expediente.ID 
LEFT OUTER JOIN
 dbo.MarcaRegRen ON dbo.Marca.MarcaRegRenID = dbo.MarcaRegRen.ID 
LEFT OUTER JOIN
 dbo.Cliente ON dbo.Marca.ClienteID = dbo.Cliente.ID 
LEFT OUTER JOIN
 dbo.PropietarioXMarca ON dbo.Marca.ID = PropietarioXMarca.MarcaID 
LEFT OUTER JOIN
 dbo.Propietario ON dbo.PropietarioXMarca.PropietarioID = dbo.Propietario.ID" );
			
   			_fMap[0].SqlColName = "dbo.Marca.ID";
   			_fMap[1].SqlColName = " dbo.Marca.Denominacion";
   			_fMap[2].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[3].SqlColName = " dbo.Expediente.ID";
   			_fMap[4].SqlColName = " dbo.Expediente.Acta";
   			_fMap[5].SqlColName = " dbo.MarcaRegRen.RegistroNro";
   			_fMap[6].SqlColName = " dbo.Cliente.ID";
   			_fMap[7].SqlColName = " dbo.Propietario.ID";
   			_fMap[8].SqlColName = " dbo.Marca.Propietario";
   			_fMap[9].SqlColName = " dbo.Cliente.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaClientePropietarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaClientePropietario

#region vRenovacionMarca
namespace Berke.DG.Adapters
{
	public class vRenovacionMarcaAdapter : ViewAdapter{
	
		public vRenovacionMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Marca mar 
  LEFT OUTER JOIN dbo.Expediente exp ON mar.ExpedienteVigenteID = exp.ID
  LEFT OUTER JOIN dbo.PropietarioXMarca mp ON mar.ID = mp.MarcaID 
  LEFT OUTER JOIN dbo.Propietario p ON p.ID= mp.PropietarioID 
  LEFT OUTER JOIN dbo.MarcaRegRen regren ON exp.MarcaRegRenID = regren.ID
  LEFT OUTER JOIN dbo.Clase clase ON mar.ClaseID = clase.ID" );
			
   			_fMap[0].SqlColName = "MarcaID";
   			_fMap[1].SqlColName = "Denominacion";
   			_fMap[2].SqlColName = "DenominacionClave";
   			_fMap[3].SqlColName = "ClaseID";
   			_fMap[4].SqlColName = "MarcaAnteriorID";
   			_fMap[5].SqlColName = "Limitada";
   			_fMap[6].SqlColName = "DesEspLim";
   			_fMap[7].SqlColName = "ExpedienteID";
   			_fMap[8].SqlColName = "ActaNro";
   			_fMap[9].SqlColName = "ActaAnio";
   			_fMap[10].SqlColName = "Vencimiento";
   			_fMap[11].SqlColName = "RegistroNro";
   			_fMap[12].SqlColName = "ClaseAntID";
   			_fMap[13].SqlColName = "ClaseDescrip";
   			_fMap[14].SqlColName = "DesEsp";
   			_fMap[15].SqlColName = "ClaseEdicionID";
   			_fMap[16].SqlColName = "ClaseAntDescrip";
   			_fMap[17].SqlColName = "ConcesionFecha";
   			_fMap[18].SqlColName = "MarcaTipoID";
   			_fMap[19].SqlColName = "Referencia";
   			_fMap[20].SqlColName = "LogotipoID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vRenovacionMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vRenovacionMarca

#region vBoletinDep
namespace Berke.DG.Adapters
{
	public class vBoletinDepAdapter : ViewAdapter{
	
		public vBoletinDepAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"BoletinDet" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " BoletinID";
   			_fMap[2].SqlColName = " SolicitudFecha";
   			_fMap[3].SqlColName = " ExpNro";
   			_fMap[4].SqlColName = " ExpAnio";
   			_fMap[5].SqlColName = " Clase";
   			_fMap[6].SqlColName = " MarcaTipo";
   			_fMap[7].SqlColName = " Tramite";
   			_fMap[8].SqlColName = " Denominacion";
   			_fMap[9].SqlColName = " Propietario";
   			_fMap[10].SqlColName = " Pais";
   			_fMap[11].SqlColName = " AgenteLocal";
   			_fMap[12].SqlColName = " RefNro";
   			_fMap[13].SqlColName = " RefAnio";
   			_fMap[14].SqlColName = " RefRegNro";
   			_fMap[15].SqlColName = " RefRegAnio";
   			_fMap[16].SqlColName = " Obs";
   			_fMap[17].SqlColName = " Enlazado";
   			_fMap[18].SqlColName = " Incorporado";
   			_fMap[19].SqlColName = " ExpedienteID";
   			_fMap[20].SqlColName = " BolAnio";
   			_fMap[21].SqlColName = " BolNro";
   			_fMap[22].SqlColName = " Importado";
   			_fMap[23].SqlColName = " Completo";

			this.SetDefaultWhere(@"ExpedienteID is null AND 
Solicitudfecha <= @fechasolicitud AND 
ExpNro < @actanro" );
		}

	} // end class vBoletinDepAdapter 


} // namespace Berke.DG.Adapters
#endregion vBoletinDep

#region vMarcaCambioSit
namespace Berke.DG.Adapters
{
	public class vMarcaCambioSitAdapter : ViewAdapter{
	
		public vMarcaCambioSitAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Usuario 
RIGHT OUTER JOIN dbo.Expediente 
INNER JOIN       dbo.Expediente_Situacion 
      ON dbo.Expediente.ID = dbo.Expediente_Situacion.ExpedienteID 
INNER JOIN
             dbo.Tramite_Sit ON dbo.Expediente_Situacion.TramiteSitID = dbo.Tramite_Sit.ID 
INNER JOIN
             dbo.Situacion ON dbo.Tramite_Sit.SituacionID = dbo.Situacion.ID 
INNER JOIN
             dbo.Tramite ON dbo.Tramite_Sit.TramiteID = dbo.Tramite.ID 
INNER JOIN
             dbo.Marca ON dbo.Expediente.MarcaID = dbo.Marca.ID 
INNER JOIN
             dbo.Clase ON dbo.Marca.ClaseID = dbo.Clase.ID ON dbo.Usuario.ID = dbo.Expediente_Situacion.FuncionarioID 
LEFT OUTER JOIN
             dbo.OrdenTrabajo ON dbo.Expediente.OrdenTrabajoID = dbo.OrdenTrabajo.ID 
LEFT OUTER JOIN
             dbo.InstruccionTipo 
INNER JOIN
             dbo.Expediente_Instruccion ON dbo.InstruccionTipo.ID = dbo.Expediente_Instruccion.InstruccionTipoID 
ON 
             dbo.Expediente.ID = dbo.Expediente_Instruccion.ExpedienteID 
LEFT OUTER JOIN
             dbo.MarcaRegRen RegRen_Mar ON dbo.Marca.MarcaRegRenID = RegRen_Mar.ID
LEFT JOIN cliente cl
on ( expediente.clienteid = cl.id)" );
			
   			_fMap[0].SqlColName = "dbo.Expediente_Situacion.ID";
   			_fMap[1].SqlColName = " dbo.Marca.Denominacion";
   			_fMap[2].SqlColName = " dbo.Marca.Nuestra";
   			_fMap[3].SqlColName = " dbo.Marca.Vigilada";
   			_fMap[4].SqlColName = " dbo.Tramite.Descrip";
   			_fMap[5].SqlColName = " dbo.Situacion.Descrip";
   			_fMap[6].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[7].SqlColName = " dbo.Expediente_Situacion.AltaFecha";
   			_fMap[8].SqlColName = " dbo.Expediente.ActaAnio";
   			_fMap[9].SqlColName = " dbo.Expediente.ActaNro";
   			_fMap[10].SqlColName = " dbo.Expediente_Situacion.ExpedienteID";
   			_fMap[11].SqlColName = " dbo.Expediente_Situacion.Obs";
   			_fMap[12].SqlColName = " dbo.Expediente.Acta";
   			_fMap[13].SqlColName = " dbo.Expediente.TramiteID";
   			_fMap[14].SqlColName = " dbo.Expediente.AgenteLocalID";
   			_fMap[15].SqlColName = " dbo.Expediente.ClienteID";
   			_fMap[16].SqlColName = " dbo.Expediente_Situacion.TramiteSitID";
   			_fMap[17].SqlColName = " dbo.Expediente.TramiteSitID";
   			_fMap[18].SqlColName = " dbo.Expediente_Situacion.SituacionFecha";
   			_fMap[19].SqlColName = " dbo.Expediente_Situacion.VencimientoFecha";
   			_fMap[20].SqlColName = " RegRen_Mar.RegistroNro";
   			_fMap[21].SqlColName = " RegRen_Mar.RegistroAnio";
   			_fMap[22].SqlColName = " RegRen_Mar.ConcesionFecha";
   			_fMap[23].SqlColName = " RegRen_Mar.Vigente";
   			_fMap[24].SqlColName = " RegRen_Mar.Registro";
   			_fMap[25].SqlColName = " RegRen_Mar.VencimientoFecha";
   			_fMap[26].SqlColName = " dbo.Situacion.Abrev";
   			_fMap[27].SqlColName = " dbo.Situacion.EnTramite";
   			_fMap[28].SqlColName = " dbo.Tramite.Abrev";
   			_fMap[29].SqlColName = " dbo.Clase.Nro";
   			_fMap[30].SqlColName = " dbo.Expediente.Bib";
   			_fMap[31].SqlColName = " dbo.Expediente.Exp";
   			_fMap[32].SqlColName = " dbo.Expediente.PublicPag";
   			_fMap[33].SqlColName = " dbo.Expediente.PublicAnio";
   			_fMap[34].SqlColName = " dbo.InstruccionTipo.Abrev";
   			_fMap[35].SqlColName = " dbo.Expediente_Instruccion.FuncionarioID";
   			_fMap[36].SqlColName = " dbo.OrdenTrabajo.OrdenTrabajo";
   			_fMap[37].SqlColName = " dbo.Usuario.Usuario";
   			_fMap[38].SqlColName = " dbo.Usuario.Nick";
   			_fMap[39].SqlColName = " dbo.Usuario.ID";
   			_fMap[40].SqlColName = " dbo.Usuario.Nombre";
   			_fMap[41].SqlColName = " dbo.Situacion.StandBy";
   			_fMap[42].SqlColName = " dbo.Expediente.Vigilada";
   			_fMap[43].SqlColName = " cl.nombre";
   			_fMap[44].SqlColName = " dbo.Expediente.StandBy";
   			_fMap[45].SqlColName = " dbo.Expediente.Nuestra";
   			_fMap[46].SqlColName = " dbo.Marca.Sustituida";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaCambioSitAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaCambioSit

#region vMarcaVencim1
namespace Berke.DG.Adapters
{
	public class vMarcaVencim1Adapter : ViewAdapter{
	
		public vMarcaVencim1Adapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente as expe 
		      INNER JOIN dbo.Marca 
                      ON (expe.MarcaID = dbo.Marca.ID)
                      INNER JOIN dbo.MarcaRegRen 
                      ON (expe.MarcaRegRenID = dbo.MarcaRegRen.ID) 
                      INNER JOIN dbo.Clase 
                      ON (dbo.Marca.ClaseID = dbo.Clase.ID)
                      INNER JOIN dbo.PropietarioXMarca 
                      ON (dbo.Marca.ID = dbo.PropietarioXMarca.MarcaID)" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " dbo.Marca.ClienteID";
   			_fMap[2].SqlColName = " dbo.Clase.Nro";
   			_fMap[3].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[4].SqlColName = " dbo.MarcaRegRen.RegistroNro";
   			_fMap[5].SqlColName = " dbo.MarcaRegRen.Vigente";
   			_fMap[6].SqlColName = " dbo.MarcaRegRen.ConcesionFecha";
   			_fMap[7].SqlColName = " dbo.MarcaRegRen.VencimientoFecha";
   			_fMap[8].SqlColName = " dbo.Marca.Denominacion";
   			_fMap[9].SqlColName = " dbo.Marca.Vigilada";
   			_fMap[10].SqlColName = " dbo.Marca.Nuestra";
   			_fMap[11].SqlColName = " dbo.PropietarioXMarca.PropietarioID";
   			_fMap[12].SqlColName = " expe.TramiteID";
   			_fMap[13].SqlColName = " dbo.GetInstrucciones(expe.ID)";

			this.SetDefaultWhere(@"(dbo.MarcaRegRen.Vigente = 1) AND (dbo.Marca.Vigilada = 1)" );
		}

	} // end class vMarcaVencim1Adapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaVencim1

#region vExpeMarcaHIConf
namespace Berke.DG.Adapters
{
	public class vExpeMarcaHIConfAdapter : ViewAdapter{
	
		public vExpeMarcaHIConfAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente ExpePadre 

RIGHT OUTER JOIN

          dbo.Expediente expe ON ExpePadre.ID = expe.ExpedienteID 

LEFT OUTER JOIN

          dbo.Clase cla 

INNER JOIN

          dbo.Marca mar ON cla.ID = mar.ClaseID 

INNER JOIN

          dbo.MarcaTipo ON mar.MarcaTipoID = dbo.MarcaTipo.ID 

LEFT OUTER JOIN

          dbo.MarcaRegRen regRen_Mar ON mar.MarcaRegRenID = regRen_Mar.ID ON expe.MarcaID = mar.ID

 

LEFT OUTER JOIN

          dbo.Tramite tram ON expe.TramiteID = tram.ID 

LEFT OUTER JOIN

          dbo.Situacion sit 

INNER JOIN

          dbo.Tramite_Sit tramSit ON sit.ID = tramSit.SituacionID ON expe.TramiteSitID = tramSit.ID 

LEFT OUTER JOIN

          dbo.MarcaRegRen regRen ON expe.MarcaRegRenID = regRen.ID 

LEFT OUTER JOIN

          dbo.OrdenTrabajo ot ON expe.OrdenTrabajoID = ot.ID

LEFT JOIN CLIENTE cli

on mar.clienteid = cli.id" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.Acta";
   			_fMap[2].SqlColName = " expe.expedienteid";
   			_fMap[3].SqlColName = " regRen.Registro";
   			_fMap[4].SqlColName = " ot.OrdenTrabajo";
   			_fMap[5].SqlColName = " mar.Denominacion";
   			_fMap[6].SqlColName = " cla.DescripBreve";
   			_fMap[7].SqlColName = " cla.Nro";
   			_fMap[8].SqlColName = " tram.Descrip";
   			_fMap[9].SqlColName = " tram.Abrev";
   			_fMap[10].SqlColName = " sit.Descrip";
   			_fMap[11].SqlColName = " sit.EnTramite";
   			_fMap[12].SqlColName = " expe.TramiteID";
   			_fMap[13].SqlColName = " expe.TramiteSitID";
   			_fMap[14].SqlColName = " expe.ActaNro";
   			_fMap[15].SqlColName = " expe.ActaAnio";
   			_fMap[16].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[17].SqlColName = " mar.ClienteID";
   			_fMap[18].SqlColName = " expe.AgenteLocalID";
   			_fMap[19].SqlColName = " expe.PresentacionFecha";
   			_fMap[20].SqlColName = " expe.AltaFecha";
   			_fMap[21].SqlColName = " mar.Propietario";
   			_fMap[22].SqlColName = " mar.ProPais";
   			_fMap[23].SqlColName = " mar.ClaseID";
   			_fMap[24].SqlColName = " ot.Nro";
   			_fMap[25].SqlColName = " ot.Anio";
   			_fMap[26].SqlColName = " regRen.RegistroNro";
   			_fMap[27].SqlColName = " regRen.RegistroAnio";
   			_fMap[28].SqlColName = " expe.MarcaID";
   			_fMap[29].SqlColName = " expe.Label";
   			_fMap[30].SqlColName = " expe.Nuestra";
   			_fMap[31].SqlColName = " mar.Nuestra";
   			_fMap[32].SqlColName = " mar.Vigente";
   			_fMap[33].SqlColName = " mar.Vigilada";
   			_fMap[34].SqlColName = " mar.Sustituida";
   			_fMap[35].SqlColName = " mar.StandBy";
   			_fMap[36].SqlColName = " expe.VencimientoFecha";
   			_fMap[37].SqlColName = " regRen_Mar.VencimientoFecha";
   			_fMap[38].SqlColName = " regRen_Mar.RegistroNro";
   			_fMap[39].SqlColName = " regRen_Mar.RegistroAnio";
   			_fMap[40].SqlColName = " regRen_Mar.ConcesionFecha";
   			_fMap[41].SqlColName = " regRen_Mar.Vigente";
   			_fMap[42].SqlColName = " regRen.Vigente";
   			_fMap[43].SqlColName = " ExpePadre.Acta";
   			_fMap[44].SqlColName = " mar.DenominacionClave";
   			_fMap[45].SqlColName = " dbo.MarcaTipo.Abrev";
   			_fMap[46].SqlColName = " mar.ClaseDescripEsp";
   			_fMap[47].SqlColName = " mar.Limitada";
   			_fMap[48].SqlColName = " mar.LogotipoID";
   			_fMap[49].SqlColName = " cli.nombre";

			this.SetDefaultWhere(@"(tram.ProcesoID = 1)" );
		}

	} // end class vExpeMarcaHIConfAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeMarcaHIConf

#region vExpeMarcaPub
namespace Berke.DG.Adapters
{
	public class vExpeMarcaPubAdapter : ViewAdapter{
	
		public vExpeMarcaPubAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente ExpePadre 
RIGHT OUTER JOIN
          dbo.Expediente expe ON ExpePadre.ID = expe.ExpedienteID 
LEFT OUTER JOIN
          dbo.Clase cla 
INNER JOIN
          dbo.Marca mar ON cla.ID = mar.ClaseID 
INNER JOIN
          dbo.MarcaTipo ON mar.MarcaTipoID = dbo.MarcaTipo.ID 
LEFT OUTER JOIN
          dbo.MarcaRegRen regRen_Mar ON mar.MarcaRegRenID = regRen_Mar.ID ON expe.MarcaID = mar.ID

                        
LEFT OUTER JOIN  dbo.propietarioxmarca pdd
          ON mar.id = pdd.marcaid 

LEFT OUTER JOIN
          dbo.Tramite tram ON expe.TramiteID = tram.ID 
LEFT OUTER JOIN
          dbo.Situacion sit 
INNER JOIN
          dbo.Tramite_Sit tramSit ON sit.ID = tramSit.SituacionID ON expe.TramiteSitID = tramSit.ID 
LEFT OUTER JOIN
          dbo.MarcaRegRen regRen ON expe.MarcaRegRenID = regRen.ID 
LEFT OUTER JOIN
          dbo.OrdenTrabajo ot ON expe.OrdenTrabajoID = ot.ID
LEFT JOIN CLIENTE cli
on mar.clienteid = cli.id
LEFT JOIN dbo.Expediente_Situacion expesitu
	ON expesitu.expedienteID = expe.ID" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.Acta";
   			_fMap[2].SqlColName = " expe.expedienteid";
   			_fMap[3].SqlColName = " regRen.Registro";
   			_fMap[4].SqlColName = " ot.OrdenTrabajo";
   			_fMap[5].SqlColName = " mar.Denominacion";
   			_fMap[6].SqlColName = " cla.DescripBreve";
   			_fMap[7].SqlColName = " cla.Nro";
   			_fMap[8].SqlColName = " tram.Descrip";
   			_fMap[9].SqlColName = " tram.Abrev";
   			_fMap[10].SqlColName = " sit.Descrip";
   			_fMap[11].SqlColName = " sit.EnTramite";
   			_fMap[12].SqlColName = " expe.TramiteID";
   			_fMap[13].SqlColName = " expe.TramiteSitID";
   			_fMap[14].SqlColName = " expe.ActaNro";
   			_fMap[15].SqlColName = " expe.ActaAnio";
   			_fMap[16].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[17].SqlColName = " mar.ClienteID";
   			_fMap[18].SqlColName = " expe.AgenteLocalID";
   			_fMap[19].SqlColName = " expe.PresentacionFecha";
   			_fMap[20].SqlColName = " expe.AltaFecha";
   			_fMap[21].SqlColName = " pdd.PropietarioID";
   			_fMap[22].SqlColName = " mar.Propietario";
   			_fMap[23].SqlColName = " mar.ProPais";
   			_fMap[24].SqlColName = " mar.ClaseID";
   			_fMap[25].SqlColName = " ot.Nro";
   			_fMap[26].SqlColName = " ot.Anio";
   			_fMap[27].SqlColName = " regRen.RegistroNro";
   			_fMap[28].SqlColName = " regRen.RegistroAnio";
   			_fMap[29].SqlColName = " expe.MarcaID";
   			_fMap[30].SqlColName = " expe.Label";
   			_fMap[31].SqlColName = " expe.Nuestra";
   			_fMap[32].SqlColName = " expe.PublicPag";
   			_fMap[33].SqlColName = " expe.PublicAnio";
   			_fMap[34].SqlColName = " mar.Nuestra";
   			_fMap[35].SqlColName = " mar.Vigente";
   			_fMap[36].SqlColName = " mar.Vigilada";
   			_fMap[37].SqlColName = " mar.Sustituida";
   			_fMap[38].SqlColName = " mar.StandBy";
   			_fMap[39].SqlColName = " expe.VencimientoFecha";
   			_fMap[40].SqlColName = " regRen_Mar.VencimientoFecha";
   			_fMap[41].SqlColName = " regRen_Mar.RegistroNro";
   			_fMap[42].SqlColName = " regRen_Mar.RegistroAnio";
   			_fMap[43].SqlColName = " regRen_Mar.ConcesionFecha";
   			_fMap[44].SqlColName = " regRen_Mar.Vigente";
   			_fMap[45].SqlColName = " regRen.Vigente";
   			_fMap[46].SqlColName = " ExpePadre.Acta";
   			_fMap[47].SqlColName = " mar.DenominacionClave";
   			_fMap[48].SqlColName = " dbo.MarcaTipo.Abrev";
   			_fMap[49].SqlColName = " mar.ClaseDescripEsp";
   			_fMap[50].SqlColName = " mar.Limitada";
   			_fMap[51].SqlColName = " mar.LogotipoID";
   			_fMap[52].SqlColName = " cli.nombre";
   			_fMap[53].SqlColName = " expesitu.TramiteSitID";
   			_fMap[54].SqlColName = " expesitu.SituacionFecha";
   			_fMap[55].SqlColName = " expesitu.VencimientoFecha";
   			_fMap[56].SqlColName = " expe.DiarioID";
   			_fMap[57].SqlColName = " expe.PublicPag";
   			_fMap[58].SqlColName = " expe.PublicAnio";

			this.SetDefaultWhere(@"(tram.ProcesoID = 1)" );
		}

	} // end class vExpeMarcaPubAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeMarcaPub

#region vOtMarca
namespace Berke.DG.Adapters
{
	public class vOtMarcaAdapter : ViewAdapter{
	
		public vOtMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Tramite_Sit trmSit INNER JOIN
  dbo.Tramite trm 
      ON trmSit.TramiteID = trm.ID INNER JOIN

  dbo.Situacion sit 
      ON trmSit.SituacionID = sit.ID RIGHT OUTER JOIN

  dbo.Expediente exp 
      ON trmSit.ID = exp.TramiteSitID LEFT OUTER JOIN

  dbo.Marca mar 
      ON exp.MarcaID = mar.ID LEFT OUTER JOIN

  dbo.MarcaRegRen regRen 
      ON exp.ID = regRen.ExpedienteID RIGHT OUTER JOIN

  dbo.OrdenTrabajo ot 
      ON exp.OrdenTrabajoID = ot.ID

  left join dbo.cliente cli on exp.clienteid = cli.id
  left join dbo.Correspondencia corr
     on ot.correspondenciaID = corr.id" );
			
   			_fMap[0].SqlColName = "ot.ID";
   			_fMap[1].SqlColName = " ot.ClienteID";
   			_fMap[2].SqlColName = " ot.FuncionarioID";
   			_fMap[3].SqlColName = " ot.TrabajoTipoID";
   			_fMap[4].SqlColName = " ot.Nro";
   			_fMap[5].SqlColName = " ot.Anio";
   			_fMap[6].SqlColName = " ot.OrdenTrabajo";
   			_fMap[7].SqlColName = " ot.Facturable";
   			_fMap[8].SqlColName = " ot.AltaFecha";
   			_fMap[9].SqlColName = " ot.Obs";
   			_fMap[10].SqlColName = " exp.ActaNro";
   			_fMap[11].SqlColName = " exp.ActaAnio";
   			_fMap[12].SqlColName = " exp.Acta";
   			_fMap[13].SqlColName = " regRen.RegistroNro";
   			_fMap[14].SqlColName = " regRen.RegistroAnio";
   			_fMap[15].SqlColName = " regRen.Registro";
   			_fMap[16].SqlColName = " mar.ID";
   			_fMap[17].SqlColName = " mar.Denominacion";
   			_fMap[18].SqlColName = " mar.MarcaTipoID";
   			_fMap[19].SqlColName = " mar.ClaseID";
   			_fMap[20].SqlColName = " trmSit.TramiteID";
   			_fMap[21].SqlColName = " trmSit.SituacionID";
   			_fMap[22].SqlColName = " trm.Descrip";
   			_fMap[23].SqlColName = " trm.Abrev";
   			_fMap[24].SqlColName = " sit.Descrip";
   			_fMap[25].SqlColName = " sit.Abrev";
   			_fMap[26].SqlColName = " exp.ClienteID";
   			_fMap[27].SqlColName = " cli.nombre";
   			_fMap[28].SqlColName = " corr.nro";
   			_fMap[29].SqlColName = " corr.anio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vOtMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vOtMarca

#region estad_tramites_realizados
namespace Berke.DG.Adapters
{
	public class estad_tramites_realizadosAdapter : ViewAdapter{
	
		public estad_tramites_realizadosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join ordentrabajo ot 
on (ot.id = e.ordentrabajoid)
join tramite tr
on (e.tramiteid= tr.id)" );
			
   			_fMap[0].SqlColName = "tr.id";
   			_fMap[1].SqlColName = " tr.abrev";
   			_fMap[2].SqlColName = " count(*)";

			this.SetDefaultWhere(@"datepart(year,ot.altafecha)= @anho
and nuestra = @nuestra
group by tr.id, tr.abrev 
order by tr.id" );
		}

	} // end class estad_tramites_realizadosAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_tramites_realizados

#region estad_tramites_anhos
namespace Berke.DG.Adapters
{
	public class estad_tramites_anhosAdapter : ViewAdapter{
	
		public estad_tramites_anhosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join ordentrabajo ot 
on (ot.id = e.ordentrabajoid)
join tramite tr
on (e.tramiteid= tr.id)" );
			
   			_fMap[0].SqlColName = "tr.id";
   			_fMap[1].SqlColName = " tr.abrev";
   			_fMap[2].SqlColName = " count(*)";
   			_fMap[3].SqlColName = " datepart(year,ot.altafecha)";

			this.SetDefaultWhere(@"datepart(year,ot.altafecha) between @anhoini and @anhofin
and nuestra = 1
group by tr.id, tr.abrev , datepart(year,ot.altafecha)
order by tr.id, datepart(year,ot.altafecha)" );
		}

	} // end class estad_tramites_anhosAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_tramites_anhos

#region vClientActivity
namespace Berke.DG.Adapters
{
	public class vClientActivityAdapter : ViewAdapter{
	
		public vClientActivityAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join expediente_instruccion expInst
on (e.id = expInst.expedienteid)

left join marcaregren mr 
on (e.marcaregrenid = mr.id)

join expediente expHijo
on (expHijo.expedienteid = e.id)

join marca mHijo
on (expHijo.marcaID = mHijo.ID)

join marca m
on (e.marcaid = m.id)

left join Correspondencia c 
on (expInst.CorrespondenciaID = c.ID)

join cliente cli
on (cli.id = m.clienteid)

left join cpais pa
on (cli.paisID = pa.idpais)

join propietarioxmarca propAntXmarca
on m.id = propAntXmarca.marcaID" );
			
   			_fMap[0].SqlColName = "m.clienteID";
   			_fMap[1].SqlColName = " cli.nombre";
   			_fMap[2].SqlColName = " cli.direccion";
   			_fMap[3].SqlColName = " pa.abrev";
   			_fMap[4].SqlColName = " propAntXmarca.PropietarioID";
   			_fMap[5].SqlColName = " m.Propietario";
   			_fMap[6].SqlColName = " m.ProDir";
   			_fMap[7].SqlColName = " m.ProPais";

			this.SetDefaultWhere(@"expInst.InstruccionTipoID = 4
and expHijo.tramiteid = 2
and mHijo.Vigente = 1 and mr.vencimientofecha between  @fecinicio and @fecfin" );
		}

	} // end class vClientActivityAdapter 


} // namespace Berke.DG.Adapters
#endregion vClientActivity

#region estad_mejores_clientes
namespace Berke.DG.Adapters
{
	public class estad_mejores_clientesAdapter : ViewAdapter{
	
		public estad_mejores_clientesAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join ordentrabajo ot 
on (ot.id = e.ordentrabajoid)
join tramite tr
on (e.tramiteid= tr.id and
    tr.id in (1,2)   )
join cliente cl
on (cl.id = e.clienteid)" );
			
   			_fMap[0].SqlColName = "e.clienteid";
   			_fMap[1].SqlColName = " cl.nombre";
   			_fMap[2].SqlColName = " count(*)";
   			_fMap[3].SqlColName = " datepart(year,ot.altafecha)";

			this.SetDefaultWhere(@"datepart(year,ot.altafecha) = @anhoini
and nuestra = @nuestro
group by e.clienteid , cl.nombre, datepart(year,ot.altafecha)
order by cantidad desc" );
		}

	} // end class estad_mejores_clientesAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_mejores_clientes

#region estad_renovado_por_otro
namespace Berke.DG.Adapters
{
	public class estad_renovado_por_otroAdapter : ViewAdapter{
	
		public estad_renovado_por_otroAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join expediente_instruccion expInst
on (e.id = expInst.expedienteid)

join InstruccionTipo it 
on (expInst.InstruccionTipoID = it.id)

join expediente expHijo
on (expHijo.expedienteid = e.id)" );
			
   			_fMap[0].SqlColName = "count(*)";
   			_fMap[1].SqlColName = "datepart( year, expHijo.PresentacionFecha)";

			this.SetDefaultWhere(@"expInst.InstruccionTipoID = 4
and expHijo.tramiteid = 2
and datepart( year, expHijo.PresentacionFecha) between @anhoini and @anhofin
group by  datepart (year, expHijo.PresentacionFecha) 
order by anho" );
		}

	} // end class estad_renovado_por_otroAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_renovado_por_otro

#region estad_renovados_por_berke
namespace Berke.DG.Adapters
{
	public class estad_renovados_por_berkeAdapter : ViewAdapter{
	
		public estad_renovados_por_berkeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e

join expediente expHijo
on (expHijo.expedienteid = e.id)" );
			
   			_fMap[0].SqlColName = "count(*)";
   			_fMap[1].SqlColName = "datepart( year, expHijo.PresentacionFecha)";

			this.SetDefaultWhere(@"expHijo.tramiteid = 2
and datepart( year, expHijo.PresentacionFecha) between @anhoini and @anhofin
and e.nuestra = 0
and expHijo.nuestra = 1
group by  datepart (year, expHijo.PresentacionFecha) 
order by anho" );
		}

	} // end class estad_renovados_por_berkeAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_renovados_por_berke

#region vClientActivityRenXOtro
namespace Berke.DG.Adapters
{
	public class vClientActivityRenXOtroAdapter : ViewAdapter{
	
		public vClientActivityRenXOtroAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join expediente_instruccion expInst
on (e.id = expInst.expedienteid)

join InstruccionTipo it 
on (expInst.InstruccionTipoID = it.id)

left join marcaregren mr 
on (e.marcaregrenid = mr.id)

join expediente expHijo
on (expHijo.expedienteid = e.id)

left join marcaregren mrHijo 
on (mrHijo.id = expHijo.marcaregrenid )

left join CAgenteLocal ag
on (ag.idagloc = exphijo.agentelocalid  )

join marca mhijo
on (exphijo.marcaid = mhijo.id)

join marcatipo mt
on (mhijo.marcatipoid = mt.id)

join clase cl
on (mhijo.claseid = cl.id)

join propietarioxmarca pxm
on (e.marcaID = pxm.MarcaID)
join marca m
on (e.marcaid = m.id) 

join tramite tr 
on (expHijo.tramiteid = tr.id)" );
			
   			_fMap[0].SqlColName = "expHijo.PresentacionFecha";
   			_fMap[1].SqlColName = " expHijo.ActaNro";
   			_fMap[2].SqlColName = " expHijo.ActaAnio";
   			_fMap[3].SqlColName = " cl.Nro";
   			_fMap[4].SqlColName = " mt.Abrev";
   			_fMap[5].SqlColName = " mHijo.Denominacion";
   			_fMap[6].SqlColName = " ag.nromatricula";
   			_fMap[7].SqlColName = " mrHijo.RegistroNro";
   			_fMap[8].SqlColName = " tr.Abrev";
   			_fMap[9].SqlColName = " mr.vencimientofecha";
   			_fMap[10].SqlColName = " m.ClienteID";
   			_fMap[11].SqlColName = " pxm.PropietarioID";
   			_fMap[12].SqlColName = " mhijo.Vigilada";

			this.SetDefaultWhere(@"expInst.InstruccionTipoID = 4
and expHijo.tramiteid = 2
and mhijo.Vigente     = 1" );
		}

	} // end class vClientActivityRenXOtroAdapter 


} // namespace Berke.DG.Adapters
#endregion vClientActivityRenXOtro

#region vClientActivityAgentes
namespace Berke.DG.Adapters
{
	public class vClientActivityAgentesAdapter : ViewAdapter{
	
		public vClientActivityAgentesAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e

left join marcaregren mr 
on (e.marcaregrenid = mr.id)

join marca m
on (e.marcaid = m.id)

join CAgenteLocal ag
on ( m.agentelocalid =  ag.idagloc )

join clase cl
on (m.claseid = cl.id)

join propietarioxmarca pxm
on (e.marcaID = pxm.MarcaID)" );
			
   			_fMap[0].SqlColName = "ag.idagloc";
   			_fMap[1].SqlColName = " ag.nromatricula";
   			_fMap[2].SqlColName = " ag.Nombre";
   			_fMap[3].SqlColName = " m.ClienteID";

			this.SetDefaultWhere(@"m.Vigente = 1
and e.tramiteid in (1,2)" );
		}

	} // end class vClientActivityAgentesAdapter 


} // namespace Berke.DG.Adapters
#endregion vClientActivityAgentes

#region estad_renovados_berke
namespace Berke.DG.Adapters
{
	public class estad_renovados_berkeAdapter : ViewAdapter{
	
		public estad_renovados_berkeAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e

join expediente expHijo
on (expHijo.expedienteid = e.id)" );
			
   			_fMap[0].SqlColName = "count(*)";
   			_fMap[1].SqlColName = "datepart( year, expHijo.PresentacionFecha)";

			this.SetDefaultWhere(@"expHijo.tramiteid = 2
and datepart( year, expHijo.PresentacionFecha) between @anhoini and @anhofin
and e.nuestra = 1
and expHijo.nuestra = 1
group by  datepart (year, expHijo.PresentacionFecha) 
order by anho" );
		}

	} // end class estad_renovados_berkeAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_renovados_berke

#region estad_presentadas_mes
namespace Berke.DG.Adapters
{
	public class estad_presentadas_mesAdapter : ViewAdapter{
	
		public estad_presentadas_mesAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join tramite tr
on (e.tramiteid= tr.id)" );
			
   			_fMap[0].SqlColName = "tr.id";
   			_fMap[1].SqlColName = " tr.abrev";
   			_fMap[2].SqlColName = " count(*)";
   			_fMap[3].SqlColName = "datepart( month, e.presentacionfecha)";

			this.SetDefaultWhere(@"datepart(year,e.presentacionfecha) = @anhoini
and e.nuestra = 1
and tr.id in (1,2)
group by tr.id, tr.abrev , datepart( month, e.presentacionfecha)
order by tr.id, datepart( month, e.presentacionfecha)" );
		}

	} // end class estad_presentadas_mesAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_presentadas_mes

#region estad_tramites_concedidos
namespace Berke.DG.Adapters
{
	public class estad_tramites_concedidosAdapter : ViewAdapter{
	
		public estad_tramites_concedidosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join tramite tr
on (e.tramiteid= tr.id)
join marcaregren mr
on (e.marcaregrenid= mr.id)" );
			
   			_fMap[0].SqlColName = "tr.id";
   			_fMap[1].SqlColName = " tr.abrev";
   			_fMap[2].SqlColName = " count(*)";
   			_fMap[3].SqlColName = "datepart(month, mr.concesionfecha)";

			this.SetDefaultWhere(@"datepart(year, mr.concesionfecha) = @anhoini
and e.nuestra = 1
and tr.id in (1,2)
group by tr.id, tr.abrev , datepart( month, mr.concesionfecha)
order by tr.id, datepart( month, mr.concesionfecha)" );
		}

	} // end class estad_tramites_concedidosAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_tramites_concedidos

#region vRenovados
namespace Berke.DG.Adapters
{
	public class vRenovadosAdapter : ViewAdapter{
	
		public vRenovadosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Expediente expe
JOIN MarcaRegRen mrr
  ON expe.ExpedienteID = mrr.ExpedienteID
JOIN Marca mar
  ON expe.MarcaID = mar.ID
JOIN Clase clas
  ON mar.ClaseID = clas.ID
JOIN Expediente_Instruccion expei
  ON expe.ExpedienteID = expei.ExpedienteID
LEFT JOIN Correspondencia corresp
  ON expei.CorrespondenciaID = corresp.ID
LEFT JOIN OrdenTrabajo ot
  ON expe.OrdenTrabajoID = ot.ID" );
			
   			_fMap[0].SqlColName = "corresp.Nro";
   			_fMap[1].SqlColName = " corresp.Anio";
   			_fMap[2].SqlColName = " expe.ID";
   			_fMap[3].SqlColName = " expe.ExpedienteID";
   			_fMap[4].SqlColName = " mrr.Registro";
   			_fMap[5].SqlColName = " mrr.VencimientoFecha";
   			_fMap[6].SqlColName = " mrr.RegistroNro";
   			_fMap[7].SqlColName = " mrr.RegistroAnio";
   			_fMap[8].SqlColName = " mar.Denominacion";
   			_fMap[9].SqlColName = " clas.Nro";
   			_fMap[10].SqlColName = " ot.OrdenTrabajo";
   			_fMap[11].SqlColName = " expe.Acta";
   			_fMap[12].SqlColName = " expei.Fecha";

			this.SetDefaultWhere(@"expe.TramiteID = 2
AND expe.Vigilada = 1
AND expei.InstruccionTipoID = 1
AND mar.Vigente = 1" );
		}

	} // end class vRenovadosAdapter 


} // namespace Berke.DG.Adapters
#endregion vRenovados

#region estad_HIpresentadas_pordia
namespace Berke.DG.Adapters
{
	public class estad_HIpresentadas_pordiaAdapter : ViewAdapter{
	
		public estad_HIpresentadas_pordiaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"(
select e.ordentrabajoid , tr.id as tramiteid, tr.abrev  as abrev,  
       datepart(day,e.presentacionfecha)   as dia , 
       datepart(month,e.presentacionfecha) as mes , 
       datepart(year,e.presentacionfecha)  as anho 
from expediente e
join tramite tr
on (e.tramiteid= tr.id)" );
			
   			_fMap[0].SqlColName = "count(*)";
   			_fMap[1].SqlColName = " lista.tramiteid";
   			_fMap[2].SqlColName = " lista.abrev";
   			_fMap[3].SqlColName = " lista.dia";
   			_fMap[4].SqlColName = " lista.mes";
   			_fMap[5].SqlColName = " lista.anho";

			this.SetDefaultWhere(@"e.presentacionfecha between  @fdesde and @fhasta
and e.nuestra = 1
and tr.id in (1,2,3,4,5,6,7,8)
group by e.ordentrabajoid, tr.id, tr.abrev  , datepart(day,e.presentacionfecha), 
         datepart(month,e.presentacionfecha), datepart(year,e.presentacionfecha)   

) as  lista 
group by  lista.tramiteid, lista.abrev, lista.dia, lista.mes, lista.anho
order by lista.tramiteid, lista.dia" );
		}

	} // end class estad_HIpresentadas_pordiaAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_HIpresentadas_pordia

#region estad_tramites_pordia
namespace Berke.DG.Adapters
{
	public class estad_tramites_pordiaAdapter : ViewAdapter{
	
		public estad_tramites_pordiaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"(
select e.ordentrabajoid , tr.id as tramiteid, tr.abrev  as abrev,  
       datepart(day,e.presentacionfecha)   as dia , 
       datepart(month,e.presentacionfecha) as mes , 
       datepart(year,e.presentacionfecha)  as anho 
from expediente e
join tramite tr
on (e.tramiteid= tr.id)" );
			
   			_fMap[0].SqlColName = "lista.dia";
   			_fMap[1].SqlColName = "SUM(CASE lista.tramiteid WHEN 1  THEN 1 ELSE 0 END)  ";
   			_fMap[2].SqlColName = "SUM(CASE lista.tramiteid WHEN 2  THEN 1 ELSE 0 END)  ";
   			_fMap[3].SqlColName = "SUM(CASE lista.tramiteid WHEN 3  THEN 1 ELSE 0 END)  ";
   			_fMap[4].SqlColName = "SUM(CASE lista.tramiteid WHEN 4  THEN 1 ELSE 0 END)  ";
   			_fMap[5].SqlColName = "SUM(CASE lista.tramiteid WHEN 5  THEN 1 ELSE 0 END)  ";
   			_fMap[6].SqlColName = "SUM(CASE lista.tramiteid WHEN 6  THEN 1 ELSE 0 END)  ";
   			_fMap[7].SqlColName = "SUM(CASE lista.tramiteid WHEN 7  THEN 1 ELSE 0 END)  ";
   			_fMap[8].SqlColName = "SUM(CASE lista.tramiteid WHEN 8  THEN 1 ELSE 0 END)  ";
   			_fMap[9].SqlColName = "SUM(CASE  WHEN lista.tramiteid  between 1 and 8 THEN 1 ELSE 0 END)  ";

			this.SetDefaultWhere(@"e.presentacionfecha between  @fecdesde and @fechasta
and e.nuestra = 1
and tr.id in (1,2,3,4,5,6,7,8)
group by e.ordentrabajoid, tr.id, tr.abrev  , datepart(day,e.presentacionfecha), 
         datepart(month,e.presentacionfecha), datepart(year,e.presentacionfecha)   

) as  lista 
group by   lista.dia
order by  lista.dia" );
		}

	} // end class estad_tramites_pordiaAdapter 


} // namespace Berke.DG.Adapters
#endregion estad_tramites_pordia

#region vClientActivityMarcas
namespace Berke.DG.Adapters
{
	public class vClientActivityMarcasAdapter : ViewAdapter{
	
		public vClientActivityMarcasAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e

left join marcaregren mr 
on (e.marcaregrenid = mr.id)

left join CAgenteLocal ag
on (ag.idagloc = e.agentelocalid  )

join marca m
on (e.marcaid = m.id)

join marcatipo mt
on (m.marcatipoid = mt.id)

join clase cl
on (m.claseid = cl.id)

join propietarioxmarca pxm
on (e.marcaID = pxm.MarcaID)

join tramite tr 
on (e.tramiteid = tr.id)

left join expediente e2
on (e2.expedienteID = e.id)
left join marca m2 
on (e2.marcaid = m2.id and m2.vigente = 1)" );
			
   			_fMap[0].SqlColName = "e.PresentacionFecha";
   			_fMap[1].SqlColName = " e.ActaNro";
   			_fMap[2].SqlColName = " e.ActaAnio";
   			_fMap[3].SqlColName = " e.tramiteid";
   			_fMap[4].SqlColName = " cl.Nro";
   			_fMap[5].SqlColName = " mt.Abrev";
   			_fMap[6].SqlColName = " m.Denominacion";
   			_fMap[7].SqlColName = " ag.nromatricula";
   			_fMap[8].SqlColName = " mr.RegistroNro";
   			_fMap[9].SqlColName = " m.ClienteID";
   			_fMap[10].SqlColName = " pxm.PropietarioID";
   			_fMap[11].SqlColName = " tr.Abrev";
   			_fMap[12].SqlColName = " m.Vigilada";
   			_fMap[13].SqlColName = " m.Nuestra";
   			_fMap[14].SqlColName = " mr.vencimientofecha";

			this.SetDefaultWhere(@"m.Vigente = 1
and m2.id is null" );
		}

	} // end class vClientActivityMarcasAdapter 


} // namespace Berke.DG.Adapters
#endregion vClientActivityMarcas

#region vTrBoletin
namespace Berke.DG.Adapters
{
	public class vTrBoletinAdapter : ViewAdapter{
	
		public vTrBoletinAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"boletindet" );
			
   			_fMap[0].SqlColName = "tramite";

			this.SetDefaultWhere(@"" );
		}

	} // end class vTrBoletinAdapter 


} // namespace Berke.DG.Adapters
#endregion vTrBoletin

#region vExpeMarcaHD
namespace Berke.DG.Adapters
{
	public class vExpeMarcaHDAdapter : ViewAdapter{
	
		public vExpeMarcaHDAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente ExpePadre 
RIGHT OUTER JOIN
          dbo.Expediente expe ON ExpePadre.ID = expe.ExpedienteID 
LEFT OUTER JOIN
          dbo.Clase cla 
INNER JOIN
          dbo.Marca mar ON cla.ID = mar.ClaseID 
INNER JOIN
          dbo.MarcaTipo ON mar.MarcaTipoID = dbo.MarcaTipo.ID 
LEFT OUTER JOIN
          dbo.MarcaRegRen regRen_Mar ON mar.MarcaRegRenID = regRen_Mar.ID ON expe.MarcaID = mar.ID

                        
LEFT OUTER JOIN  dbo.propietarioxmarca pdd
          ON mar.id = pdd.marcaid 

LEFT OUTER JOIN
          dbo.Tramite tram ON expe.TramiteID = tram.ID 
LEFT OUTER JOIN
          dbo.Situacion sit 
INNER JOIN
          dbo.Tramite_Sit tramSit ON sit.ID = tramSit.SituacionID ON expe.TramiteSitID = tramSit.ID 
LEFT OUTER JOIN
          dbo.MarcaRegRen regRen ON expe.MarcaRegRenID = regRen.ID 
LEFT OUTER JOIN
          dbo.OrdenTrabajo ot ON expe.OrdenTrabajoID = ot.ID
LEFT JOIN CLIENTE cli
on mar.clienteid = cli.id
LEFT OUTER JOIN dbo.BoletinDet bd
on expe.id = bd.expedienteid" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.Acta";
   			_fMap[2].SqlColName = " expe.expedienteid";
   			_fMap[3].SqlColName = " regRen.Registro";
   			_fMap[4].SqlColName = " ot.OrdenTrabajo";
   			_fMap[5].SqlColName = " mar.Denominacion";
   			_fMap[6].SqlColName = " cla.DescripBreve";
   			_fMap[7].SqlColName = " cla.Nro";
   			_fMap[8].SqlColName = " tram.Descrip";
   			_fMap[9].SqlColName = " tram.Abrev";
   			_fMap[10].SqlColName = " sit.Descrip";
   			_fMap[11].SqlColName = " sit.EnTramite";
   			_fMap[12].SqlColName = " expe.TramiteID";
   			_fMap[13].SqlColName = " expe.TramiteSitID";
   			_fMap[14].SqlColName = " expe.ActaNro";
   			_fMap[15].SqlColName = " expe.ActaAnio";
   			_fMap[16].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[17].SqlColName = " mar.ClienteID";
   			_fMap[18].SqlColName = " expe.AgenteLocalID";
   			_fMap[19].SqlColName = " expe.PresentacionFecha";
   			_fMap[20].SqlColName = " expe.AltaFecha";
   			_fMap[21].SqlColName = " pdd.PropietarioID";
   			_fMap[22].SqlColName = " mar.Propietario";
   			_fMap[23].SqlColName = " mar.ProPais";
   			_fMap[24].SqlColName = " mar.ClaseID";
   			_fMap[25].SqlColName = " ot.Nro";
   			_fMap[26].SqlColName = " ot.Anio";
   			_fMap[27].SqlColName = " regRen.RegistroNro";
   			_fMap[28].SqlColName = " regRen.RegistroAnio";
   			_fMap[29].SqlColName = " expe.MarcaID";
   			_fMap[30].SqlColName = " expe.Label";
   			_fMap[31].SqlColName = " expe.Nuestra";
   			_fMap[32].SqlColName = " expe.PublicPag";
   			_fMap[33].SqlColName = " expe.PublicAnio";
   			_fMap[34].SqlColName = " mar.Nuestra";
   			_fMap[35].SqlColName = " mar.Vigente";
   			_fMap[36].SqlColName = " mar.Vigilada";
   			_fMap[37].SqlColName = " mar.Sustituida";
   			_fMap[38].SqlColName = " mar.StandBy";
   			_fMap[39].SqlColName = " expe.VencimientoFecha";
   			_fMap[40].SqlColName = " regRen_Mar.VencimientoFecha";
   			_fMap[41].SqlColName = " regRen_Mar.RegistroNro";
   			_fMap[42].SqlColName = " regRen_Mar.RegistroAnio";
   			_fMap[43].SqlColName = " regRen_Mar.ConcesionFecha";
   			_fMap[44].SqlColName = " regRen_Mar.Vigente";
   			_fMap[45].SqlColName = " regRen.Vigente";
   			_fMap[46].SqlColName = " ExpePadre.Acta";
   			_fMap[47].SqlColName = " mar.DenominacionClave";
   			_fMap[48].SqlColName = " dbo.MarcaTipo.Abrev";
   			_fMap[49].SqlColName = " mar.ClaseDescripEsp";
   			_fMap[50].SqlColName = " mar.Limitada";
   			_fMap[51].SqlColName = " mar.LogotipoID";
   			_fMap[52].SqlColName = " cli.nombre";
   			_fMap[53].SqlColName = " bd.bolanio";
   			_fMap[54].SqlColName = " bd.bolnro";
   			_fMap[55].SqlColName = " ''";

			this.SetDefaultWhere(@"(tram.ProcesoID = 1)" );
		}

	} // end class vExpeMarcaHDAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeMarcaHD

#region vLogoCateg
namespace Berke.DG.Adapters
{
	public class vLogoCategAdapter : ViewAdapter{
	
		public vLogoCategAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"logotipocateg lc
join categoriafig c
on (lc.categoriaID = c.ID)" );
			
   			_fMap[0].SqlColName = "lc.ID";
   			_fMap[1].SqlColName = " lc.CategoriaID";
   			_fMap[2].SqlColName = " c.Categoria";
   			_fMap[3].SqlColName = " c.Descripcion";
   			_fMap[4].SqlColName = " c.Clave";
   			_fMap[5].SqlColName = " c.CategoriaID";
   			_fMap[6].SqlColName = " lc.LogoID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vLogoCategAdapter 


} // namespace Berke.DG.Adapters
#endregion vLogoCateg

#region vRenovadasSinHIActa
namespace Berke.DG.Adapters
{
	public class vRenovadasSinHIActaAdapter : ViewAdapter{
	
		public vRenovadasSinHIActaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente expe
JOIN expediente_instruccion expei
  on expei.expedienteid = expe.id
JOIN marcaregren mrr
  on mrr.expedienteid = expe.id
JOIN Marca mar
  ON expe.MarcaID = mar.ID
JOIN Clase clas
  ON mar.ClaseID = clas.ID
LEFT JOIN Correspondencia corresp
  ON expei.CorrespondenciaID = corresp.ID" );
			
   			_fMap[0].SqlColName = "corresp.Nro";
   			_fMap[1].SqlColName = " corresp.Anio";
   			_fMap[2].SqlColName = " expe.ID";
   			_fMap[3].SqlColName = " expe.ExpedienteID";
   			_fMap[4].SqlColName = " mrr.Registro";
   			_fMap[5].SqlColName = " mrr.VencimientoFecha";
   			_fMap[6].SqlColName = " mrr.RegistroNro";
   			_fMap[7].SqlColName = " mrr.RegistroAnio";
   			_fMap[8].SqlColName = " mar.Denominacion";
   			_fMap[9].SqlColName = " clas.Nro";
   			_fMap[10].SqlColName = " NULL";
   			_fMap[11].SqlColName = " NULL";
   			_fMap[12].SqlColName = " expei.Fecha";

			this.SetDefaultWhere(@"expei.instrucciontipoid = 1
AND NOT EXISTS (SELECT * FROM Expediente_Instruccion expei2
		WHERE expei.ExpedienteID = expei2.ExpedienteID
		AND expei2.instrucciontipoid = 3
		AND expei2.Fecha > expei.Fecha)
AND NOT EXISTS (SELECT * FROM expediente expe2
                WHERE expe2.tramiteid = 2
		AND expe2.expedienteid = expe.id)" );
		}

	} // end class vRenovadasSinHIActaAdapter 


} // namespace Berke.DG.Adapters
#endregion vRenovadasSinHIActa

#region vLogo
namespace Berke.DG.Adapters
{
	public class vLogoAdapter : ViewAdapter{
	
		public vLogoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Logotipo l INNER JOIN Usuario f ON
  l.FuncionarioID = f.ID" );
			
   			_fMap[0].SqlColName = "l.ID";
   			_fMap[1].SqlColName = " l.Denominacion";
   			_fMap[2].SqlColName = " l.FechaAlta";
   			_fMap[3].SqlColName = " l.FuncionarioID";
   			_fMap[4].SqlColName = " f.Usuario";
   			_fMap[5].SqlColName = " f.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vLogoAdapter 


} // namespace Berke.DG.Adapters
#endregion vLogo

#region vMarcaClientePropietarioTVS
namespace Berke.DG.Adapters
{
	public class vMarcaClientePropietarioTVSAdapter : ViewAdapter{
	
		public vMarcaClientePropietarioTVSAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Marca 
LEFT OUTER JOIN
 dbo.Clase ON dbo.Marca.ClaseID = dbo.Clase.ID 
LEFT OUTER JOIN
 dbo.Expediente ON dbo.Marca.ExpedienteVigenteID = dbo.Expediente.ExpedienteID 
LEFT OUTER JOIN
 dbo.MarcaRegRen ON dbo.Marca.MarcaRegRenID = dbo.MarcaRegRen.ID 
LEFT OUTER JOIN
 dbo.Cliente ON dbo.Marca.ClienteID = dbo.Cliente.ID 
LEFT OUTER JOIN
 dbo.PropietarioXMarca ON dbo.Marca.ID = PropietarioXMarca.MarcaID 
LEFT OUTER JOIN
 dbo.Propietario ON dbo.PropietarioXMarca.PropietarioID = dbo.Propietario.ID
LEFT OUTER JOIN
 dbo.Tramite ON dbo.Expediente.TramiteID = dbo.Tramite.ID" );
			
   			_fMap[0].SqlColName = "dbo.Marca.ID";
   			_fMap[1].SqlColName = " dbo.Marca.Denominacion";
   			_fMap[2].SqlColName = " dbo.Clase.DescripBreve";
   			_fMap[3].SqlColName = " dbo.Expediente.ID";
   			_fMap[4].SqlColName = " dbo.Expediente.Acta";
   			_fMap[5].SqlColName = " dbo.MarcaRegRen.RegistroNro";
   			_fMap[6].SqlColName = " dbo.Cliente.ID";
   			_fMap[7].SqlColName = " dbo.Propietario.ID";
   			_fMap[8].SqlColName = " dbo.Marca.Propietario";
   			_fMap[9].SqlColName = " dbo.Cliente.Nombre";
   			_fMap[10].SqlColName = " dbo.Expediente.TramiteID";
   			_fMap[11].SqlColName = " dbo.Tramite.Abrev";

			this.SetDefaultWhere(@"dbo.Expediente.TramiteID IS NOT NULL
AND dbo.Expediente.TramiteID NOT IN (1, 2)" );
		}

	} // end class vMarcaClientePropietarioTVSAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaClientePropietarioTVS

#region vTipoAvisoPl
namespace Berke.DG.Adapters
{
	public class vTipoAvisoPlAdapter : ViewAdapter{
	
		public vTipoAvisoPlAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"tipoavisopl tpl
join documentoplantilla dpl
on (tpl.plantillaid = dpl.id)" );
			
   			_fMap[0].SqlColName = "tpl.tipoavisoid";
   			_fMap[1].SqlColName = " tpl.plantillaid";
   			_fMap[2].SqlColName = " dpl.idiomaID";
   			_fMap[3].SqlColName = " tramiteid";
   			_fMap[4].SqlColName = " plantillahtml";
   			_fMap[5].SqlColName = " plural";

			this.SetDefaultWhere(@"" );
		}

	} // end class vTipoAvisoPlAdapter 


} // namespace Berke.DG.Adapters
#endregion vTipoAvisoPl

#region vMenuSistema
namespace Berke.DG.Adapters
{
	public class vMenuSistemaAdapter : ViewAdapter{
	
		public vMenuSistemaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"MenuSistema ms
join operacionxgrupo og
on (ms.operacionID = og.operacionID)
join usuarioxgrupo ug
on (og.grupoID = ug.grupoID)" );
			
   			_fMap[0].SqlColName = "ms.ID";
   			_fMap[1].SqlColName = " ms.Nombre";
   			_fMap[2].SqlColName = " ms.Descripcion";
   			_fMap[3].SqlColName = " ms.Atajo";
   			_fMap[4].SqlColName = " ms.Ayuda";
   			_fMap[5].SqlColName = " ms.MenuSistemaID";
   			_fMap[6].SqlColName = " ms.Estado";
   			_fMap[7].SqlColName = " ms.Visible";
   			_fMap[8].SqlColName = " ms.CodOpInterno";
   			_fMap[9].SqlColName = " ms.OperacionID";
   			_fMap[10].SqlColName = " ms.NotificacionID";
   			_fMap[11].SqlColName = " ms.Auditar";
   			_fMap[12].SqlColName = " ms.tipo";
   			_fMap[13].SqlColName = " ms.Orden";
   			_fMap[14].SqlColName = " ms.IconPath";
   			_fMap[15].SqlColName = " ug.UsuarioID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMenuSistemaAdapter 


} // namespace Berke.DG.Adapters
#endregion vMenuSistema

#region vMarcaBaseCab
namespace Berke.DG.Adapters
{
	public class vMarcaBaseCabAdapter : ViewAdapter{
	
		public vMarcaBaseCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join marca m
on ( e.marcaid = m.ID)
left join cliente c
on ( m.clienteID = c.ID)
left join marcaregren mr 
on ( e.marcaregrenid = mr.ID)
left join cagentelocal a
on ( m.agentelocalID = a.idagloc)
join busopores res
on ( e.ID = res.ExpedienteID)
join busopodet det
on ( res.busopodetid = det.id)
join busopocab cab
on ( det.busopocabid = cab.id)" );
			
   			_fMap[0].SqlColName = "res.ExpedienteID";
   			_fMap[1].SqlColName = "res.ActaNro";
   			_fMap[2].SqlColName = "res.ActaAnio";
   			_fMap[3].SqlColName = "res.Denominacion";
   			_fMap[4].SqlColName = "res.ClaseNro";
   			_fMap[5].SqlColName = "det.BusOpoCabID";
   			_fMap[6].SqlColName = "mr.registronro";
   			_fMap[7].SqlColName = "mr.concesionfecha";
   			_fMap[8].SqlColName = "e.presentacionfecha";
   			_fMap[9].SqlColName = "m.Propietario";
   			_fMap[10].SqlColName = "m.ProDir";
   			_fMap[11].SqlColName = "m.ProPais";
   			_fMap[12].SqlColName = "c.Nombre";
   			_fMap[13].SqlColName = "c.id";
   			_fMap[14].SqlColName = "m.Nuestra";
   			_fMap[15].SqlColName = "m.Vigilada";
   			_fMap[16].SqlColName = "a.Nombre";
   			_fMap[17].SqlColName = "a.nromatricula";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaBaseCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaBaseCab

#region vBoletinDet
namespace Berke.DG.Adapters
{
	public class vBoletinDetAdapter : ViewAdapter{
	
		public vBoletinDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"boletindet bdet
join clase cl
on (bdet.Clase = cl.nro)
join claseTipo ct
on (cl.ClaseTipoID = ct.ID)
join cagentelocal ag
on (bdet.agentelocal = ag.nromatricula)" );
			
   			_fMap[0].SqlColName = "bdet.ID";
   			_fMap[1].SqlColName = " bdet.BoletinID";
   			_fMap[2].SqlColName = " bdet.SolicitudFecha";
   			_fMap[3].SqlColName = " bdet.ExpNro";
   			_fMap[4].SqlColName = " bdet.ExpAnio";
   			_fMap[5].SqlColName = " bdet.Clase";
   			_fMap[6].SqlColName = " bdet.MarcaTipo";
   			_fMap[7].SqlColName = " bdet.Tramite";
   			_fMap[8].SqlColName = " bdet.Denominacion";
   			_fMap[9].SqlColName = " bdet.Propietario";
   			_fMap[10].SqlColName = " bdet.Pais";
   			_fMap[11].SqlColName = " bdet.AgenteLocal";
   			_fMap[12].SqlColName = " bdet.RefNro";
   			_fMap[13].SqlColName = " bdet.RefAnio";
   			_fMap[14].SqlColName = " bdet.RefRegNro";
   			_fMap[15].SqlColName = " bdet.RefRegAnio";
   			_fMap[16].SqlColName = " bdet.Obs";
   			_fMap[17].SqlColName = " bdet.Enlazado";
   			_fMap[18].SqlColName = " bdet.Incorporado";
   			_fMap[19].SqlColName = " bdet.ExpedienteID";
   			_fMap[20].SqlColName = " bdet.BolAnio";
   			_fMap[21].SqlColName = " bdet.BolNro";
   			_fMap[22].SqlColName = " bdet.Importado";
   			_fMap[23].SqlColName = " bdet.Completo";
   			_fMap[24].SqlColName = " cl.NizaEdicionID";
   			_fMap[25].SqlColName = " ct.Abrev";
   			_fMap[26].SqlColName = " cl.ID";
   			_fMap[27].SqlColName = " ag.Nombre";
   			_fMap[28].SqlColName = " ag.Nuestro";

			this.SetDefaultWhere(@"" );
		}

	} // end class vBoletinDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vBoletinDet

#region vSuscriptosMarca
namespace Berke.DG.Adapters
{
	public class vSuscriptosMarcaAdapter : ViewAdapter{
	
		public vSuscriptosMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"suscripcion s
join suscripcionTipo st
on (s.suscripcionTipoID = st.ID)
join cliente cl
on (s.clienteExternoID = cl.id)
join marca m 
on (m.clienteID = cl.ID)
join expediente e 
on (e.marcaid = m.ID)
join clase cla
on (m.claseID = cla.ID)
left join MarcaClaseVig mc
on (m.ID = mc.marcaID)" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.Denominacion";
   			_fMap[2].SqlColName = " m.DenominacionClave";
   			_fMap[3].SqlColName = " m.MarcaTipoID";
   			_fMap[4].SqlColName = " cla.Nro";
   			_fMap[5].SqlColName = " m.Nuestra";
   			_fMap[6].SqlColName = " m.Vigilada";
   			_fMap[7].SqlColName = " m.Sustituida";
   			_fMap[8].SqlColName = " m.MarcaRegRenID";
   			_fMap[9].SqlColName = " m.Propietario";
   			_fMap[10].SqlColName = " m.ProDir";
   			_fMap[11].SqlColName = " m.ProPais";
   			_fMap[12].SqlColName = " m.Vigente";
   			_fMap[13].SqlColName = " e.ActaNro";
   			_fMap[14].SqlColName = " e.ActaAnio";
   			_fMap[15].SqlColName = " e.PresentacionFecha";
   			_fMap[16].SqlColName = " e.TramiteID";
   			_fMap[17].SqlColName = " e.ID";
   			_fMap[18].SqlColName = " s.suscripcionTipoID";
   			_fMap[19].SqlColName = " s.ID";
   			_fMap[20].SqlColName = " s.clienteExternoID";
   			_fMap[21].SqlColName = " s.estado";
   			_fMap[22].SqlColName = " mc.claseID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vSuscriptosMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vSuscriptosMarca

#region vSuscriptosMarcaExt
namespace Berke.DG.Adapters
{
	public class vSuscriptosMarcaExtAdapter : ViewAdapter{
	
		public vSuscriptosMarcaExtAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"suscripcion s
join suscripcionTipo st
on (s.suscripcionTipoID = st.ID)
join cliente cl
on (s.clienteExternoID = cl.id)
join marcaExt m 
on (m.clienteID = cl.ID)
left join MarcaExtClase mc
on (m.ID = mc.marcaExtID)" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.Denominacion";
   			_fMap[2].SqlColName = " m.DenominacionClave";
   			_fMap[3].SqlColName = " m.Clase";
   			_fMap[4].SqlColName = " m.PropNombre";
   			_fMap[5].SqlColName = " m.PropDir";
   			_fMap[6].SqlColName = " m.PropPais";
   			_fMap[7].SqlColName = " m.ActaNro";
   			_fMap[8].SqlColName = " m.ActaAnio";
   			_fMap[9].SqlColName = " s.suscripcionTipoID";
   			_fMap[10].SqlColName = " s.ID";
   			_fMap[11].SqlColName = " s.clienteExternoID";
   			_fMap[12].SqlColName = " s.estado";
   			_fMap[13].SqlColName = " mc.claseID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vSuscriptosMarcaExtAdapter 


} // namespace Berke.DG.Adapters
#endregion vSuscriptosMarcaExt

#region vPropClienteInstruccion
namespace Berke.DG.Adapters
{
	public class vPropClienteInstruccionAdapter : ViewAdapter{
	
		public vPropClienteInstruccionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"propClienteInstruccion p
join InstruccionTipo it
on (p.InstruccionTipoID = it.ID)
join tipoAvisoInstruccionTipo ta
on (it.ID = ta.InstruccionTipoID)" );
			
   			_fMap[0].SqlColName = "p.id";
   			_fMap[1].SqlColName = " p.clienteID";
   			_fMap[2].SqlColName = " p.propietarioID";
   			_fMap[3].SqlColName = " p.fecalta";
   			_fMap[4].SqlColName = " p.funcionarioregID";
   			_fMap[5].SqlColName = " p.funcionariorecID";
   			_fMap[6].SqlColName = " p.obs";
   			_fMap[7].SqlColName = " p.correspondenciaID";
   			_fMap[8].SqlColName = " p.instrucciontipoID";
   			_fMap[9].SqlColName = " ta.tipoavisoID";
   			_fMap[10].SqlColName = " ta.excluir";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropClienteInstruccionAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropClienteInstruccion

#region vClientesSuscriptos
namespace Berke.DG.Adapters
{
	public class vClientesSuscriptosAdapter : ViewAdapter{
	
		public vClientesSuscriptosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"suscripcion s   
join suscripcionTipo st 
on (s.suscripcionTipoID = st.ID)
left join cliente cl 
on (s.clienteExternoID = cl.id)
left join usuario u1
on (s.FuncionarioRegID = u1.id)
left join usuario u2
on (s.ClienteInternoID = u2.id)" );
			
   			_fMap[0].SqlColName = "s.Origen";
   			_fMap[1].SqlColName = " cl.Nombre";
   			_fMap[2].SqlColName = " u1.Nombre";
   			_fMap[3].SqlColName = " u2.Nombre";
   			_fMap[4].SqlColName = " s.suscripcionTipoID";
   			_fMap[5].SqlColName = " s.ID";
   			_fMap[6].SqlColName = " s.clienteExternoID";
   			_fMap[7].SqlColName = " s.estado";
   			_fMap[8].SqlColName = " s.ClienteInternoID";
   			_fMap[9].SqlColName = " s.clienteExternoID";
   			_fMap[10].SqlColName = " s.Mail";
   			_fMap[11].SqlColName = " s.Fax";
   			_fMap[12].SqlColName = " s.FecSuscripcion";
   			_fMap[13].SqlColName = " s.FecVencimiento";
   			_fMap[14].SqlColName = " s.Estado";
   			_fMap[15].SqlColName = " s.Msg";
   			_fMap[16].SqlColName = " s.Obs";
   			_fMap[17].SqlColName = " s.FecAlta";
   			_fMap[18].SqlColName = " s.FecBaja";
   			_fMap[19].SqlColName = " st.Tipo";
   			_fMap[20].SqlColName = " st.Nombre";
   			_fMap[21].SqlColName = " st.FecAlta";
   			_fMap[22].SqlColName = " st.SituacionID";
   			_fMap[23].SqlColName = " st.ClaseNro";
   			_fMap[24].SqlColName = " st.TipoMarcaID";
   			_fMap[25].SqlColName = " st.Tramites";
   			_fMap[26].SqlColName = " st.Propietario";
   			_fMap[27].SqlColName = " st.Periodo";
   			_fMap[28].SqlColName = " st.FecVencSit";
   			_fMap[29].SqlColName = " st.Registrado";
   			_fMap[30].SqlColName = " st.MailSubject";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClientesSuscriptosAdapter 


} // namespace Berke.DG.Adapters
#endregion vClientesSuscriptos

#region vTipoAvisoInsTip
namespace Berke.DG.Adapters
{
	public class vTipoAvisoInsTipAdapter : ViewAdapter{
	
		public vTipoAvisoInsTipAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"TipoAvisoInstruccionTipo t
join tipoaviso ta
on (t.TipoAvisoID = ta.ID)
join InstruccionTipo i
on (t.InstruccionTipoID = i.ID)
join usuario u
on (t.FuncionarioID = u.ID)" );
			
   			_fMap[0].SqlColName = "t.ID";
   			_fMap[1].SqlColName = " t.TipoAvisoID";
   			_fMap[2].SqlColName = " t.InstruccionTipoID";
   			_fMap[3].SqlColName = " t.FuncionarioID";
   			_fMap[4].SqlColName = " t.FecAlta";
   			_fMap[5].SqlColName = " t.Excluir";
   			_fMap[6].SqlColName = " ta.Nombre";
   			_fMap[7].SqlColName = " ta.Descripcion";
   			_fMap[8].SqlColName = " i.Descrip";
   			_fMap[9].SqlColName = " i.Abrev";
   			_fMap[10].SqlColName = " u.Nombre";
   			_fMap[11].SqlColName = " u.Email";

			this.SetDefaultWhere(@"" );
		}

	} // end class vTipoAvisoInsTipAdapter 


} // namespace Berke.DG.Adapters
#endregion vTipoAvisoInsTip

#region vTipoAvisoPlant
namespace Berke.DG.Adapters
{
	public class vTipoAvisoPlantAdapter : ViewAdapter{
	
		public vTipoAvisoPlantAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"TipoAviso t1
left join TipoAviso t2
on (t1.TipoAvisoID = t2.ID)
left join documentoplantilla d
on (t1.plantillaID = d.ID)
left join Cidioma i
on (d.IdiomaID = i.ididioma)" );
			
   			_fMap[0].SqlColName = "t1.ID";
   			_fMap[1].SqlColName = " t1.Nombre";
   			_fMap[2].SqlColName = " t1.Descripcion";
   			_fMap[3].SqlColName = " t1.NroAviso";
   			_fMap[4].SqlColName = " t1.PlantillaID";
   			_fMap[5].SqlColName = " t1.Tipo";
   			_fMap[6].SqlColName = " t1.MailOrigen";
   			_fMap[7].SqlColName = " t1.TipoAvisoID";
   			_fMap[8].SqlColName = " t2.Nombre";
   			_fMap[9].SqlColName = " d.Clave";
   			_fMap[10].SqlColName = " d.TramiteID";
   			_fMap[11].SqlColName = " d.DocumentoTipoID";
   			_fMap[12].SqlColName = " d.Descrip";
   			_fMap[13].SqlColName = " d.Tipo";
   			_fMap[14].SqlColName = " i.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vTipoAvisoPlantAdapter 


} // namespace Berke.DG.Adapters
#endregion vTipoAvisoPlant

#region vAvisoOpoDet
namespace Berke.DG.Adapters
{
	public class vAvisoOpoDetAdapter : ViewAdapter{
	
		public vAvisoOpoDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"AvisoOpoDet avDet
join AvisoOpoCab avCab
on (avCab.ID = avDet.AvisoOpoCabID)
join TipoAviso tp
on (avCab.TipoAvisoID = tp.ID)" );
			
   			_fMap[0].SqlColName = "avDet.ID";
   			_fMap[1].SqlColName = " avDet.MarcaBaseID";
   			_fMap[2].SqlColName = " avDet.MarcaBaseExtID";
   			_fMap[3].SqlColName = " avDet.AvisoOpoCabID";
   			_fMap[4].SqlColName = " avDet.Chance";
   			_fMap[5].SqlColName = " avDet.MarcaSolID";
   			_fMap[6].SqlColName = " avDet.MarcaSolHistID";
   			_fMap[7].SqlColName = " avDet.MarcaBaseHistID";
   			_fMap[8].SqlColName = " avCab.BusOpoCabID";
   			_fMap[9].SqlColName = " avCab.BolNro";
   			_fMap[10].SqlColName = " avCab.BolAnio";
   			_fMap[11].SqlColName = " avCab.Estado";
   			_fMap[12].SqlColName = " avCab.IdiomaID";
   			_fMap[13].SqlColName = " avCab.ModoEnvioID";
   			_fMap[14].SqlColName = " avCab.TipoAvisoID";
   			_fMap[15].SqlColName = " avCab.FuncionarioGenID";
   			_fMap[16].SqlColName = " avCab.FuncionarioEnvioID";
   			_fMap[17].SqlColName = " avCab.FecGen";
   			_fMap[18].SqlColName = " avCab.FecEnvio";
   			_fMap[19].SqlColName = " tp.NroAviso";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisoOpoDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisoOpoDet

#region vig_ExpeMarca
namespace Berke.DG.Adapters
{
	public class vig_ExpeMarcaAdapter : ViewAdapter{
	
		public vig_ExpeMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente ExpePadre 

RIGHT OUTER JOIN
          dbo.Expediente expe 
     ON ExpePadre.ID = expe.ExpedienteID 

LEFT OUTER JOIN
          dbo.Clase cla 

INNER JOIN
          dbo.Marca mar 
     ON cla.ID = mar.ClaseID 

INNER JOIN
          dbo.MarcaTipo 
     ON mar.MarcaTipoID = dbo.MarcaTipo.ID 

LEFT OUTER JOIN
          dbo.MarcaRegRen regRen_Mar 
     ON mar.MarcaRegRenID = regRen_Mar.ID 
     ON expe.MarcaID = mar.ID

                        
LEFT OUTER JOIN  dbo.propietarioxmarca pdd
     ON mar.id = pdd.marcaid 

LEFT OUTER JOIN dbo.Tramite tram
     ON expe.TramiteID = tram.ID 

LEFT OUTER JOIN  dbo.Situacion sit 
INNER JOIN  dbo.Tramite_Sit tramSit 
     ON sit.ID = tramSit.SituacionID 
     ON expe.TramiteSitID = tramSit.ID 

LEFT OUTER JOIN  dbo.MarcaRegRen regRen 
     ON expe.MarcaRegRenID = regRen.ID 

LEFT OUTER JOIN  dbo.OrdenTrabajo ot 
     ON expe.OrdenTrabajoID = ot.ID

LEFT JOIN CLIENTE cli
     ON mar.clienteid = cli.id
LEFT JOIN CAgenteLocal agl
on mar.agentelocalid = agl.idagloc" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.expedienteid";
   			_fMap[2].SqlColName = " ot.OrdenTrabajo";
   			_fMap[3].SqlColName = " mar.Denominacion";
   			_fMap[4].SqlColName = " cla.DescripBreve";
   			_fMap[5].SqlColName = " cla.Nro";
   			_fMap[6].SqlColName = " tram.Descrip";
   			_fMap[7].SqlColName = " tram.Abrev";
   			_fMap[8].SqlColName = " sit.Descrip";
   			_fMap[9].SqlColName = " sit.EnTramite";
   			_fMap[10].SqlColName = " expe.TramiteID";
   			_fMap[11].SqlColName = " expe.TramiteSitID";
   			_fMap[12].SqlColName = " expe.ActaNro";
   			_fMap[13].SqlColName = " expe.ActaAnio";
   			_fMap[14].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[15].SqlColName = " mar.ClienteID";
   			_fMap[16].SqlColName = " expe.AgenteLocalID";
   			_fMap[17].SqlColName = " expe.PresentacionFecha";
   			_fMap[18].SqlColName = " expe.AltaFecha";
   			_fMap[19].SqlColName = " pdd.PropietarioID";
   			_fMap[20].SqlColName = " mar.Propietario";
   			_fMap[21].SqlColName = " mar.ProDir";
   			_fMap[22].SqlColName = " mar.ProPais";
   			_fMap[23].SqlColName = " mar.ClaseID";
   			_fMap[24].SqlColName = " ot.Nro";
   			_fMap[25].SqlColName = " ot.Anio";
   			_fMap[26].SqlColName = " regRen.RegistroNro";
   			_fMap[27].SqlColName = " regRen.RegistroAnio";
   			_fMap[28].SqlColName = " expe.MarcaID";
   			_fMap[29].SqlColName = " expe.Label";
   			_fMap[30].SqlColName = " expe.Nuestra";
   			_fMap[31].SqlColName = " expe.PublicPag";
   			_fMap[32].SqlColName = " expe.PublicAnio";
   			_fMap[33].SqlColName = " mar.Nuestra";
   			_fMap[34].SqlColName = " mar.Vigente";
   			_fMap[35].SqlColName = " mar.Vigilada";
   			_fMap[36].SqlColName = " mar.Sustituida";
   			_fMap[37].SqlColName = " mar.StandBy";
   			_fMap[38].SqlColName = " expe.VencimientoFecha";
   			_fMap[39].SqlColName = " regRen_Mar.VencimientoFecha";
   			_fMap[40].SqlColName = " regRen_Mar.RegistroNro";
   			_fMap[41].SqlColName = " regRen_Mar.RegistroAnio";
   			_fMap[42].SqlColName = " regRen_Mar.ConcesionFecha";
   			_fMap[43].SqlColName = " regRen_Mar.Vigente";
   			_fMap[44].SqlColName = " regRen.Vigente";
   			_fMap[45].SqlColName = " ExpePadre.Acta";
   			_fMap[46].SqlColName = " mar.DenominacionClave";
   			_fMap[47].SqlColName = " dbo.MarcaTipo.Abrev";
   			_fMap[48].SqlColName = " mar.ClaseDescripEsp";
   			_fMap[49].SqlColName = " mar.Limitada";
   			_fMap[50].SqlColName = " mar.LogotipoID";
   			_fMap[51].SqlColName = " cli.nombre";
   			_fMap[52].SqlColName = " mar.agentelocalid";
   			_fMap[53].SqlColName = " agl.nombre";

			this.SetDefaultWhere(@"(tram.ProcesoID = 1)" );
		}

	} // end class vig_ExpeMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vig_ExpeMarca

#region vAtencion
namespace Berke.DG.Adapters
{
	public class vAtencionAdapter : ViewAdapter{
	
		public vAtencionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"atencion a
join area ar
on(a.AreaID = ar.ID)" );
			
   			_fMap[0].SqlColName = "a.ID";
   			_fMap[1].SqlColName = " a.Nombre";
   			_fMap[2].SqlColName = " a.Obs";
   			_fMap[3].SqlColName = " a.ClienteID";
   			_fMap[4].SqlColName = " a.AreaID";
   			_fMap[5].SqlColName = " ar.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAtencionAdapter 


} // namespace Berke.DG.Adapters
#endregion vAtencion

#region vAntecedente
namespace Berke.DG.Adapters
{
	public class vAntecedenteAdapter : ViewAdapter{
	
		public vAntecedenteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"antecedente an
join avisoopodet av
on (an.avisoopodetid = av.id)
join marca mb
on (av.marcabaseid = mb.id)
join marca ms
on (av.marcasolid = ms.id)
left join tipoantecedente t
on (an.tipoantecedenteid = t.id)
join usuario u
on (an.funcionarioid = u.id)" );
			
   			_fMap[0].SqlColName = "an.ID";
   			_fMap[1].SqlColName = " an.AvisoOpoDetID";
   			_fMap[2].SqlColName = " an.TipoAntecedenteID";
   			_fMap[3].SqlColName = " an.Obs";
   			_fMap[4].SqlColName = " an.FuncionarioID";
   			_fMap[5].SqlColName = " an.FecAlta";
   			_fMap[6].SqlColName = " mb.Denominacion";
   			_fMap[7].SqlColName = " ms.Denominacion";
   			_fMap[8].SqlColName = " u.Nombre";
   			_fMap[9].SqlColName = " t.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAntecedenteAdapter 


} // namespace Berke.DG.Adapters
#endregion vAntecedente

#region vPropClienteInstruccionXCorresp
namespace Berke.DG.Adapters
{
	public class vPropClienteInstruccionXCorrespAdapter : ViewAdapter{
	
		public vPropClienteInstruccionXCorrespAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"propclienteinstruccion pci
left join instrucciontipo it
on (pci.InstruccionTipoID = it.ID) 
join cliente cl
on (pci.ClienteID = cl.ID)
left join propietario pro
on (pci.PropietarioID = pro.ID)
left join usuario u1
on (pci.FuncionarioRegID = u1.ID)
left join usuario u2
on (pci.FuncionarioRecID = u2.ID)
left join correspondencia co
on (pci.CorrespondenciaID = co.ID)" );
			
   			_fMap[0].SqlColName = "pci.ID";
   			_fMap[1].SqlColName = " pci.ClienteID";
   			_fMap[2].SqlColName = " pci.PropietarioID";
   			_fMap[3].SqlColName = " pci.FecAlta";
   			_fMap[4].SqlColName = " pci.FuncionarioRegID";
   			_fMap[5].SqlColName = " pci.FuncionarioRecID";
   			_fMap[6].SqlColName = " pci.Obs";
   			_fMap[7].SqlColName = " pci.CorrespondenciaID";
   			_fMap[8].SqlColName = " pci.InstruccionTipoID";
   			_fMap[9].SqlColName = " it.Descrip";
   			_fMap[10].SqlColName = " cl.Nombre";
   			_fMap[11].SqlColName = " pro.Nombre";
   			_fMap[12].SqlColName = " u1.Nombre";
   			_fMap[13].SqlColName = " u2.Nombre";
   			_fMap[14].SqlColName = " co.Nro";
   			_fMap[15].SqlColName = " co.Anio";
   			_fMap[16].SqlColName = " co.RefCorresp";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPropClienteInstruccionXCorrespAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropClienteInstruccionXCorresp

#region vRecordatorio
namespace Berke.DG.Adapters
{
	public class vRecordatorioAdapter : ViewAdapter{
	
		public vRecordatorioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"recordatorios r
left join usuario u1
on (r.FuncionarioRemID = u1.ID)
left join usuario u2
on (r.FuncionarioRegID = u2.ID)
join tiporecordatorio tr
on (r.TipoRecordatorioID = tr.ID)
left join AvisoOpoDet av
on (r.AvisoOpoDetID = av.ID)
left join marca m1
on (av.MarcaBaseID = m1.ID)
left join marca m2
on (av.MarcaSolID = m2.ID)" );
			
   			_fMap[0].SqlColName = "r.ID";
   			_fMap[1].SqlColName = " r.AvisoOpoDetID";
   			_fMap[2].SqlColName = " r.TipoRecordatorioID";
   			_fMap[3].SqlColName = " r.FuncionarioRemID";
   			_fMap[4].SqlColName = " r.FuncionarioRegID";
   			_fMap[5].SqlColName = " r.Obs";
   			_fMap[6].SqlColName = " r.Acuse";
   			_fMap[7].SqlColName = " r.FecAcuse";
   			_fMap[8].SqlColName = " r.FecAlta";
   			_fMap[9].SqlColName = " r.ContactoCliente";
   			_fMap[10].SqlColName = " r.ContactoAcuse";
   			_fMap[11].SqlColName = " r.Transcripcion";
   			_fMap[12].SqlColName = " u1.Nombre";
   			_fMap[13].SqlColName = " u2.Nombre";
   			_fMap[14].SqlColName = " tr.Nombre";
   			_fMap[15].SqlColName = " m1.Denominacion";
   			_fMap[16].SqlColName = " m2.Denominacion";

			this.SetDefaultWhere(@"" );
		}

	} // end class vRecordatorioAdapter 


} // namespace Berke.DG.Adapters
#endregion vRecordatorio

#region vAvisosPorMarcaSolDet
namespace Berke.DG.Adapters
{
	public class vAvisosPorMarcaSolDetAdapter : ViewAdapter{
	
		public vAvisosPorMarcaSolDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoOpoCab cab
join avisoOpoDet det
on (cab.id = det.avisoOpoCabID) 

left join usuario u
on (cab.FuncionarioGenID = u.ID)

left join usuario u2
on (cab.FuncionarioEnvioID = u2.ID)

left join TipoAviso tp
on ( cab.TipoAvisoID = tp.ID)

left join ModoEnvio me
on (cab.ModoEnvioID = me.ID)" );
			
   			_fMap[0].SqlColName = "cab.id";
   			_fMap[1].SqlColName = " cab.BolNro";
   			_fMap[2].SqlColName = " cab.BolAnio";
   			_fMap[3].SqlColName = " cab.TipoAvisoID";
   			_fMap[4].SqlColName = " cab.FecGen";
   			_fMap[5].SqlColName = " cab.FecEnvio";
   			_fMap[6].SqlColName = " det.id";
   			_fMap[7].SqlColName = " det.marcaSolID";
   			_fMap[8].SqlColName = " cab.FuncionarioGenID";
   			_fMap[9].SqlColName = " cab.FuncionarioEnvioID";
   			_fMap[10].SqlColName = " cab.ModoEnvioID";
   			_fMap[11].SqlColName = " cab.VigilanciaDocID";
   			_fMap[12].SqlColName = " cab.AvisoOpoCabID";
   			_fMap[13].SqlColName = " det.marcaBaseID";
   			_fMap[14].SqlColName = " det.marcaBaseExtID";
   			_fMap[15].SqlColName = " cab.Estado";
   			_fMap[16].SqlColName = " det.marcaSolHistID";
   			_fMap[17].SqlColName = " det.marcaBaseHistID";
   			_fMap[18].SqlColName = " u.nombre";
   			_fMap[19].SqlColName = " u2.nombre";
   			_fMap[20].SqlColName = " tp.Nombre";
   			_fMap[21].SqlColName = " tp.NroAviso";
   			_fMap[22].SqlColName = " tp.Tipo";
   			_fMap[23].SqlColName = " me.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosPorMarcaSolDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosPorMarcaSolDet

#region vGlosarioPalCom
namespace Berke.DG.Adapters
{
	public class vGlosarioPalComAdapter : ViewAdapter{
	
		public vGlosarioPalComAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"glosariopalcom g
left join usuario u
on (g.FuncionarioID = u.ID)" );
			
   			_fMap[0].SqlColName = "g.ID";
   			_fMap[1].SqlColName = " g.Palabra";
   			_fMap[2].SqlColName = " g.Estado";
   			_fMap[3].SqlColName = " g.FuncionarioID";
   			_fMap[4].SqlColName = " g.FecAlta";
   			_fMap[5].SqlColName = " g.Obs";
   			_fMap[6].SqlColName = " g.Posicion";
   			_fMap[7].SqlColName = " g.Tipo";
   			_fMap[8].SqlColName = " u.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vGlosarioPalComAdapter 


} // namespace Berke.DG.Adapters
#endregion vGlosarioPalCom

#region vAvisosPorMarcaSolCab
namespace Berke.DG.Adapters
{
	public class vAvisosPorMarcaSolCabAdapter : ViewAdapter{
	
		public vAvisosPorMarcaSolCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoOpoCab cab
join avisoOpoDet det
on (cab.id = det.avisoOpoCabID) 

join marca m
on (det.marcasolid = m.id  )

join clase cl
on (m.claseid = cl.id)


left join cliente c
on (m.ClienteID = c.ID)

join MarcaTipo  mt
on (m.MarcaTipoID = mt.ID)

join boletindet bd
on (bd.bolnro = cab.bolnro
and bd.bolanio = cab.bolanio)

join expediente expe
on (bd.expNro = expe.actanro
and bd.expAnio= expe.actaanio 
and expe.marcaid = m.id)" );
			
   			_fMap[0].SqlColName = "cab.BolNro";
   			_fMap[1].SqlColName = " cab.BolAnio";
   			_fMap[2].SqlColName = " det.marcasolid";
   			_fMap[3].SqlColName = " m.denominacion";
   			_fMap[4].SqlColName = " m.marcaTipoID";
   			_fMap[5].SqlColName = " m.claseID";
   			_fMap[6].SqlColName = " m.ExpedienteVigenteID";
   			_fMap[7].SqlColName = " m.Propietario";
   			_fMap[8].SqlColName = " m.ProPais";
   			_fMap[9].SqlColName = " bd.AgenteLocal";
   			_fMap[10].SqlColName = " mt.abrev";
   			_fMap[11].SqlColName = " bd.expNro";
   			_fMap[12].SqlColName = " bd.expanio";
   			_fMap[13].SqlColName = " cl.nro";
   			_fMap[14].SqlColName = " expe.ID";
   			_fMap[15].SqlColName = " expe.TramiteID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosPorMarcaSolCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosPorMarcaSolCab

#region vAvisosOposicion
namespace Berke.DG.Adapters
{
	public class vAvisosOposicionAdapter : ViewAdapter{
	
		public vAvisosOposicionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopodet aod
join avisoopocab aoc
on (aod.avisoopocabid = aoc.id)
join marcahist mh
on (aod.MarcaSolHistID = mh.id)
join tipoaviso ta
on (aoc.TipoAvisoID = ta.id)
join marca m
on (aod.MarcaSolID = m.ID)
join marcatipo mt
on (m.marcatipoid = mt.id)
join clase c
on (m.ClaseID = c.id)
join expediente ex
on (aod.MarcaSolID = ex.MarcaID)
join boletindet bd
on (bd.RefNro = ex.ActaNro and bd.RefAnio = ex.ActaAnio)" );
			
   			_fMap[0].SqlColName = "aod.ID";
   			_fMap[1].SqlColName = " aod.MarcaSolID";
   			_fMap[2].SqlColName = " aoc.TipoAvisoID";
   			_fMap[3].SqlColName = " aoc.BolNro";
   			_fMap[4].SqlColName = " aoc.BolAnio";
   			_fMap[5].SqlColName = " aoc.FecVencReal";
   			_fMap[6].SqlColName = " aoc.FecVenFict";
   			_fMap[7].SqlColName = " aoc.FecGen";
   			_fMap[8].SqlColName = " aoc.FecEnvio";
   			_fMap[9].SqlColName = " aoc.FuncionarioGenID";
   			_fMap[10].SqlColName = " aoc.ModoEnvioID";
   			_fMap[11].SqlColName = " aoc.FuncionarioEnvioID";
   			_fMap[12].SqlColName = " aoc.Fax";
   			_fMap[13].SqlColName = " aoc.MailTo";
   			_fMap[14].SqlColName = " aoc.MailOrigen";
   			_fMap[15].SqlColName = " aoc.Correo";
   			_fMap[16].SqlColName = " aoc.Atencion";
   			_fMap[17].SqlColName = " aoc.IdiomaID";
   			_fMap[18].SqlColName = " aoc.BusOpoCabID";
   			_fMap[19].SqlColName = " aoc.AvisoOpoCabID";
   			_fMap[20].SqlColName = " aoc.Estado";
   			_fMap[21].SqlColName = " mh.ClienteNombre";
   			_fMap[22].SqlColName = " mh.PropNombre";
   			_fMap[23].SqlColName = " mh.PropDir";
   			_fMap[24].SqlColName = " ta.NroAviso";
   			_fMap[25].SqlColName = " ta.Tipo";
   			_fMap[26].SqlColName = " ta.Nombre";
   			_fMap[27].SqlColName = " ta.Descripcion";
   			_fMap[28].SqlColName = " mt.Descrip";
   			_fMap[29].SqlColName = " mt.Abrev";
   			_fMap[30].SqlColName = " c.DescripBreve";
   			_fMap[31].SqlColName = " m.Denominacion";
   			_fMap[32].SqlColName = " m.DenominacionClave";
   			_fMap[33].SqlColName = " m.Fonetizada";
   			_fMap[34].SqlColName = " m.MarcaTipoID";
   			_fMap[35].SqlColName = " m.ClaseID";
   			_fMap[36].SqlColName = " m.ClaseDescripEsp";
   			_fMap[37].SqlColName = " bd.ID";
   			_fMap[38].SqlColName = " bd.SolicitudFecha";
   			_fMap[39].SqlColName = " bd.ExpNro";
   			_fMap[40].SqlColName = " bd.ExpAnio";
   			_fMap[41].SqlColName = " bd.Clase";
   			_fMap[42].SqlColName = " bd.MarcaTipo";
   			_fMap[43].SqlColName = " bd.Tramite";
   			_fMap[44].SqlColName = " bd.Denominacion";
   			_fMap[45].SqlColName = " bd.Propietario";
   			_fMap[46].SqlColName = " bd.Pais";
   			_fMap[47].SqlColName = " bd.AgenteLocal";
   			_fMap[48].SqlColName = " bd.RefNro";
   			_fMap[49].SqlColName = " bd.RefAnio";
   			_fMap[50].SqlColName = " bd.RefRegNro";
   			_fMap[51].SqlColName = " bd.Obs";
   			_fMap[52].SqlColName = " bd.ExpedienteID";
   			_fMap[53].SqlColName = " bd.BolAnio";
   			_fMap[54].SqlColName = " bd.BolNro";
   			_fMap[55].SqlColName = " ex.ActaNro";
   			_fMap[56].SqlColName = " ex.ActaAnio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosOposicionAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosOposicion

#region vAvisosGen
namespace Berke.DG.Adapters
{
	public class vAvisosGenAdapter : ViewAdapter{
	
		public vAvisosGenAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopodet aod
join avisoopocab aoc
on (aod.avisoopocabid = aoc.id)
join marcahist mh1
on (aod.MarcaSolHistID = mh1.id)
join marcahist mh2
on (aod.MarcaBaseHistID = mh2.id)
join tipoaviso ta
on (aoc.TipoAvisoID = ta.id)
left join usuario u1
on (aoc.FuncionarioGenID = u1.id)
left join usuario u2
on (aoc.FuncionarioEnvioID = u2.id)
left join modoenvio m
on (aoc.ModoEnvioID = m.id)" );
			
   			_fMap[0].SqlColName = "aod.ID";
   			_fMap[1].SqlColName = " aod.MarcaSolID";
   			_fMap[2].SqlColName = " aod.MarcaBaseID";
   			_fMap[3].SqlColName = " aod.MarcaBaseExtID";
   			_fMap[4].SqlColName = " aod.AvisoOpoCabID";
   			_fMap[5].SqlColName = " aod.Chance";
   			_fMap[6].SqlColName = " aod.MarcaBaseHistID";
   			_fMap[7].SqlColName = " aoc.TipoAvisoID";
   			_fMap[8].SqlColName = " aoc.BolNro";
   			_fMap[9].SqlColName = " aoc.BolAnio";
   			_fMap[10].SqlColName = " aoc.FecVencReal";
   			_fMap[11].SqlColName = " aoc.FecVenFict";
   			_fMap[12].SqlColName = " aoc.FecGen";
   			_fMap[13].SqlColName = " aoc.FecEnvio";
   			_fMap[14].SqlColName = " aoc.FuncionarioGenID";
   			_fMap[15].SqlColName = " aoc.ModoEnvioID";
   			_fMap[16].SqlColName = " aoc.FuncionarioEnvioID";
   			_fMap[17].SqlColName = " aoc.Fax";
   			_fMap[18].SqlColName = " aoc.MailTo";
   			_fMap[19].SqlColName = " aoc.MailOrigen";
   			_fMap[20].SqlColName = " aoc.Correo";
   			_fMap[21].SqlColName = " aoc.Atencion";
   			_fMap[22].SqlColName = " aoc.IdiomaID";
   			_fMap[23].SqlColName = " aoc.BusOpoCabID";
   			_fMap[24].SqlColName = " aoc.AvisoOpoCabID";
   			_fMap[25].SqlColName = " aoc.Estado";
   			_fMap[26].SqlColName = " mh1.Denominacion";
   			_fMap[27].SqlColName = " mh1.DenominacionClave";
   			_fMap[28].SqlColName = " mh1.Clase";
   			_fMap[29].SqlColName = " mh1.ActaNro";
   			_fMap[30].SqlColName = " mh1.ActaAnio";
   			_fMap[31].SqlColName = " mh1.PropPais";
   			_fMap[32].SqlColName = " mh1.Nuestra";
   			_fMap[33].SqlColName = " mh1.Vigilada";
   			_fMap[34].SqlColName = " mh1.RegistroNro";
   			_fMap[35].SqlColName = " mh1.FecSol";
   			_fMap[36].SqlColName = " mh1.ClienteID";
   			_fMap[37].SqlColName = " mh1.MarcaTipoID";
   			_fMap[38].SqlColName = " mh1.ClienteNombre";
   			_fMap[39].SqlColName = " mh1.PropNombre";
   			_fMap[40].SqlColName = " mh1.PropDir";
   			_fMap[41].SqlColName = " mh2.Denominacion";
   			_fMap[42].SqlColName = " mh2.DenominacionClave";
   			_fMap[43].SqlColName = " mh2.Clase";
   			_fMap[44].SqlColName = " mh2.ActaNro";
   			_fMap[45].SqlColName = " mh2.ActaAnio";
   			_fMap[46].SqlColName = " mh2.PropPais";
   			_fMap[47].SqlColName = " mh2.Nuestra";
   			_fMap[48].SqlColName = " mh2.Vigilada";
   			_fMap[49].SqlColName = " mh2.RegistroNro";
   			_fMap[50].SqlColName = " mh2.FecSol";
   			_fMap[51].SqlColName = " mh2.ClienteID";
   			_fMap[52].SqlColName = " mh2.MarcaTipoID";
   			_fMap[53].SqlColName = " mh2.ClienteNombre";
   			_fMap[54].SqlColName = " mh2.PropNombre";
   			_fMap[55].SqlColName = " mh2.PropDir";
   			_fMap[56].SqlColName = " ta.NroAviso";
   			_fMap[57].SqlColName = " ta.Tipo";
   			_fMap[58].SqlColName = " ta.Nombre";
   			_fMap[59].SqlColName = " ta.Descripcion";
   			_fMap[60].SqlColName = " u1.Nombre";
   			_fMap[61].SqlColName = " u2.Nombre";
   			_fMap[62].SqlColName = " m.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosGenAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosGen

#region vModoEnvio
namespace Berke.DG.Adapters
{
	public class vModoEnvioAdapter : ViewAdapter{
	
		public vModoEnvioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"modoenvio mo
left join cviacom cv
on (mo.cviacomid = cv.idvia)" );
			
   			_fMap[0].SqlColName = "mo.ID";
   			_fMap[1].SqlColName = " mo.Nombre";
   			_fMap[2].SqlColName = " mo.Descripcion";
   			_fMap[3].SqlColName = " mo.CViaComID";
   			_fMap[4].SqlColName = " cv.descrip";
   			_fMap[5].SqlColName = " cv.abrev";

			this.SetDefaultWhere(@"" );
		}

	} // end class vModoEnvioAdapter 


} // namespace Berke.DG.Adapters
#endregion vModoEnvio

#region vSuscripcion
namespace Berke.DG.Adapters
{
	public class vSuscripcionAdapter : ViewAdapter{
	
		public vSuscripcionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Suscripcion s
left join usuario u1
on (s.FuncionarioRegID = u1.ID)
left join usuario u2
on (s.ClienteInternoID = u2.ID)
left join cliente c
on (s.ClienteExternoID = c.ID)
left join cidioma idio
on (c.idiomaid = idio.ididioma)
left join ModoEnvio m
on (s.ModoEnvioID = m.ID)
left join CViacom cv
on (m.CviacomID = cv.idvia)
join SuscripcionTipo st
on (s.SuscripcionTipoID = st.ID)" );
			
   			_fMap[0].SqlColName = "s.ID";
   			_fMap[1].SqlColName = " s.Origen";
   			_fMap[2].SqlColName = " u1.Nombre";
   			_fMap[3].SqlColName = " u1.ID";
   			_fMap[4].SqlColName = " c.Nombre";
   			_fMap[5].SqlColName = " c.ID";
   			_fMap[6].SqlColName = " c.IdiomaID";
   			_fMap[7].SqlColName = " idio.descrip";
   			_fMap[8].SqlColName = " idio.abrev";
   			_fMap[9].SqlColName = " u2.Nombre";
   			_fMap[10].SqlColName = " u2.ID";
   			_fMap[11].SqlColName = " s.Mail";
   			_fMap[12].SqlColName = " s.Fax";
   			_fMap[13].SqlColName = " s.FecSuscripcion";
   			_fMap[14].SqlColName = " s.FecVencimiento";
   			_fMap[15].SqlColName = " s.Estado";
   			_fMap[16].SqlColName = " m.ID";
   			_fMap[17].SqlColName = " m.Nombre";
   			_fMap[18].SqlColName = " cv.idvia";
   			_fMap[19].SqlColName = " cv.descrip";
   			_fMap[20].SqlColName = " s.Msg";
   			_fMap[21].SqlColName = " s.Obs";
   			_fMap[22].SqlColName = " st.ID";
   			_fMap[23].SqlColName = " st.Tipo";
   			_fMap[24].SqlColName = " st.Nombre";
   			_fMap[25].SqlColName = " st.Descripcion";
   			_fMap[26].SqlColName = " st.FecAlta";
   			_fMap[27].SqlColName = " st.Propietario";
   			_fMap[28].SqlColName = " st.Periodo";
   			_fMap[29].SqlColName = " st.FecVencSit";
   			_fMap[30].SqlColName = " st.Registrado";
   			_fMap[31].SqlColName = " st.PlantillaID";
   			_fMap[32].SqlColName = " st.MailOrigen";
   			_fMap[33].SqlColName = " st.MailSubject";
   			_fMap[34].SqlColName = " s.FecAlta";
   			_fMap[35].SqlColName = " s.FecBaja";

			this.SetDefaultWhere(@"" );
		}

	} // end class vSuscripcionAdapter 


} // namespace Berke.DG.Adapters
#endregion vSuscripcion

#region vAvisosTotSinInst
namespace Berke.DG.Adapters
{
	public class vAvisosTotSinInstAdapter : ViewAdapter{
	
		public vAvisosTotSinInstAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopodet aod
join avisoopocab aoc
on (aod.avisoopocabid = aoc.id)" );
			
   			_fMap[0].SqlColName = "aoc.BolNro";
   			_fMap[1].SqlColName = " aoc.BolAnio";
   			_fMap[2].SqlColName = " aoc.Estado";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosTotSinInstAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosTotSinInst

#region vAvisosTotConInst
namespace Berke.DG.Adapters
{
	public class vAvisosTotConInstAdapter : ViewAdapter{
	
		public vAvisosTotConInstAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopodet aod
join avisoopocab aoc
on (aod.avisoopocabid = aoc.id)
join AvisoInstruccion ai
on (ai.AvisoOpoDetID = aod.ID)" );
			
   			_fMap[0].SqlColName = "aoc.BolNro";
   			_fMap[1].SqlColName = " aoc.BolAnio";
   			_fMap[2].SqlColName = " aoc.Estado";
   			_fMap[3].SqlColName = " ai.InstruccionTipoID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosTotConInstAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosTotConInst

#region vSuscripcionTipoPl
namespace Berke.DG.Adapters
{
	public class vSuscripcionTipoPlAdapter : ViewAdapter{
	
		public vSuscripcionTipoPlAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"suscripciontipopl s
join SuscripcionTipo st
on (s.SuscripcionTipoID = st.ID)
left join documentoplantilla d
on (s.PlantillaID = d.ID)
left join cidioma i
on (d.IdiomaID = i.ididioma)" );
			
   			_fMap[0].SqlColName = "s.ID";
   			_fMap[1].SqlColName = " s.SuscripcionTipoID";
   			_fMap[2].SqlColName = " s.PlantillaID";
   			_fMap[3].SqlColName = " s.Activo";
   			_fMap[4].SqlColName = " d.IdiomaID";
   			_fMap[5].SqlColName = " d.Descrip";
   			_fMap[6].SqlColName = " i.descrip";
   			_fMap[7].SqlColName = " i.abrev";
   			_fMap[8].SqlColName = " st.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vSuscripcionTipoPlAdapter 


} // namespace Berke.DG.Adapters
#endregion vSuscripcionTipoPl

#region vTipoAvisoPlantilla
namespace Berke.DG.Adapters
{
	public class vTipoAvisoPlantillaAdapter : ViewAdapter{
	
		public vTipoAvisoPlantillaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"TipoAvisoPl tap
join TipoAviso ta
on (tap.TipoAvisoID = ta.ID)
left join DocumentoPlantilla d
on (tap.PlantillaID = d.ID)" );
			
   			_fMap[0].SqlColName = "tap.ID";
   			_fMap[1].SqlColName = " tap.TipoAvisoID";
   			_fMap[2].SqlColName = " tap.PlantillaID";
   			_fMap[3].SqlColName = " tap.Activo";
   			_fMap[4].SqlColName = " ta.Nombre";
   			_fMap[5].SqlColName = " d.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vTipoAvisoPlantillaAdapter 


} // namespace Berke.DG.Adapters
#endregion vTipoAvisoPlantilla

#region vListadoCabListadoDet
namespace Berke.DG.Adapters
{
	public class vListadoCabListadoDetAdapter : ViewAdapter{
	
		public vListadoCabListadoDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ListadoCab lc
join ListadoDet ld
on (ld.ListadoCabID = lc.ID)
join SuscripcionTipo st
on (lc.SuscripcionTipoID = st.ID)
left join usuario u
on (lc.FuncionarioGenID = u.ID) 
join Expediente ex
on (ld.ExpedienteID = ex.ID)
join BoletinDet bd
on (bd.ExpNro = ld.ActaNro AND bd.ExpAnio = ld.ActaAnio)" );
			
   			_fMap[0].SqlColName = "lc.ID";
   			_fMap[1].SqlColName = " lc.SuscripcionTipoID";
   			_fMap[2].SqlColName = " lc.FuncionarioGenID";
   			_fMap[3].SqlColName = " lc.FecGen";
   			_fMap[4].SqlColName = " lc.FecDesde";
   			_fMap[5].SqlColName = " lc.FecHasta";
   			_fMap[6].SqlColName = " st.Nombre";
   			_fMap[7].SqlColName = " u.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vListadoCabListadoDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vListadoCabListadoDet

#region vListadoDetHistorico
namespace Berke.DG.Adapters
{
	public class vListadoDetHistoricoAdapter : ViewAdapter{
	
		public vListadoDetHistoricoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ListadoCab lc
join ListadoDet ld
on (ld.ListadoCabID = lc.ID)
join ListadoEnvio le
on (le.ListadoCabID = lc.ID)
join SuscripcionTipo st
on (lc.SuscripcionTipoID = st.ID)
join Expediente ex
on (ld.ExpedienteID = ex.ID)
join Marca m
on (m.ID = ex.MarcaID)
join MarcaTipo mt
on (m.MarcaTipoID = mt.ID)
join Clase cl
on (m.ClaseID = cl.ID)" );
			
   			_fMap[0].SqlColName = "lc.ID";
   			_fMap[1].SqlColName = " lc.FecDesde";
   			_fMap[2].SqlColName = " lc.FecHasta";
   			_fMap[3].SqlColName = " lc.SuscripcionTipoID";
   			_fMap[4].SqlColName = " ld.ExpedienteID";
   			_fMap[5].SqlColName = " ld.FecVencSit";
   			_fMap[6].SqlColName = " ld.ActaNro";
   			_fMap[7].SqlColName = " ld.ActaAnio";
   			_fMap[8].SqlColName = " ld.SituacionID";
   			_fMap[9].SqlColName = " ld.Propietario";
   			_fMap[10].SqlColName = " ld.Pais";
   			_fMap[11].SqlColName = " m.Denominacion";
   			_fMap[12].SqlColName = " mt.Abrev";
   			_fMap[13].SqlColName = " cl.Nro";
   			_fMap[14].SqlColName = " st.Nombre";
   			_fMap[15].SqlColName = " st.Descripcion";
   			_fMap[16].SqlColName = " st.MailOrigen";
   			_fMap[17].SqlColName = " st.MailSubject";

			this.SetDefaultWhere(@"" );
		}

	} // end class vListadoDetHistoricoAdapter 


} // namespace Berke.DG.Adapters
#endregion vListadoDetHistorico

#region vListadoCabListadoEnvio
namespace Berke.DG.Adapters
{
	public class vListadoCabListadoEnvioAdapter : ViewAdapter{
	
		public vListadoCabListadoEnvioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ListadoEnvio le
left join cliente c
on (le.ClienteExternoID = c.ID)
left join usuario u
on (le.ClienteInternoID = u.ID) 
left join ModoEnvio me
on (le.ModoEnvioID = me.ID)" );
			
   			_fMap[0].SqlColName = "le.ID";
   			_fMap[1].SqlColName = " le.ModoEnvioID";
   			_fMap[2].SqlColName = " le.SuscripcionID";
   			_fMap[3].SqlColName = " le.ListadoCabID";
   			_fMap[4].SqlColName = " le.ClienteExternoID";
   			_fMap[5].SqlColName = " le.ClienteInternoID";
   			_fMap[6].SqlColName = " le.MailTo";
   			_fMap[7].SqlColName = " le.MailOrigen";
   			_fMap[8].SqlColName = " le.MailSubject";
   			_fMap[9].SqlColName = " le.Fax";
   			_fMap[10].SqlColName = " le.Msg";
   			_fMap[11].SqlColName = " le.FecEnvio";
   			_fMap[12].SqlColName = " le.IdiomaID";
   			_fMap[13].SqlColName = " c.Nombre";
   			_fMap[14].SqlColName = " u.Nombre";
   			_fMap[15].SqlColName = " me.CViaComID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vListadoCabListadoEnvioAdapter 


} // namespace Berke.DG.Adapters
#endregion vListadoCabListadoEnvio

#region vViewAvisoOpo
namespace Berke.DG.Adapters
{
	public class vViewAvisoOpoAdapter : ViewAdapter{
	
		public vViewAvisoOpoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"AvisoOpoCab aoc
join ModoEnvio me
  on aoc.ModoEnvioID = me.ID
join Usuario u
  on aoc.FuncionarioEnvioID = u.ID
join TipoAviso ta
  on aoc.TipoAvisoID = ta.ID" );
			
   			_fMap[0].SqlColName = "aoc.MarcaBaseID";
   			_fMap[1].SqlColName = " aoc.VigilanciaDocID";
   			_fMap[2].SqlColName = " aoc.ModoEnvioID";
   			_fMap[3].SqlColName = " me.Nombre";
   			_fMap[4].SqlColName = " aoc.FecEnvio";
   			_fMap[5].SqlColName = " aoc.FuncionarioEnvioID";
   			_fMap[6].SqlColName = " u.Nombre";
   			_fMap[7].SqlColName = " u.Usuario";
   			_fMap[8].SqlColName = " u.Nick";
   			_fMap[9].SqlColName = " aoc.TipoAvisoID";
   			_fMap[10].SqlColName = " ta.Nombre";
   			_fMap[11].SqlColName = " ta.NroAviso";

			this.SetDefaultWhere(@"aoc.Estado = 'E'" );
		}

	} // end class vViewAvisoOpoAdapter 


} // namespace Berke.DG.Adapters
#endregion vViewAvisoOpo

#region vAvisosInstruccion
namespace Berke.DG.Adapters
{
	public class vAvisosInstruccionAdapter : ViewAdapter{
	
		public vAvisosInstruccionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoinstruccion ai
join instrucciontipo it
on (ai.InstruccionTipoID = it.ID)
left join usuario u1
on (ai.FuncionarioRegID = u1.ID)
left join usuario u2
on (ai.FuncionarioRecID = u2.ID)
left join correspondencia co
on (ai.CorrespondenciaID = co.ID)" );
			
   			_fMap[0].SqlColName = "ai.ID";
   			_fMap[1].SqlColName = " ai.AvisoOpoDetID";
   			_fMap[2].SqlColName = " ai.InstruccionTipoID";
   			_fMap[3].SqlColName = " ai.Obs";
   			_fMap[4].SqlColName = " ai.FecAlta";
   			_fMap[5].SqlColName = " ai.CorrespondenciaID";
   			_fMap[6].SqlColName = " ai.FuncionarioRegID";
   			_fMap[7].SqlColName = " ai.FuncionarioRecID";
   			_fMap[8].SqlColName = " ai.MarcaBaseID";
   			_fMap[9].SqlColName = " ai.MarcaBaseExtID";
   			_fMap[10].SqlColName = " it.Descrip";
   			_fMap[11].SqlColName = " u1.Nombre";
   			_fMap[12].SqlColName = " u2.Nombre";
   			_fMap[13].SqlColName = " co.Nro";
   			_fMap[14].SqlColName = " co.Anio";
   			_fMap[15].SqlColName = " co.RefCorresp";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisosInstruccionAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisosInstruccion

#region vConsultaPropClienteInstruccion
namespace Berke.DG.Adapters
{
	public class vConsultaPropClienteInstruccionAdapter : ViewAdapter{
	
		public vConsultaPropClienteInstruccionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"PropClienteInstruccion pci
join cliente cli
  on cli.ID = pci.clienteid
left join propietario pro
  on pro.ID = pci.propietarioid
left join correspondencia cor
  on cor.ID = pci.correspondenciaid
left join correspondenciamov cormov
  on cormov.correspondenciaid = cor.ID
left join instrucciontipo it
  on it.ID = pci.instrucciontipoid" );
			
   			_fMap[0].SqlColName = "pci.clienteid";
   			_fMap[1].SqlColName = " cli.nombre";
   			_fMap[2].SqlColName = " pci.propietarioid";
   			_fMap[3].SqlColName = " pro.nombre";
   			_fMap[4].SqlColName = " pci.fecalta";
   			_fMap[5].SqlColName = " pci.funcionarioregid";
   			_fMap[6].SqlColName = " pci.funcionariorecid";
   			_fMap[7].SqlColName = " pci.obs";
   			_fMap[8].SqlColName = " pci.correspondenciaid";
   			_fMap[9].SqlColName = " cor.nro";
   			_fMap[10].SqlColName = " cor.anio";
   			_fMap[11].SqlColName = " cormov.codarea";
   			_fMap[12].SqlColName = " pci.instrucciontipoid";
   			_fMap[13].SqlColName = " it.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vConsultaPropClienteInstruccionAdapter 


} // namespace Berke.DG.Adapters
#endregion vConsultaPropClienteInstruccion

#region vBusOpoCabDetRes
namespace Berke.DG.Adapters
{
	public class vBusOpoCabDetResAdapter : ViewAdapter{
	
		public vBusOpoCabDetResAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"BusOpoRes bor 
join BusOpoDet bod
on (bor.BusOpoDetID = bod.ID)
join BusOpoCab boc
on (bod.BusOpoCabID = boc.ID)" );
			
   			_fMap[0].SqlColName = "bod.Denominacion";
   			_fMap[1].SqlColName = " bod.FecSol";

			this.SetDefaultWhere(@"" );
		}

	} // end class vBusOpoCabDetResAdapter 


} // namespace Berke.DG.Adapters
#endregion vBusOpoCabDetRes

#region vClaseRelacionada
namespace Berke.DG.Adapters
{
	public class vClaseRelacionadaAdapter : ViewAdapter{
	
		public vClaseRelacionadaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"clase_clase cc
join clase c
on (cc.ClaseID = c.ID)
join clase cr
on (cc.ClaseRelacID = cr.ID)
join NizaEdicion ne
on (cr.NizaEdicionID = ne.ID)" );
			
   			_fMap[0].SqlColName = "c.ID";
   			_fMap[1].SqlColName = " c.NizaEdicionID";
   			_fMap[2].SqlColName = " c.Nro";
   			_fMap[3].SqlColName = " cr.Nro";
   			_fMap[4].SqlColName = " cr.NizaEdicionID";
   			_fMap[5].SqlColName = " cr.Descrip";
   			_fMap[6].SqlColName = " cr.DescripBreve";
   			_fMap[7].SqlColName = " cc.Ancestro";
   			_fMap[8].SqlColName = " cc.Vigilancia";
   			_fMap[9].SqlColName = " ne.Abrev";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClaseRelacionadaAdapter 


} // namespace Berke.DG.Adapters
#endregion vClaseRelacionada

#region vClaseNizaEdicion
namespace Berke.DG.Adapters
{
	public class vClaseNizaEdicionAdapter : ViewAdapter{
	
		public vClaseNizaEdicionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"clase c
join NizaEdicion ne
on(c.NizaEdicionID = ne.ID)" );
			
   			_fMap[0].SqlColName = "c.ID";
   			_fMap[1].SqlColName = " c.Nro";
   			_fMap[2].SqlColName = " c.NizaEdicionID";
   			_fMap[3].SqlColName = " c.Descrip";
   			_fMap[4].SqlColName = " c.DescripBreve";
   			_fMap[5].SqlColName = " ne.Abrev";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClaseNizaEdicionAdapter 


} // namespace Berke.DG.Adapters
#endregion vClaseNizaEdicion

#region vBusCab
namespace Berke.DG.Adapters
{
	public class vBusCabAdapter : ViewAdapter{
	
		public vBusCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"busOpoCab bc
left join SuscripcionTipo st
on ( bc.SuscripcionTipoID = st.ID)
left join usuario f
on (bc.funcionarioid = f.id)
left join AvisoOpoCab aov
on (bc.ID = aov.BusOpoCabID)" );
			
   			_fMap[0].SqlColName = "bc.ID";
   			_fMap[1].SqlColName = " bc.BolNro";
   			_fMap[2].SqlColName = " bc.BolAnio";
   			_fMap[3].SqlColName = " bc.BolCarpeta";
   			_fMap[4].SqlColName = " bc.Tipo";
   			_fMap[5].SqlColName = " bc.SuscripcionTipoID";
   			_fMap[6].SqlColName = " bc.FuncionarioID";
   			_fMap[7].SqlColName = " bc.FecAlta";
   			_fMap[8].SqlColName = " bc.FecFin";
   			_fMap[9].SqlColName = " bc.Estado";
   			_fMap[10].SqlColName = " bc.Texto";
   			_fMap[11].SqlColName = " bc.BusClaseRel";
   			_fMap[12].SqlColName = " bc.BusPuntmin";
   			_fMap[13].SqlColName = " st.Tipo";
   			_fMap[14].SqlColName = " st.nombre";
   			_fMap[15].SqlColName = " f.nombre";
   			_fMap[16].SqlColName = " f.nick";

			this.SetDefaultWhere(@"" );
		}

	} // end class vBusCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vBusCab

#region vAlertaVigilancia
namespace Berke.DG.Adapters
{
	public class vAlertaVigilanciaAdapter : ViewAdapter{
	
		public vAlertaVigilanciaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"AlertaVigilancia av
left join usuario u1
on (av.Remitente = u1.ID)
left join usuario u2
on (av.Destinatario = u2.ID)" );
			
   			_fMap[0].SqlColName = "av.ID";
   			_fMap[1].SqlColName = " av.FechaAlta";
   			_fMap[2].SqlColName = " av.FechaAlerta";
   			_fMap[3].SqlColName = " av.Asunto";
   			_fMap[4].SqlColName = " av.Remitente";
   			_fMap[5].SqlColName = " av.Destinatario";
   			_fMap[6].SqlColName = " av.Indicaciones";
   			_fMap[7].SqlColName = " av.Prioridad";
   			_fMap[8].SqlColName = " av.Leido";
   			_fMap[9].SqlColName = " u1.Nombre";
   			_fMap[10].SqlColName = " u2.Nombre";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAlertaVigilanciaAdapter 


} // namespace Berke.DG.Adapters
#endregion vAlertaVigilancia

#region vAtencionCliente
namespace Berke.DG.Adapters
{
	public class vAtencionClienteAdapter : ViewAdapter{
	
		public vAtencionClienteAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"atencion ate
join AtencionXVia av
on (ate.ID = av.AtencionID)" );
			
   			_fMap[0].SqlColName = "ate.ID";
   			_fMap[1].SqlColName = " ate.Nombre";
   			_fMap[2].SqlColName = " ate.Obs";
   			_fMap[3].SqlColName = " ate.ClienteID";
   			_fMap[4].SqlColName = " ate.AreaID";
   			_fMap[5].SqlColName = " av.ViaID";
   			_fMap[6].SqlColName = " av.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAtencionClienteAdapter 


} // namespace Berke.DG.Adapters
#endregion vAtencionCliente

#region vListado
namespace Berke.DG.Adapters
{
	public class vListadoAdapter : ViewAdapter{
	
		public vListadoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"BoletinDet bt
left join Expediente ex
on (bt.ExpNro = ex.ActaNro and bt.ExpAnio = ex.ActaAnio)
join Expediente_Situacion es
on (ex.ID = es.ExpedienteID)
join Tramite_Sit ts
on (es.TramiteSitID = ts.ID)
join Situacion s
on ts.SituacionID = s.ID 
join Marca m
on (ex.MarcaID = m.ID)
join MarcaTipo mt
on (m.MarcaTipoID = mt.ID)" );
			
   			_fMap[0].SqlColName = "ex.ActaNro";
   			_fMap[1].SqlColName = " m.Propietario";
   			_fMap[2].SqlColName = " m.Denominacion";
   			_fMap[3].SqlColName = " m.ProPais";
   			_fMap[4].SqlColName = " bt.Tramite";
   			_fMap[5].SqlColName = " s.ID";
   			_fMap[6].SqlColName = " s.Descrip";
   			_fMap[7].SqlColName = " bt.Clase";
   			_fMap[8].SqlColName = " m.MarcaTipoID";
   			_fMap[9].SqlColName = " mt.Descrip";
   			_fMap[10].SqlColName = " mt.Abrev";
   			_fMap[11].SqlColName = " ex.ActaAnio";
   			_fMap[12].SqlColName = " es.ExpedienteID";
   			_fMap[13].SqlColName = " es.VencimientoFecha";
   			_fMap[14].SqlColName = " m.AgenteLocalID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vListadoAdapter 


} // namespace Berke.DG.Adapters
#endregion vListado

#region vListadoNoExp
namespace Berke.DG.Adapters
{
	public class vListadoNoExpAdapter : ViewAdapter{
	
		public vListadoNoExpAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"BoletinDet bt
left join Expediente ex
on (bt.ExpNro = ex.ActaNro and bt.ExpAnio = ex.ActaAnio)
join Expediente_Situacion es
on (ex.ID = es.ExpedienteID)
join Tramite_Sit ts
on (es.TramiteSitID = ts.ID)
join Situacion s
on ts.SituacionID = s.ID 
join Marca m
on (ex.MarcaID = m.ID)
join MarcaTipo mt
on (m.MarcaTipoID = mt.ID)
join TramiteBoletin tb
on ((bt.Tramite = tb.Abrev) and (tb.TramiteID IS NULL ))" );
			
   			_fMap[0].SqlColName = "ex.ActaNro";
   			_fMap[1].SqlColName = " bt.Propietario";
   			_fMap[2].SqlColName = " bt.Pais";
   			_fMap[3].SqlColName = " m.Denominacion";
   			_fMap[4].SqlColName = " bt.Tramite";
   			_fMap[5].SqlColName = " s.ID";
   			_fMap[6].SqlColName = " s.Descrip";
   			_fMap[7].SqlColName = " bt.Clase";
   			_fMap[8].SqlColName = " m.MarcaTipoID";
   			_fMap[9].SqlColName = " mt.Descrip";
   			_fMap[10].SqlColName = " mt.Abrev";
   			_fMap[11].SqlColName = " ex.ActaAnio";
   			_fMap[12].SqlColName = " es.ExpedienteID";
   			_fMap[13].SqlColName = " es.VencimientoFecha";
   			_fMap[14].SqlColName = " bt.AgenteLocal";

			this.SetDefaultWhere(@"" );
		}

	} // end class vListadoNoExpAdapter 


} // namespace Berke.DG.Adapters
#endregion vListadoNoExp

#region vMarcaExt
namespace Berke.DG.Adapters
{
	public class vMarcaExtAdapter : ViewAdapter{
	
		public vMarcaExtAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marcaext m
left join usuario u
on (m.FuncionarioID = u.ID)
left join cliente c
on (m.ClienteID = c.ID)
left join Correspondencia co
on (m.CorrespondenciaID = co.ID)" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.PropietarioID";
   			_fMap[2].SqlColName = " m.Denominacion";
   			_fMap[3].SqlColName = " m.DenominacionClave";
   			_fMap[4].SqlColName = " m.Clase";
   			_fMap[5].SqlColName = " m.MotivoReg";
   			_fMap[6].SqlColName = " m.ActaNro";
   			_fMap[7].SqlColName = " m.ActaAnio";
   			_fMap[8].SqlColName = " m.RegNro";
   			_fMap[9].SqlColName = " m.PaisRegistro";
   			_fMap[10].SqlColName = " m.FuncionarioID";
   			_fMap[11].SqlColName = " m.FecAlta";
   			_fMap[12].SqlColName = " m.FecUltModif";
   			_fMap[13].SqlColName = " m.PropNombre";
   			_fMap[14].SqlColName = " m.PropDir";
   			_fMap[15].SqlColName = " m.PropPais";
   			_fMap[16].SqlColName = " m.ClienteID";
   			_fMap[17].SqlColName = " m.CorrespondenciaID";
   			_fMap[18].SqlColName = " u.Nombre";
   			_fMap[19].SqlColName = " c.Nombre";
   			_fMap[20].SqlColName = " co.Nro";
   			_fMap[21].SqlColName = " co.Anio";
   			_fMap[22].SqlColName = " co.RefCorresp";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaExtAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaExt

#region vSeguimientoAvisos
namespace Berke.DG.Adapters
{
	public class vSeguimientoAvisosAdapter : ViewAdapter{
	
		public vSeguimientoAvisosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoOpoCab cab
join avisoOpoDet det
on (cab.ID = det.AvisoOpoCabID)

left join marcaHist histBase
on (det.marcaBaseHistID = histBase.ID)

left join marcaHist histSol
on (det.marcaSolHistID = histSol.ID)

left join usuario ug

on ( cab.funcionarioGenID = ug.id)

left join usuario ue

on ( cab.funcionarioEnvioID = ue.id)

left join TipoAviso tp
on (cab.TipoAvisoID = tp.ID)

left join ModoEnvio md
on (cab.ModoEnvioID= md.ID)

left join MarcaTipo mtb
on (histBase.MarcaTipoID = mtb.id)

left join MarcaTipo mts
on (histSol.MarcaTipoID = mts.id)

left join AvisoInstruccion ins
on (det.id = ins.avisoOpoDetID)

left join InstruccionTipo it
on ( ins.InstruccionTipoID = it.ID)

left join Expediente ex
on (ex.MarcaID = det.MarcaSolID)

left join Expediente_Situacion esi
on (esi.ExpedienteID = ex.ID)

left join Correspondencia co
on (ins.CorrespondenciaID = co.ID)" );
			
   			_fMap[0].SqlColName = "cab.ID";
   			_fMap[1].SqlColName = " cab.bolNro";
   			_fMap[2].SqlColName = " cab.bolAnio";
   			_fMap[3].SqlColName = " cab.fecVencReal";
   			_fMap[4].SqlColName = " cab.fecVenFict";
   			_fMap[5].SqlColName = " cab.fecGen";
   			_fMap[6].SqlColName = " cab.fecEnvio";
   			_fMap[7].SqlColName = " cab.mailTo";
   			_fMap[8].SqlColName = " cab.mailOrigen";
   			_fMap[9].SqlColName = " cab.atencion";
   			_fMap[10].SqlColName = " cab.idiomaID";
   			_fMap[11].SqlColName = " cab.estado";
   			_fMap[12].SqlColName = " cab.busOpoCabId";
   			_fMap[13].SqlColName = " cab.AvisoOpoCabID";
   			_fMap[14].SqlColName = " cab.TipoAvisoID";
   			_fMap[15].SqlColName = " cab.ModoEnvioID";
   			_fMap[16].SqlColName = " det.marcaBaseID";
   			_fMap[17].SqlColName = " det.marcaSolID";
   			_fMap[18].SqlColName = " det.marcaBaseHistID";
   			_fMap[19].SqlColName = " det.marcaSolHistID";
   			_fMap[20].SqlColName = " histBase.denominacion";
   			_fMap[21].SqlColName = " histBase.ClienteNombre";
   			_fMap[22].SqlColName = " histBase.clase";
   			_fMap[23].SqlColName = " histBase.ActaNro";
   			_fMap[24].SqlColName = " histBase.ActaAnio";
   			_fMap[25].SqlColName = " histBase.RegistroNro";
   			_fMap[26].SqlColName = " histBase.FecSol";
   			_fMap[27].SqlColName = " histBase.PropNombre";
   			_fMap[28].SqlColName = " histBase.MarcaTipoID";
   			_fMap[29].SqlColName = " mtb.abrev";
   			_fMap[30].SqlColName = " histSol.denominacion";
   			_fMap[31].SqlColName = " histSol.ClienteNombre";
   			_fMap[32].SqlColName = " histSol.clase";
   			_fMap[33].SqlColName = " histSol.ActaNro";
   			_fMap[34].SqlColName = " histSol.ActaAnio";
   			_fMap[35].SqlColName = " histSol.RegistroNro";
   			_fMap[36].SqlColName = " histSol.FecSol";
   			_fMap[37].SqlColName = " histSol.PropNombre";
   			_fMap[38].SqlColName = " histSol.MarcaTipoID";
   			_fMap[39].SqlColName = " mts.abrev";
   			_fMap[40].SqlColName = " ug.Nombre";
   			_fMap[41].SqlColName = " ue.Nombre";
   			_fMap[42].SqlColName = " tp.nombre";
   			_fMap[43].SqlColName = " md.nombre";
   			_fMap[44].SqlColName = " ins.InstruccionTipoID";
   			_fMap[45].SqlColName = " ins.fecAlta";
   			_fMap[46].SqlColName = " ins.Obs";
   			_fMap[47].SqlColName = " ins.CorrespondenciaID";
   			_fMap[48].SqlColName = " it.descrip";
   			_fMap[49].SqlColName = " it.abrev";
   			_fMap[50].SqlColName = " co.Nro";
   			_fMap[51].SqlColName = " co.Anio";
   			_fMap[52].SqlColName = " co.RefCorresp";

			this.SetDefaultWhere(@"" );
		}

	} // end class vSeguimientoAvisosAdapter 


} // namespace Berke.DG.Adapters
#endregion vSeguimientoAvisos

#region vConsMarcaLitigiosWeb
namespace Berke.DG.Adapters
{
	public class vConsMarcaLitigiosWebAdapter : ViewAdapter{
	
		public vConsMarcaLitigiosWebAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marca m
join expediente e 
on ( m.id = e.marcaid )

join marcatipo mt
on (m.marcatipoid = mt.id)

join clase c
on (m.claseid = c.id)

join tramite tr
on (e.tramiteid = tr.id)

join marcaregren mr
on ( m.marcaregrenid = mr.id)

left join cliente cli
on (m.clienteid = cli.id)


join tramite_sit ts
on ( e.tramitesitid = ts.id)

join situacion sit
on (ts.situacionid = sit.id)

left join propietarioXMarca pm
on (m.id = pm.marcaid)
join expediente_situacion es
  on es.expedienteid = e.id" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.denominacion";
   			_fMap[2].SqlColName = " m.claseid";
   			_fMap[3].SqlColName = " m.propietario";
   			_fMap[4].SqlColName = " m.propais";
   			_fMap[5].SqlColName = " m.vigilada";
   			_fMap[6].SqlColName = " m.vigente";
   			_fMap[7].SqlColName = " e.id";
   			_fMap[8].SqlColName = " e.actanro";
   			_fMap[9].SqlColName = " e.actaanio";
   			_fMap[10].SqlColName = " e.acta";
   			_fMap[11].SqlColName = " e.tramiteid";
   			_fMap[12].SqlColName = " e.agenteLocalID";
   			_fMap[13].SqlColName = " e.PresentacionFecha";
   			_fMap[14].SqlColName = " c.nro";
   			_fMap[15].SqlColName = " mr.registronro";
   			_fMap[16].SqlColName = " mr.registroanio";
   			_fMap[17].SqlColName = " mr.vencimientofecha";
   			_fMap[18].SqlColName = " mr.registro";
   			_fMap[19].SqlColName = " mr.concesionfecha";
   			_fMap[20].SqlColName = " tr.Abrev";
   			_fMap[21].SqlColName = " cli.id";
   			_fMap[22].SqlColName = " cli.nombre";
   			_fMap[23].SqlColName = " e.tramitesitid";
   			_fMap[24].SqlColName = " sit.Descrip";
   			_fMap[25].SqlColName = " mt.abrev";
   			_fMap[26].SqlColName = " e.PublicPag";
   			_fMap[27].SqlColName = " e.PublicAnio";
   			_fMap[28].SqlColName = " ''";
   			_fMap[29].SqlColName = " ''";
   			_fMap[30].SqlColName = " ''";
   			_fMap[31].SqlColName = " ''";
   			_fMap[32].SqlColName = " ''";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and not exists
    (select * 
	 from expediente e2 
	 where e2.tramiteid in (1,2)
           and e2.expedienteid = e.id )" );
		}

	} // end class vConsMarcaLitigiosWebAdapter 


} // namespace Berke.DG.Adapters
#endregion vConsMarcaLitigiosWeb

#region vAvisoOpoCab
namespace Berke.DG.Adapters
{
	public class vAvisoOpoCabAdapter : ViewAdapter{
	
		public vAvisoOpoCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopocab a
join tipoaviso t
on (a.tipoavisoID = t.ID)
left join modoenvio m
on (a.modoenvioID= m.ID)
left join CViacom cv
on (m.cviacomID = cv.idvia)" );
			
   			_fMap[0].SqlColName = "a.ID";
   			_fMap[1].SqlColName = " VigilanciaDocID";
   			_fMap[2].SqlColName = " ModoEnvioID";
   			_fMap[3].SqlColName = " a.TipoAvisoID";
   			_fMap[4].SqlColName = " MarcaExtBaseID";
   			_fMap[5].SqlColName = " MarcaBaseID";
   			_fMap[6].SqlColName = " BolNro";
   			_fMap[7].SqlColName = " BolAnio";
   			_fMap[8].SqlColName = " FecVencReal";
   			_fMap[9].SqlColName = " FecVenFict";
   			_fMap[10].SqlColName = " FecGen";
   			_fMap[11].SqlColName = " FecEnvio";
   			_fMap[12].SqlColName = " FuncionarioGenID";
   			_fMap[13].SqlColName = " FuncionarioEnvioID";
   			_fMap[14].SqlColName = " Fax";
   			_fMap[15].SqlColName = " MailTo";
   			_fMap[16].SqlColName = " a.MailOrigen";
   			_fMap[17].SqlColName = " Correo";
   			_fMap[18].SqlColName = " Atencion";
   			_fMap[19].SqlColName = " IdiomaID";
   			_fMap[20].SqlColName = " BusOpoCabID";
   			_fMap[21].SqlColName = " AvisoOpoCabID";
   			_fMap[22].SqlColName = " Estado";
   			_fMap[23].SqlColName = " t.nroaviso";
   			_fMap[24].SqlColName = " t.tipo";
   			_fMap[25].SqlColName = " t.mailOrigen";
   			_fMap[26].SqlColName = " t.tipoAvisoID";
   			_fMap[27].SqlColName = " m.nombre";
   			_fMap[28].SqlColName = " m.cviacomID";
   			_fMap[29].SqlColName = " Propietario";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisoOpoCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisoOpoCab

#region vExpedienteDistribuidor
namespace Berke.DG.Adapters
{
	public class vExpedienteDistribuidorAdapter : ViewAdapter{
	
		public vExpedienteDistribuidorAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente_distribuidor ed
join cliente c
  on c.ID = ed.DistribuidorID" );
			
   			_fMap[0].SqlColName = "ed.ID";
   			_fMap[1].SqlColName = " ed.ExpedienteID";
   			_fMap[2].SqlColName = " ed.MarcaID";
   			_fMap[3].SqlColName = " ed.DistribuidorID";
   			_fMap[4].SqlColName = " c.Nombre";
   			_fMap[5].SqlColName = " ed.Producto_Servicio";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpedienteDistribuidorAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpedienteDistribuidor

#region vClienteDatos
namespace Berke.DG.Adapters
{
	public class vClienteDatosAdapter : ViewAdapter{
	
		public vClienteDatosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Cliente c
JOIN CPais p
ON (c.PaisID = p.idpais)

LEFT JOIN CCiudad ci
ON (c.ciudadID = ci.idciudad)

JOIN CIdioma i
ON (c.IdiomaID = i.ididioma)

LEFT JOIN GrupoEmpresarial g
ON (c.GrupoEmpresarialID = g.ID)" );
			
   			_fMap[0].SqlColName = "c.ID";
   			_fMap[1].SqlColName = " c.Nombre";
   			_fMap[2].SqlColName = " c.Direccion";
   			_fMap[3].SqlColName = " c.Correo";
   			_fMap[4].SqlColName = " c.Documento";
   			_fMap[5].SqlColName = " c.RUC";
   			_fMap[6].SqlColName = " c.Personeria";
   			_fMap[7].SqlColName = " c.Obs";
   			_fMap[8].SqlColName = " c.FechaAlta";
   			_fMap[9].SqlColName = " c.FechaModificacion";
   			_fMap[10].SqlColName = " c.IdiomaID";
   			_fMap[11].SqlColName = " c.PaisID";
   			_fMap[12].SqlColName = " c.Multiple";
   			_fMap[13].SqlColName = " c.GrupoEmpresarialID";
   			_fMap[14].SqlColName = " c.Activo";
   			_fMap[15].SqlColName = " c.TraduccionAuto";
   			_fMap[16].SqlColName = " c.CiudadID";
   			_fMap[17].SqlColName = " c.Inubicable";
   			_fMap[18].SqlColName = " c.ddi";
   			_fMap[19].SqlColName = " c.Distribuidor";
   			_fMap[20].SqlColName = " p.descrip";
   			_fMap[21].SqlColName = " p.paistel";
   			_fMap[22].SqlColName = " ci.nomciudad";
   			_fMap[23].SqlColName = " i.descrip";
   			_fMap[24].SqlColName = " g.descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vClienteDatosAdapter 


} // namespace Berke.DG.Adapters
#endregion vClienteDatos

#region vTramiteReplic
namespace Berke.DG.Adapters
{
	public class vTramiteReplicAdapter : ViewAdapter{
	
		public vTramiteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"tramite" );
			
   			_fMap[0].SqlColName = "id";
   			_fMap[1].SqlColName = " procesoid";
   			_fMap[2].SqlColName = " descrip";
   			_fMap[3].SqlColName = " abrev";
   			_fMap[4].SqlColName = " trabajotipoid";
   			_fMap[5].SqlColName = " bolabrev";
   			_fMap[6].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"lastUpdated > @fecultact" );
		}

	} // end class vTramiteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vTramiteReplic

#region vMarcaTipoReplic
namespace Berke.DG.Adapters
{
	public class vMarcaTipoReplicAdapter : ViewAdapter{
	
		public vMarcaTipoReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"MarcaTipo" );
			
   			_fMap[0].SqlColName = "id";
   			_fMap[1].SqlColName = " descrip";
   			_fMap[2].SqlColName = " abrev";
   			_fMap[3].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"lastUpdated > @fecultact" );
		}

	} // end class vMarcaTipoReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaTipoReplic

#region vExpeSituacionWeb
namespace Berke.DG.Adapters
{
	public class vExpeSituacionWebAdapter : ViewAdapter{
	
		public vExpeSituacionWebAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente_Situacion expSit INNER JOIN
                      dbo.Tramite_Sit tramSit ON expSit.TramiteSitID = tramSit.ID INNER JOIN
                      dbo.Situacion sit ON tramSit.SituacionID = sit.ID" );
			
   			_fMap[0].SqlColName = "expSit.ID";
   			_fMap[1].SqlColName = " expSit.ExpedienteID";
   			_fMap[2].SqlColName = " expSit.TramiteSitID";
   			_fMap[3].SqlColName = " expSit.AltaFecha";
   			_fMap[4].SqlColName = " expSit.SituacionFecha";
   			_fMap[5].SqlColName = " expSit.VencimientoFecha";
   			_fMap[6].SqlColName = " expSit.FuncionarioID";
   			_fMap[7].SqlColName = " expSit.Obs";
   			_fMap[8].SqlColName = " expSit.Datos";
   			_fMap[9].SqlColName = " sit.Descrip";
   			_fMap[10].SqlColName = " sit.Abrev";
   			_fMap[11].SqlColName = " tramSit.Orden";
   			_fMap[12].SqlColName = " sit.StandBy";

			this.SetDefaultWhere(@"" );
		}

	} // end class vExpeSituacionWebAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeSituacionWeb

#region vClaseReplic
namespace Berke.DG.Adapters
{
	public class vClaseReplicAdapter : ViewAdapter{
	
		public vClaseReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"clase" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nro";
   			_fMap[2].SqlColName = " NizaEdicionID";
   			_fMap[3].SqlColName = " ClaseTipoID";
   			_fMap[4].SqlColName = " Descrip";
   			_fMap[5].SqlColName = " DescripBreve";
   			_fMap[6].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"lastUpdated > @fecultact" );
		}

	} // end class vClaseReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vClaseReplic

#region vClienteReplic
namespace Berke.DG.Adapters
{
	public class vClienteReplicAdapter : ViewAdapter{
	
		public vClienteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"cliente" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nombre";
   			_fMap[2].SqlColName = " Direccion";
   			_fMap[3].SqlColName = " Correo";
   			_fMap[4].SqlColName = " Documento";
   			_fMap[5].SqlColName = " RUC";
   			_fMap[6].SqlColName = " Personeria";
   			_fMap[7].SqlColName = " Obs";
   			_fMap[8].SqlColName = " FechaAlta";
   			_fMap[9].SqlColName = " FechaModificacion";
   			_fMap[10].SqlColName = " IdiomaID";
   			_fMap[11].SqlColName = " PaisID";
   			_fMap[12].SqlColName = " Multiple";
   			_fMap[13].SqlColName = " GrupoEmpresarialID";
   			_fMap[14].SqlColName = " Activo";
   			_fMap[15].SqlColName = " TraduccionAuto";
   			_fMap[16].SqlColName = " CiudadID";
   			_fMap[17].SqlColName = " Inubicable";
   			_fMap[18].SqlColName = " Ddi";
   			_fMap[19].SqlColName = " PGeneral";
   			_fMap[20].SqlColName = " PIntelectual";
   			_fMap[21].SqlColName = " Distribuidor";
   			_fMap[22].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"lastUpdated > @fecultact" );
		}

	} // end class vClienteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vClienteReplic

#region vTramite_SitReplic
namespace Berke.DG.Adapters
{
	public class vTramite_SitReplicAdapter : ViewAdapter{
	
		public vTramite_SitReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Tramite_Sit" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " TramiteID";
   			_fMap[2].SqlColName = " SituacionID";
   			_fMap[3].SqlColName = " Plazo";
   			_fMap[4].SqlColName = " UnidadID";
   			_fMap[5].SqlColName = " Vigente";
   			_fMap[6].SqlColName = " Automatico";
   			_fMap[7].SqlColName = " Orden";
   			_fMap[8].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"lastUpdated > @fecultact" );
		}

	} // end class vTramite_SitReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vTramite_SitReplic

#region vSituacionReplic
namespace Berke.DG.Adapters
{
	public class vSituacionReplicAdapter : ViewAdapter{
	
		public vSituacionReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Situacion" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Descrip";
   			_fMap[2].SqlColName = " Abrev";
   			_fMap[3].SqlColName = " StandBy";
   			_fMap[4].SqlColName = " EnTramite";
   			_fMap[5].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"lastUpdated > @fecultact" );
		}

	} // end class vSituacionReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vSituacionReplic

#region vExpedienteReplic
namespace Berke.DG.Adapters
{
	public class vExpedienteReplicAdapter : ViewAdapter{
	
		public vExpedienteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join marca m
  on m.id = e.marcaid" );
			
   			_fMap[0].SqlColName = "e.ID";
   			_fMap[1].SqlColName = " e.TramiteID";
   			_fMap[2].SqlColName = " e.TramiteSitID";
   			_fMap[3].SqlColName = " e.ActaNro";
   			_fMap[4].SqlColName = " e.ActaAnio";
   			_fMap[5].SqlColName = " e.OrdenTrabajoID";
   			_fMap[6].SqlColName = " e.ClienteID";
   			_fMap[7].SqlColName = " e.AgenteLocalID";
   			_fMap[8].SqlColName = " e.ExpedienteID";
   			_fMap[9].SqlColName = " e.BoletinDetalleID";
   			_fMap[10].SqlColName = " e.DiarioID";
   			_fMap[11].SqlColName = " e.PublicPag";
   			_fMap[12].SqlColName = " e.PublicAnio";
   			_fMap[13].SqlColName = " e.Documento";
   			_fMap[14].SqlColName = " e.Bib";
   			_fMap[15].SqlColName = " e.Exp";
   			_fMap[16].SqlColName = " e.Nuestra";
   			_fMap[17].SqlColName = " e.Sustituida";
   			_fMap[18].SqlColName = " e.StandBy";
   			_fMap[19].SqlColName = " e.Vigilada";
   			_fMap[20].SqlColName = " e.Concluido";
   			_fMap[21].SqlColName = " e.VencimientoFecha";
   			_fMap[22].SqlColName = " e.MarcaRegRenID";
   			_fMap[23].SqlColName = " e.PoderInscID";
   			_fMap[24].SqlColName = " e.MarcaID";
   			_fMap[25].SqlColName = " e.FechaAband";
   			_fMap[26].SqlColName = " e.Obs";
   			_fMap[27].SqlColName = " e.Acta";
   			_fMap[28].SqlColName = " e.Publicacion";
   			_fMap[29].SqlColName = " e.Label";
   			_fMap[30].SqlColName = " e.AltaFecha";
   			_fMap[31].SqlColName = " e.PresentacionFecha";
   			_fMap[32].SqlColName = " e.lastUpdated";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and m.Vigente = 1
and e.lastUpdated > @fecultact" );
		}

	} // end class vExpedienteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpedienteReplic

#region vMarcaReplic
namespace Berke.DG.Adapters
{
	public class vMarcaReplicAdapter : ViewAdapter{
	
		public vMarcaReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marca m
join expediente e
  on e.marcaid = m.id" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.Denominacion";
   			_fMap[2].SqlColName = " m.DenominacionClave";
   			_fMap[3].SqlColName = " m.Fonetizada";
   			_fMap[4].SqlColName = " m.MarcaTipoID";
   			_fMap[5].SqlColName = " m.ClaseID";
   			_fMap[6].SqlColName = " m.ClaseDescripEsp";
   			_fMap[7].SqlColName = " m.Limitada";
   			_fMap[8].SqlColName = " m.ClienteID";
   			_fMap[9].SqlColName = " m.AgenteLocalID";
   			_fMap[10].SqlColName = " m.Nuestra";
   			_fMap[11].SqlColName = " m.Vigilada";
   			_fMap[12].SqlColName = " m.Sustituida";
   			_fMap[13].SqlColName = " m.StandBy";
   			_fMap[14].SqlColName = " m.Vigente";
   			_fMap[15].SqlColName = " m.LogotipoID";
   			_fMap[16].SqlColName = " m.ExpedienteVigenteID";
   			_fMap[17].SqlColName = " m.OtrosClientes";
   			_fMap[18].SqlColName = " m.MarcaRegRenID";
   			_fMap[19].SqlColName = " m.MarcaRegRenAnt";
   			_fMap[20].SqlColName = " m.Propietario";
   			_fMap[21].SqlColName = " m.ProDir";
   			_fMap[22].SqlColName = " m.ProPais";
   			_fMap[23].SqlColName = " m.Obs";
   			_fMap[24].SqlColName = " m.lastUpdated";

			this.SetDefaultWhere(@"m.Vigente = 1
and m.lastUpdated > @fecultact" );
		}

	} // end class vMarcaReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaReplic

#region vExpediente_SituacionReplic
namespace Berke.DG.Adapters
{
	public class vExpediente_SituacionReplicAdapter : ViewAdapter{
	
		public vExpediente_SituacionReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente_situacion es
join expediente e
  on e.id = es.expedienteid
join marca m
  on e.marcaid = m.id" );
			
   			_fMap[0].SqlColName = "es.ID";
   			_fMap[1].SqlColName = " es.ExpedienteID";
   			_fMap[2].SqlColName = " es.TramiteSitID";
   			_fMap[3].SqlColName = " es.AltaFecha";
   			_fMap[4].SqlColName = " es.SituacionFecha";
   			_fMap[5].SqlColName = " es.VencimientoFecha";
   			_fMap[6].SqlColName = " es.FuncionarioID";
   			_fMap[7].SqlColName = " es.Obs";
   			_fMap[8].SqlColName = " es.Datos";
   			_fMap[9].SqlColName = " es.lastUpdated";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and m.Vigente = 1
and es.lastUpdated > @fecultact" );
		}

	} // end class vExpediente_SituacionReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpediente_SituacionReplic

#region vMarcaRegRenReplic
namespace Berke.DG.Adapters
{
	public class vMarcaRegRenReplicAdapter : ViewAdapter{
	
		public vMarcaRegRenReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marcaregren mrr
join marca m
  on m.marcaregrenid = mrr.id
join expediente e
  on e.marcaid = m.id" );
			
   			_fMap[0].SqlColName = "mrr.ID";
   			_fMap[1].SqlColName = " mrr.ExpedienteID";
   			_fMap[2].SqlColName = " mrr.RegistroNro";
   			_fMap[3].SqlColName = " mrr.RegistroAnio";
   			_fMap[4].SqlColName = " mrr.ConcesionFecha";
   			_fMap[5].SqlColName = " mrr.Limitada";
   			_fMap[6].SqlColName = " mrr.Vigente";
   			_fMap[7].SqlColName = " mrr.RefMarca";
   			_fMap[8].SqlColName = " mrr.ObsAvRen";
   			_fMap[9].SqlColName = " mrr.TituloError";
   			_fMap[10].SqlColName = " mrr.Registro";
   			_fMap[11].SqlColName = " mrr.VencimientoFecha";
   			_fMap[12].SqlColName = " mrr.lastUpdated";

			this.SetDefaultWhere(@"m.Vigente = 1
and e.tramiteid in (1,2)
and mrr.lastUpdated > @fecultact" );
		}

	} // end class vMarcaRegRenReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaRegRenReplic

#region vPropietarioXMarcaReplic
namespace Berke.DG.Adapters
{
	public class vPropietarioXMarcaReplicAdapter : ViewAdapter{
	
		public vPropietarioXMarcaReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"propietarioXmarca pm
join marca m
  on m.id = pm.marcaid
join expediente e
  on e.marcaid = m.id" );
			
   			_fMap[0].SqlColName = "pm.ID";
   			_fMap[1].SqlColName = " pm.PropietarioID";
   			_fMap[2].SqlColName = " pm.MarcaID";
   			_fMap[3].SqlColName = " pm.lastUpdated";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and m.Vigente = 1
and pm.lastUpdated > @fecultact" );
		}

	} // end class vPropietarioXMarcaReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietarioXMarcaReplic

#region vTramiteDeleteReplic
namespace Berke.DG.Adapters
{
	public class vTramiteDeleteReplicAdapter : ViewAdapter{
	
		public vTramiteDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_tramite" );
			
   			_fMap[0].SqlColName = "id";
   			_fMap[1].SqlColName = " procesoid";
   			_fMap[2].SqlColName = " descrip";
   			_fMap[3].SqlColName = " abrev";
   			_fMap[4].SqlColName = " trabajotipoid";
   			_fMap[5].SqlColName = " bolabrev";
   			_fMap[6].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"audit_operacion = 'DELETE'
and audit_fecha > @fecultact" );
		}

	} // end class vTramiteDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vTramiteDeleteReplic

#region vMarcaTipoDeleteReplic
namespace Berke.DG.Adapters
{
	public class vMarcaTipoDeleteReplicAdapter : ViewAdapter{
	
		public vMarcaTipoDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_MarcaTipo" );
			
   			_fMap[0].SqlColName = "id";
   			_fMap[1].SqlColName = " descrip";
   			_fMap[2].SqlColName = " abrev";
   			_fMap[3].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"audit_operacion = 'DELETE'
and audit_fecha > @fecultact" );
		}

	} // end class vMarcaTipoDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaTipoDeleteReplic

#region vClaseDeleteReplic
namespace Berke.DG.Adapters
{
	public class vClaseDeleteReplicAdapter : ViewAdapter{
	
		public vClaseDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_clase" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nro";
   			_fMap[2].SqlColName = " NizaEdicionID";
   			_fMap[3].SqlColName = " ClaseTipoID";
   			_fMap[4].SqlColName = " Descrip";
   			_fMap[5].SqlColName = " DescripBreve";
   			_fMap[6].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"audit_operacion = 'DELETE'
and audit_fecha > @fecultact" );
		}

	} // end class vClaseDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vClaseDeleteReplic

#region vClienteDeleteReplic
namespace Berke.DG.Adapters
{
	public class vClienteDeleteReplicAdapter : ViewAdapter{
	
		public vClienteDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_cliente" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nombre";
   			_fMap[2].SqlColName = " Direccion";
   			_fMap[3].SqlColName = " Correo";
   			_fMap[4].SqlColName = " Documento";
   			_fMap[5].SqlColName = " RUC";
   			_fMap[6].SqlColName = " Personeria";
   			_fMap[7].SqlColName = " Obs";
   			_fMap[8].SqlColName = " FechaAlta";
   			_fMap[9].SqlColName = " FechaModificacion";
   			_fMap[10].SqlColName = " IdiomaID";
   			_fMap[11].SqlColName = " PaisID";
   			_fMap[12].SqlColName = " Multiple";
   			_fMap[13].SqlColName = " GrupoEmpresarialID";
   			_fMap[14].SqlColName = " Activo";
   			_fMap[15].SqlColName = " TraduccionAuto";
   			_fMap[16].SqlColName = " CiudadID";
   			_fMap[17].SqlColName = " Inubicable";
   			_fMap[18].SqlColName = " Ddi";
   			_fMap[19].SqlColName = " PGeneral";
   			_fMap[20].SqlColName = " PIntelectual";
   			_fMap[21].SqlColName = " Distribuidor";
   			_fMap[22].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"audit_operacion = 'DELETE'
and audit_fecha > @fecultact" );
		}

	} // end class vClienteDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vClienteDeleteReplic

#region vTramite_SitDeleteReplic
namespace Berke.DG.Adapters
{
	public class vTramite_SitDeleteReplicAdapter : ViewAdapter{
	
		public vTramite_SitDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_Tramite_Sit" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " TramiteID";
   			_fMap[2].SqlColName = " SituacionID";
   			_fMap[3].SqlColName = " Plazo";
   			_fMap[4].SqlColName = " UnidadID";
   			_fMap[5].SqlColName = " Vigente";
   			_fMap[6].SqlColName = " Automatico";
   			_fMap[7].SqlColName = " Orden";
   			_fMap[8].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"audit_operacion = 'DELETE'
and audit_fecha > @fecultact" );
		}

	} // end class vTramite_SitDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vTramite_SitDeleteReplic

#region vSituacionDeleteReplic
namespace Berke.DG.Adapters
{
	public class vSituacionDeleteReplicAdapter : ViewAdapter{
	
		public vSituacionDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_Situacion" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Descrip";
   			_fMap[2].SqlColName = " Abrev";
   			_fMap[3].SqlColName = " StandBy";
   			_fMap[4].SqlColName = " EnTramite";
   			_fMap[5].SqlColName = " lastUpdated";

			this.SetDefaultWhere(@"audit_operacion = 'DELETE'
and audit_fecha > @fecultact" );
		}

	} // end class vSituacionDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vSituacionDeleteReplic

#region vExpedienteDeleteReplic
namespace Berke.DG.Adapters
{
	public class vExpedienteDeleteReplicAdapter : ViewAdapter{
	
		public vExpedienteDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_expediente e" );
			
   			_fMap[0].SqlColName = "e.ID";
   			_fMap[1].SqlColName = " e.TramiteID";
   			_fMap[2].SqlColName = " e.TramiteSitID";
   			_fMap[3].SqlColName = " e.ActaNro";
   			_fMap[4].SqlColName = " e.ActaAnio";
   			_fMap[5].SqlColName = " e.OrdenTrabajoID";
   			_fMap[6].SqlColName = " e.ClienteID";
   			_fMap[7].SqlColName = " e.AgenteLocalID";
   			_fMap[8].SqlColName = " e.ExpedienteID";
   			_fMap[9].SqlColName = " e.BoletinDetalleID";
   			_fMap[10].SqlColName = " e.DiarioID";
   			_fMap[11].SqlColName = " e.PublicPag";
   			_fMap[12].SqlColName = " e.PublicAnio";
   			_fMap[13].SqlColName = " e.Documento";
   			_fMap[14].SqlColName = " e.Bib";
   			_fMap[15].SqlColName = " e.Exp";
   			_fMap[16].SqlColName = " e.Nuestra";
   			_fMap[17].SqlColName = " e.Sustituida";
   			_fMap[18].SqlColName = " e.StandBy";
   			_fMap[19].SqlColName = " e.Vigilada";
   			_fMap[20].SqlColName = " e.Concluido";
   			_fMap[21].SqlColName = " e.VencimientoFecha";
   			_fMap[22].SqlColName = " e.MarcaRegRenID";
   			_fMap[23].SqlColName = " e.PoderInscID";
   			_fMap[24].SqlColName = " e.MarcaID";
   			_fMap[25].SqlColName = " e.FechaAband";
   			_fMap[26].SqlColName = " e.Obs";
   			_fMap[27].SqlColName = " e.Acta";
   			_fMap[28].SqlColName = " e.Publicacion";
   			_fMap[29].SqlColName = " e.Label";
   			_fMap[30].SqlColName = " e.AltaFecha";
   			_fMap[31].SqlColName = " e.PresentacionFecha";
   			_fMap[32].SqlColName = " e.lastUpdated";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and e.audit_operacion = 'DELETE'
and e.audit_fecha > @fecultact" );
		}

	} // end class vExpedienteDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpedienteDeleteReplic

#region vMarcaDeleteReplic
namespace Berke.DG.Adapters
{
	public class vMarcaDeleteReplicAdapter : ViewAdapter{
	
		public vMarcaDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_marca m" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.Denominacion";
   			_fMap[2].SqlColName = " m.DenominacionClave";
   			_fMap[3].SqlColName = " m.Fonetizada";
   			_fMap[4].SqlColName = " m.MarcaTipoID";
   			_fMap[5].SqlColName = " m.ClaseID";
   			_fMap[6].SqlColName = " m.ClaseDescripEsp";
   			_fMap[7].SqlColName = " m.Limitada";
   			_fMap[8].SqlColName = " m.ClienteID";
   			_fMap[9].SqlColName = " m.AgenteLocalID";
   			_fMap[10].SqlColName = " m.Nuestra";
   			_fMap[11].SqlColName = " m.Vigilada";
   			_fMap[12].SqlColName = " m.Sustituida";
   			_fMap[13].SqlColName = " m.StandBy";
   			_fMap[14].SqlColName = " m.Vigente";
   			_fMap[15].SqlColName = " m.LogotipoID";
   			_fMap[16].SqlColName = " m.ExpedienteVigenteID";
   			_fMap[17].SqlColName = " m.OtrosClientes";
   			_fMap[18].SqlColName = " m.MarcaRegRenID";
   			_fMap[19].SqlColName = " m.MarcaRegRenAnt";
   			_fMap[20].SqlColName = " m.Propietario";
   			_fMap[21].SqlColName = " m.ProDir";
   			_fMap[22].SqlColName = " m.ProPais";
   			_fMap[23].SqlColName = " m.Obs";
   			_fMap[24].SqlColName = " m.lastUpdated";

			this.SetDefaultWhere(@"m.audit_operacion = 'DELETE'
and m.audit_fecha > @fecultact" );
		}

	} // end class vMarcaDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaDeleteReplic

#region vExpediente_SituacionDeleteReplic
namespace Berke.DG.Adapters
{
	public class vExpediente_SituacionDeleteReplicAdapter : ViewAdapter{
	
		public vExpediente_SituacionDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_expediente_situacion es" );
			
   			_fMap[0].SqlColName = "es.ID";
   			_fMap[1].SqlColName = " es.ExpedienteID";
   			_fMap[2].SqlColName = " es.TramiteSitID";
   			_fMap[3].SqlColName = " es.AltaFecha";
   			_fMap[4].SqlColName = " es.SituacionFecha";
   			_fMap[5].SqlColName = " es.VencimientoFecha";
   			_fMap[6].SqlColName = " es.FuncionarioID";
   			_fMap[7].SqlColName = " es.Obs";
   			_fMap[8].SqlColName = " es.Datos";
   			_fMap[9].SqlColName = " es.lastUpdated";

			this.SetDefaultWhere(@"es.audit_operacion = 'DELETE'
and es.audit_fecha > @fecultact" );
		}

	} // end class vExpediente_SituacionDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpediente_SituacionDeleteReplic

#region vMarcaRegRenDeleteReplic
namespace Berke.DG.Adapters
{
	public class vMarcaRegRenDeleteReplicAdapter : ViewAdapter{
	
		public vMarcaRegRenDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_marcaregren mrr" );
			
   			_fMap[0].SqlColName = "mrr.ID";
   			_fMap[1].SqlColName = " mrr.ExpedienteID";
   			_fMap[2].SqlColName = " mrr.RegistroNro";
   			_fMap[3].SqlColName = " mrr.RegistroAnio";
   			_fMap[4].SqlColName = " mrr.ConcesionFecha";
   			_fMap[5].SqlColName = " mrr.Limitada";
   			_fMap[6].SqlColName = " mrr.Vigente";
   			_fMap[7].SqlColName = " mrr.RefMarca";
   			_fMap[8].SqlColName = " mrr.ObsAvRen";
   			_fMap[9].SqlColName = " mrr.TituloError";
   			_fMap[10].SqlColName = " mrr.Registro";
   			_fMap[11].SqlColName = " mrr.VencimientoFecha";
   			_fMap[12].SqlColName = " mrr.lastUpdated";

			this.SetDefaultWhere(@"mrr.audit_operacion = 'DELETE'
and mrr.audit_fecha > @fecultact" );
		}

	} // end class vMarcaRegRenDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaRegRenDeleteReplic

#region vPropietarioXMarcaDeleteReplic
namespace Berke.DG.Adapters
{
	public class vPropietarioXMarcaDeleteReplicAdapter : ViewAdapter{
	
		public vPropietarioXMarcaDeleteReplicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"audit_propietarioXmarca pm" );
			
   			_fMap[0].SqlColName = "pm.ID";
   			_fMap[1].SqlColName = " pm.PropietarioID";
   			_fMap[2].SqlColName = " pm.MarcaID";
   			_fMap[3].SqlColName = " pm.lastUpdated";

			this.SetDefaultWhere(@"pm.audit_operacion = 'DELETE'
and pm.audit_fecha > @fecultact" );
		}

	} // end class vPropietarioXMarcaDeleteReplicAdapter 


} // namespace Berke.DG.Adapters
#endregion vPropietarioXMarcaDeleteReplic

#region vMarcaSolCab
namespace Berke.DG.Adapters
{
	public class vMarcaSolCabAdapter : ViewAdapter{
	
		public vMarcaSolCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"busopocab cab 
join busopodet det
on (cab.ID = det.busopocabid)
left join expediente e
on (det.actanro = e.actanro and det.actaanio = e.actaanio)
left join marca m
on ( e.marcaid = m.ID)
left join cagentelocal a
on ( m.agentelocalID = a.idagloc)
left join marcatipo mtipo
on (m.marcatipoid = mtipo.id)" );
			
   			_fMap[0].SqlColName = "e.ID";
   			_fMap[1].SqlColName = " det.ActaNro";
   			_fMap[2].SqlColName = " det.ActaAnio";
   			_fMap[3].SqlColName = " det.Denominacion";
   			_fMap[4].SqlColName = " det.ClaseNro";
   			_fMap[5].SqlColName = " det.BusOpoCabID";
   			_fMap[6].SqlColName = " e.presentacionfecha";
   			_fMap[7].SqlColName = " m.Propietario";
   			_fMap[8].SqlColName = " m.ProDir";
   			_fMap[9].SqlColName = " m.ProPais";
   			_fMap[10].SqlColName = " m.Nuestra";
   			_fMap[11].SqlColName = " m.Vigilada";
   			_fMap[12].SqlColName = " a.Nombre";
   			_fMap[13].SqlColName = " a.nromatricula";
   			_fMap[14].SqlColName = " mtipo.abrev";
   			_fMap[15].SqlColName = " e.TramiteID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaSolCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaSolCab

#region vAvisoInstruccion
namespace Berke.DG.Adapters
{
	public class vAvisoInstruccionAdapter : ViewAdapter{
	
		public vAvisoInstruccionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopodet ad
join avisoinstruccion av
  on ad.id = av.avisoopodetid
join avisoopocab ac
  on ac.id = ad.avisoopocabid
left join busopocab bc
  on bc.id = ac.busopocabid" );
			
   			_fMap[0].SqlColName = "av.ID";
   			_fMap[1].SqlColName = " av.AvisoOpoDetID";
   			_fMap[2].SqlColName = " av.InstruccionTipoID";
   			_fMap[3].SqlColName = " av.Obs";
   			_fMap[4].SqlColName = " av.FecAlta";
   			_fMap[5].SqlColName = " av.CorrespondenciaID";
   			_fMap[6].SqlColName = " av.FuncionarioRegID";
   			_fMap[7].SqlColName = " av.FuncionarioRecID";
   			_fMap[8].SqlColName = " av.MarcaBaseID";
   			_fMap[9].SqlColName = " av.MarcaBaseExtID";
   			_fMap[10].SqlColName = " ad.MarcaSolID";
   			_fMap[11].SqlColName = " ac.ID";
   			_fMap[12].SqlColName = " ac.BolAnio";
   			_fMap[13].SqlColName = " ac.BolNro";
   			_fMap[14].SqlColName = " bc.BolCarpeta";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAvisoInstruccionAdapter 


} // namespace Berke.DG.Adapters
#endregion vAvisoInstruccion

#region vCorsearch
namespace Berke.DG.Adapters
{
	public class vCorsearchAdapter : ViewAdapter{
	
		public vCorsearchAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"tmpcorsearch tmp
left join logotipo l
  on tmp.designid = l.id" );
			
   			_fMap[0].SqlColName = "tmp.ID";
   			_fMap[1].SqlColName = " tmp.Trademark";
   			_fMap[2].SqlColName = " tmp.DesignID";
   			_fMap[3].SqlColName = " tmp.Class";
   			_fMap[4].SqlColName = " tmp.TrademarkType";
   			_fMap[5].SqlColName = " tmp.Owner";
   			_fMap[6].SqlColName = " tmp.OwnerCountry";
   			_fMap[7].SqlColName = " tmp.AppNumber";
   			_fMap[8].SqlColName = " tmp.AppDate";
   			_fMap[9].SqlColName = " tmp.RegNumber";
   			_fMap[10].SqlColName = " tmp.GrantedDate";
   			_fMap[11].SqlColName = " tmp.Expiration_Renewal_Date";
   			_fMap[12].SqlColName = " tmp.PublicationDate";
   			_fMap[13].SqlColName = " ProcedureName";
   			_fMap[14].SqlColName = " Status";
   			_fMap[15].SqlColName = " l.imagen";

			this.SetDefaultWhere(@"" );
		}

	} // end class vCorsearchAdapter 


} // namespace Berke.DG.Adapters
#endregion vCorsearch

#region vMergeAvisosRep
namespace Berke.DG.Adapters
{
	public class vMergeAvisosRepAdapter : ViewAdapter{
	
		public vMergeAvisosRepAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e

join marcaregren mr

on ( e.id = mr.expedienteid )
join marca m
on ( m.id = e.marcaid )
join cliente c
on ( m.clienteid = c.id )
join propietarioxmarca pm
on ( pm.marcaid = m.id )
join propietario p
on ( p.id = pm.propietarioid )
left join Cidioma ci
on ( c.idiomaid = ci.ididioma)" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.denominacion";
   			_fMap[2].SqlColName = " m.marcatipoid";
   			_fMap[3].SqlColName = " m.claseid";
   			_fMap[4].SqlColName = " e.id";
   			_fMap[5].SqlColName = " mr.registronro";
   			_fMap[6].SqlColName = " mr.registroanio";
   			_fMap[7].SqlColName = " mr.vencimientofecha";
   			_fMap[8].SqlColName = " c.id";
   			_fMap[9].SqlColName = " c.nombre";
   			_fMap[10].SqlColName = " pm.propietarioid";
   			_fMap[11].SqlColName = " p.nombre";
   			_fMap[12].SqlColName = " p.direccion";
   			_fMap[13].SqlColName = " ci.descrip";

			this.SetDefaultWhere(@"mr.vencimientofecha between @fecdesde and @fechasta
and m.vigilada=1
and m.vigente=1" );
		}

	} // end class vMergeAvisosRepAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeAvisosRep

#region vListadoPosibleOPO
namespace Berke.DG.Adapters
{
	public class vListadoPosibleOPOAdapter : ViewAdapter{
	
		public vListadoPosibleOPOAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"avisoopodet ad
join avisoinstruccion av
  on ad.id = av.avisoopodetid
join avisoopocab ac
  on ac.id = ad.avisoopocabid
left join busopocab bc
  on bc.id = ac.busopocabid
left join marca m
  on ad.MarcaSolID = m.ID
left join expediente e
  on m.expedientevigenteid = e.id
left join clase c
  on m.claseid = c.id
left join Correspondencia cor
  on av.CorrespondenciaID = cor.ID" );
			
   			_fMap[0].SqlColName = "m.Denominacion";
   			_fMap[1].SqlColName = " e.ActaNro";
   			_fMap[2].SqlColName = " e.ActaAnio";
   			_fMap[3].SqlColName = " c.nro";
   			_fMap[4].SqlColName = " e.PresentacionFecha";
   			_fMap[5].SqlColName = " e.ID";
   			_fMap[6].SqlColName = " av.ID";
   			_fMap[7].SqlColName = " av.AvisoOpoDetID";
   			_fMap[8].SqlColName = " av.InstruccionTipoID";
   			_fMap[9].SqlColName = " av.Obs";
   			_fMap[10].SqlColName = " av.FecAlta";
   			_fMap[11].SqlColName = " av.CorrespondenciaID";
   			_fMap[12].SqlColName = " av.FuncionarioRegID";
   			_fMap[13].SqlColName = " av.FuncionarioRecID";
   			_fMap[14].SqlColName = " ad.MarcaBaseID";
   			_fMap[15].SqlColName = " ad.MarcaBaseExtID";
   			_fMap[16].SqlColName = " ad.MarcaSolID";
   			_fMap[17].SqlColName = " ac.ID";
   			_fMap[18].SqlColName = " ac.BolAnio";
   			_fMap[19].SqlColName = " ac.BolNro";
   			_fMap[20].SqlColName = " bc.BolCarpeta";
   			_fMap[21].SqlColName = " m.Propietario";
   			_fMap[22].SqlColName = " ac.FecVenFict";
   			_fMap[23].SqlColName = " cor.Nro";
   			_fMap[24].SqlColName = " cor.Anio";
   			_fMap[25].SqlColName = " av.Obs";

			this.SetDefaultWhere(@"av.InstruccionTipoID = 33
and not exists (select av2.ID from avisoinstruccion av2
		where av2.avisoopodetid = av.avisoopodetid
		and av2.InstruccionTipoID in (7,10,11,35,36)
		and av2.FecAlta > av.FecAlta)" );
		}

	} // end class vListadoPosibleOPOAdapter 


} // namespace Berke.DG.Adapters
#endregion vListadoPosibleOPO

#region vFuncionario
namespace Berke.DG.Adapters
{
	public class vFuncionarioAdapter : ViewAdapter{
	
		public vFuncionarioAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.usuario" );
			
   			_fMap[0].SqlColName = "ID";
   			_fMap[1].SqlColName = " Nombre";
   			_fMap[2].SqlColName = " Usuario";
   			_fMap[3].SqlColName = " Nick";
   			_fMap[4].SqlColName = " Email";
   			_fMap[5].SqlColName = " Activo";
   			_fMap[6].SqlColName = " NombrePila";
   			_fMap[7].SqlColName = " AreaID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vFuncionarioAdapter 


} // namespace Berke.DG.Adapters
#endregion vFuncionario

#region vPreMergeCab
namespace Berke.DG.Adapters
{
	public class vPreMergeCabAdapter : ViewAdapter{
	
		public vPreMergeCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me

join expediente e
on ( me.expedienteid = e.id )


join ordentrabajo ot
on (e.ordentrabajoid = ot.id)

left join atencion at
on ( ot.atencionid = at.id and
     e.clienteid  = at.clienteid )


join cliente c
on ( c.id = e.clienteid)

left join CIdioma i
on (c.idiomaID = i.ididioma)

left join correspondencia cor
on ( ot.correspondenciaid = cor.id)" );
			
   			_fMap[0].SqlColName = "ot.id";
   			_fMap[1].SqlColName = " ot.nro";
   			_fMap[2].SqlColName = " ot.anio";
   			_fMap[3].SqlColName = " ot.atencionid";
   			_fMap[4].SqlColName = " ot.refcorr";
   			_fMap[5].SqlColName = " ot.refcliente";
   			_fMap[6].SqlColName = " e.clienteid";
   			_fMap[7].SqlColName = " c.nombre";
   			_fMap[8].SqlColName = " c.correo";
   			_fMap[9].SqlColName = " c.idiomaid";
   			_fMap[10].SqlColName = " c.multiple";
   			_fMap[11].SqlColName = " c.traduccionauto";
   			_fMap[12].SqlColName = " i.descrip";
   			_fMap[13].SqlColName = " at.nombre";
   			_fMap[14].SqlColName = " at.areaid";
   			_fMap[15].SqlColName = " at.id";
   			_fMap[16].SqlColName = " cor.fechacorresp";
   			_fMap[17].SqlColName = " cor.nro";
   			_fMap[18].SqlColName = " cor.anio";
   			_fMap[19].SqlColName = " me.tramiteid";
   			_fMap[20].SqlColName = " me.mergeid";
   			_fMap[21].SqlColName = " me.generado";
   			_fMap[22].SqlColName = " me.mergedocid";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPreMergeCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vPreMergeCab

#region vMergeConcCab
namespace Berke.DG.Adapters
{
	public class vMergeConcCabAdapter : ViewAdapter{
	
		public vMergeConcCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join expediente e
on ( me.expedienteid = e.id )

join expedienteXPropietario ep
on (e.id = ep.expedienteid)

join ordentrabajo ot
on (e.ordentrabajoid = ot.id)

left join atencion at
on ( ot.atencionid = at.id and 
     e.clienteid  = at.clienteid )

join cliente c
on ( c.id = e.clienteid)

left join CIdioma i
on (c.idiomaID = i.ididioma)

left join Cpais p
on ( c.paisid= p.idpais )" );
			
   			_fMap[0].SqlColName = "e.clienteid";
   			_fMap[1].SqlColName = " c.nombre";
   			_fMap[2].SqlColName = " c.correo";
   			_fMap[3].SqlColName = " c.idiomaid";
   			_fMap[4].SqlColName = " c.multiple";
   			_fMap[5].SqlColName = " c.traduccionauto";
   			_fMap[6].SqlColName = " c.paisid";
   			_fMap[7].SqlColName = " p.descrip";
   			_fMap[8].SqlColName = " i.descrip";
   			_fMap[9].SqlColName = " at.nombre";
   			_fMap[10].SqlColName = " at.areaid";
   			_fMap[11].SqlColName = " at.id";
   			_fMap[12].SqlColName = " me.tramiteid";
   			_fMap[13].SqlColName = " me.mergeid";
   			_fMap[14].SqlColName = " me.generado";
   			_fMap[15].SqlColName = " me.mergedocid";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMergeConcCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeConcCab

#region vPreMergeCabEnvTit
namespace Berke.DG.Adapters
{
	public class vPreMergeCabEnvTitAdapter : ViewAdapter{
	
		public vPreMergeCabEnvTitAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"merge_expediente me
join expediente e
 on ( me.expedienteid = e.id )
join ordentrabajo ot
  on (e.ordentrabajoid = ot.id)
left join atencion at
  on ( ot.atencionid = at.id 
       and e.clienteid  = at.clienteid )
join marca m
  on m.id = e.marcaid
join cliente c
  on c.id = m.clienteid
left join CIdioma i
  on (c.idiomaID = i.ididioma)
left join correspondencia cor
  on ( ot.correspondenciaid = cor.id)" );
			
   			_fMap[0].SqlColName = "ot.id";
   			_fMap[1].SqlColName = " ot.nro";
   			_fMap[2].SqlColName = " ot.anio";
   			_fMap[3].SqlColName = " ot.atencionid";
   			_fMap[4].SqlColName = " ot.refcorr";
   			_fMap[5].SqlColName = " ot.refcliente";
   			_fMap[6].SqlColName = " m.clienteid";
   			_fMap[7].SqlColName = " c.nombre";
   			_fMap[8].SqlColName = " c.correo";
   			_fMap[9].SqlColName = " c.idiomaid";
   			_fMap[10].SqlColName = " c.multiple";
   			_fMap[11].SqlColName = " c.traduccionauto";
   			_fMap[12].SqlColName = " i.descrip";
   			_fMap[13].SqlColName = " at.nombre";
   			_fMap[14].SqlColName = " at.areaid";
   			_fMap[15].SqlColName = " cor.fechacorresp";
   			_fMap[16].SqlColName = " cor.nro";
   			_fMap[17].SqlColName = " cor.anio";
   			_fMap[18].SqlColName = " me.tramiteid";
   			_fMap[19].SqlColName = " me.mergeid";
   			_fMap[20].SqlColName = " me.generado";
   			_fMap[21].SqlColName = " me.mergedocid";

			this.SetDefaultWhere(@"" );
		}

	} // end class vPreMergeCabEnvTitAdapter 


} // namespace Berke.DG.Adapters
#endregion vPreMergeCabEnvTit

#region vMarcaClaseIdiomaTraduccion
namespace Berke.DG.Adapters
{
	public class vMarcaClaseIdiomaTraduccionAdapter : ViewAdapter{
	
		public vMarcaClaseIdiomaTraduccionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marca_claseidioma mci
join marca m
  on m.id = mci.marcaid
join cidioma ci
  on ci.ididioma = mci.idiomaid
join clase cl
  on m.claseid = cl.id" );
			
   			_fMap[0].SqlColName = "m.denominacion";
   			_fMap[1].SqlColName = " cl.nro";
   			_fMap[2].SqlColName = " ci.descrip";
   			_fMap[3].SqlColName = " mci.descrip";
   			_fMap[4].SqlColName = " mci.marcaid";

			this.SetDefaultWhere(@"" );
		}

	} // end class vMarcaClaseIdiomaTraduccionAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaClaseIdiomaTraduccion

#region vCorrespMain
namespace Berke.DG.Adapters
{
	public class vCorrespMainAdapter : ViewAdapter{
	
		public vCorrespMainAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Correspondencia cor 
LEFT OUTER JOIN dbo.Cliente 
  ON cor.ClienteID = dbo.Cliente.ID" );
			
   			_fMap[0].SqlColName = "cor.ID";
   			_fMap[1].SqlColName = " cor.Entrante";
   			_fMap[2].SqlColName = " cor.Nro";
   			_fMap[3].SqlColName = " cor.Anio";
   			_fMap[4].SqlColName = " cor.FechaAlta";
   			_fMap[5].SqlColName = " cor.FechaCorresp";
   			_fMap[6].SqlColName = " cor.RefCorresp";
   			_fMap[7].SqlColName = " cor.Identidad";
   			_fMap[8].SqlColName = " cor.IdiniRecep";
   			_fMap[9].SqlColName = " cor.Idvia";
   			_fMap[10].SqlColName = " cor.RefCliente";
   			_fMap[11].SqlColName = " cor.PrioridadID";
   			_fMap[12].SqlColName = " cor.Obs";
   			_fMap[13].SqlColName = " dbo.Cliente.ID";
   			_fMap[14].SqlColName = " dbo.Cliente.Nombre";
   			_fMap[15].SqlColName = " cor.FuncionarioID";
   			_fMap[16].SqlColName = " cor.Estado";
   			_fMap[17].SqlColName = " cor.Facturable";
   			_fMap[18].SqlColName = " cor.Acusado";
   			_fMap[19].SqlColName = " cor.idarea";
   			_fMap[20].SqlColName = " cor.documento";
   			_fMap[21].SqlColName = " cor.renovacion";

			this.SetDefaultWhere(@"" );
		}

	} // end class vCorrespMainAdapter 


} // namespace Berke.DG.Adapters
#endregion vCorrespMain

#region vCtrlNroCorresp
namespace Berke.DG.Adapters
{
	public class vCtrlNroCorrespAdapter : ViewAdapter{
	
		public vCtrlNroCorrespAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"ctrlnrocorresp ctrl
join carea ca
  on ctrl.idarea = ca.idarea" );
			
   			_fMap[0].SqlColName = "ctrl.ID";
   			_fMap[1].SqlColName = " ctrl.idarea";
   			_fMap[2].SqlColName = " ctrl.anio";
   			_fMap[3].SqlColName = " ctrl.nrocorresp";
   			_fMap[4].SqlColName = " ca.descrip";
   			_fMap[5].SqlColName = " ctrl.ultnrodistrib";

			this.SetDefaultWhere(@"" );
		}

	} // end class vCtrlNroCorrespAdapter 


} // namespace Berke.DG.Adapters
#endregion vCtrlNroCorresp

#region vBusDetRes
namespace Berke.DG.Adapters
{
	public class vBusDetResAdapter : ViewAdapter{
	
		public vBusDetResAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"busopocab cab 
join busopodet det
on ( det.busopocabid = cab.id) 
left join expediente eDet
on ( det.ActaNro = eDet.actanro and det.ActaAnio = eDet.actaanio)
left join boletindet bdet 
on ( det.ActaNro = bdet.expnro and det.ActaAnio = bdet.expanio)
join busopores res
on ( det.id = res.busopodetid)
left join expediente eRes 
on (res.ExpedienteID = eRes.ID)
left join marca mRes
on (eRes.marcaID = mRes.ID)
left join cliente cli
on ( mRes.clienteID = cli.ID)
left join marcaregren mrr
on (mrr.ID = mRes.MarcaRegRenID)" );
			
   			_fMap[0].SqlColName = "det.BusOpoCabID";
   			_fMap[1].SqlColName = " det.BoletinDetID";
   			_fMap[2].SqlColName = " det.Denominacion";
   			_fMap[3].SqlColName = " det.ClaseNro";
   			_fMap[4].SqlColName = " det.ActaNro";
   			_fMap[5].SqlColName = " det.ActaAnio";
   			_fMap[6].SqlColName = " det.FecSol";
   			_fMap[7].SqlColName = " det.Patrones";
   			_fMap[8].SqlColName = " det.ClaseOpc";
   			_fMap[9].SqlColName = " eDet.ID";
   			_fMap[10].SqlColName = " eDet.MarcaID";
   			_fMap[11].SqlColName = " res.BusOpoDetID";
   			_fMap[12].SqlColName = " res.ExpedienteID";
   			_fMap[13].SqlColName = " res.ActaNro";
   			_fMap[14].SqlColName = " res.ActaAnio";
   			_fMap[15].SqlColName = " res.Denominacion";
   			_fMap[16].SqlColName = " res.DenominacionClave";
   			_fMap[17].SqlColName = " res.ClaseNro";
   			_fMap[18].SqlColName = " res.Puntaje";
   			_fMap[19].SqlColName = " res.PatronFonetizado";
   			_fMap[20].SqlColName = " res.PatronSerializado";
   			_fMap[21].SqlColName = " res.PalabraFonetizada";
   			_fMap[22].SqlColName = " res.PalabraSerializada";
   			_fMap[23].SqlColName = " res.Seleccionado";
   			_fMap[24].SqlColName = " eRes.MarcaID";
   			_fMap[25].SqlColName = " res.MarcaExtID";
   			_fMap[26].SqlColName = " res.ID";
   			_fMap[27].SqlColName = " mRes.Propietario";
   			_fMap[28].SqlColName = " cli.Nombre";
   			_fMap[29].SqlColName = " cli.ID";
   			_fMap[30].SqlColName = " bdet.MarcaTipo";
   			_fMap[31].SqlColName = " mrr.RegistroNro";
   			_fMap[32].SqlColName = " mrr.ConcesionFecha";
   			_fMap[33].SqlColName = " mrr.VencimientoFecha";
   			_fMap[34].SqlColName = " eDet.TramiteID";
   			_fMap[35].SqlColName = " bdet.Propietario";

			this.SetDefaultWhere(@"" );
		}

	} // end class vBusDetResAdapter 


} // namespace Berke.DG.Adapters
#endregion vBusDetRes

#region vMergeAvisosCab
namespace Berke.DG.Adapters
{
	public class vMergeAvisosCabAdapter : ViewAdapter{
	
		public vMergeAvisosCabAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marcaregren mr

join expediente e

on (e.id = mr.expedienteid )

join marca m
on (m.id = e.marcaid)
join cliente c
on (m.clienteid= c.id)

left join CIdioma i
on (c.idiomaid = i.ididioma)" );
			
   			_fMap[0].SqlColName = "c.id";
   			_fMap[1].SqlColName = " c.nombre";
   			_fMap[2].SqlColName = " c.multiple";
   			_fMap[3].SqlColName = " c.correo";
   			_fMap[4].SqlColName = " c.idiomaid";
   			_fMap[5].SqlColName = " i.descrip";

			this.SetDefaultWhere(@"mr.vencimientofecha between  @fecdesde and @fechasta and m.vigilada=1
and mr.vigente=1

and m.id not in ( SELECT distinct m.id FROM marcaregren mr
		  join expediente e
			on (e.id = mr.expedienteid )

		  join marca m
			on (m.id = e.marcaid)

		  join expediente_instruccion i
			on ( i.expedienteid = e.id )

		   where mr.vencimientofecha between @fecdesde and @fechasta and m.vigilada=1
		   and mr.vigente=1
		   and (i.instrucciontipoid=1 or i.instrucciontipoid=3 or i.instrucciontipoid=4 or i.instrucciontipoid=5)
                  ) and not exists (SELECT ex2.ordentrabajoid FROM expediente ex2
		WHERE ex2.expedienteID = e.ID
		AND ex2.tramiteid = 2)" );
		}

	} // end class vMergeAvisosCabAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeAvisosCab

#region vChkExpSit
namespace Berke.DG.Adapters
{
	public class vChkExpSitAdapter : ViewAdapter{
	
		public vChkExpSitAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Expediente_Situacion 
JOIN  Tramite_Sit 
ON ( Expediente_Situacion.TramiteSitID = Tramite_Sit.ID ) 

JOIN Situacion 
ON ( Tramite_Sit.SituacionID = Situacion.ID )" );
			
   			_fMap[0].SqlColName = "Expediente_Situacion.ExpedienteID";
   			_fMap[1].SqlColName = " Expediente_Situacion.TramiteSitID";
   			_fMap[2].SqlColName = " Tramite_Sit.SituacionID";
   			_fMap[3].SqlColName = " Situacion.Descrip";
   			_fMap[4].SqlColName = " Expediente_Situacion.SituacionFecha";

			this.SetDefaultWhere(@"" );
		}

	} // end class vChkExpSitAdapter 


} // namespace Berke.DG.Adapters
#endregion vChkExpSit

#region vListadoTarjetasCongreso
namespace Berke.DG.Adapters
{
	public class vListadoTarjetasCongresoAdapter : ViewAdapter{
	
		public vListadoTarjetasCongresoAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"cliente cli
join atencion ate
  on ate.clienteid = cli.id
join usuarioxcongreso uco
  on uco.atencionid = ate.id
join congresos con
  on uco.congresoid = con.id
join cpais pai
  on cli.paisid = pai.idpais" );
			
   			_fMap[0].SqlColName = "cli.id";
   			_fMap[1].SqlColName = " cli.nombre";
   			_fMap[2].SqlColName = " cli.correo";
   			_fMap[3].SqlColName = " ate.id";
   			_fMap[4].SqlColName = " ate.nombre";
   			_fMap[5].SqlColName = " con.id";
   			_fMap[6].SqlColName = " con.descripcion";
   			_fMap[7].SqlColName = " pai.descrip";

			this.SetDefaultWhere(@"ate.tarjetaid is not null" );
		}

	} // end class vListadoTarjetasCongresoAdapter 


} // namespace Berke.DG.Adapters
#endregion vListadoTarjetasCongreso

#region vMarcaFonetica
namespace Berke.DG.Adapters
{
	public class vMarcaFoneticaAdapter : ViewAdapter{
	
		public vMarcaFoneticaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e 
join marca m on
(e.marcaid = m.ID)
join clase cl on 
(m.claseid= cl.id)
join marcaregren mrr on
(m.marcaregrenid = mrr.id)" );
			
   			_fMap[0].SqlColName = "m.ID";
   			_fMap[1].SqlColName = " m.Denominacion";
   			_fMap[2].SqlColName = " m.DenominacionClave";
   			_fMap[3].SqlColName = " m.MarcaTipoID";
   			_fMap[4].SqlColName = " m.ClaseID";
   			_fMap[5].SqlColName = " cl.nro";
   			_fMap[6].SqlColName = " m.Nuestra";
   			_fMap[7].SqlColName = " m.Vigilada";
   			_fMap[8].SqlColName = " m.Sustituida";
   			_fMap[9].SqlColName = " m.MarcaRegRenID";
   			_fMap[10].SqlColName = " m.Propietario";
   			_fMap[11].SqlColName = " m.ProDir";
   			_fMap[12].SqlColName = " m.ProPais";
   			_fMap[13].SqlColName = " m.Vigente";
   			_fMap[14].SqlColName = " m.ClienteID";
   			_fMap[15].SqlColName = " e.ActaNro";
   			_fMap[16].SqlColName = " e.ActaAnio";
   			_fMap[17].SqlColName = " e.PresentacionFecha";
   			_fMap[18].SqlColName = " e.TramiteID";
   			_fMap[19].SqlColName = " e.ID";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and e.actaanio > 0
and e.actanro > 0
and not exists
    (select * 
	 from expediente e2 
	 where e2.tramiteid in (1,2)
           and e2.actaanio > 0
           and e2.actanro > 0
           and e2.expedienteid = e.id )" );
		}

	} // end class vMarcaFoneticaAdapter 


} // namespace Berke.DG.Adapters
#endregion vMarcaFonetica

#region vExpeMarca
namespace Berke.DG.Adapters
{
	public class vExpeMarcaAdapter : ViewAdapter{
	
		public vExpeMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Expediente ExpePadre 
RIGHT OUTER JOIN
          dbo.Expediente expe ON ExpePadre.ID = expe.ExpedienteID 
LEFT OUTER JOIN
          dbo.Clase cla 
INNER JOIN
          dbo.Marca mar ON cla.ID = mar.ClaseID 
INNER JOIN
          dbo.MarcaTipo ON mar.MarcaTipoID = dbo.MarcaTipo.ID 
LEFT OUTER JOIN
          dbo.MarcaRegRen regRen_Mar ON mar.MarcaRegRenID = regRen_Mar.ID ON expe.MarcaID = mar.ID

                        
LEFT OUTER JOIN  dbo.propietarioxmarca pdd
          ON mar.id = pdd.marcaid 

LEFT OUTER JOIN
          dbo.Tramite tram ON expe.TramiteID = tram.ID 
LEFT OUTER JOIN
          dbo.Situacion sit 
INNER JOIN
          dbo.Tramite_Sit tramSit ON sit.ID = tramSit.SituacionID ON expe.TramiteSitID = tramSit.ID 
LEFT OUTER JOIN
          dbo.MarcaRegRen regRen ON expe.MarcaRegRenID = regRen.ID 
LEFT OUTER JOIN
          dbo.OrdenTrabajo ot ON expe.OrdenTrabajoID = ot.ID
LEFT JOIN CLIENTE cli
on mar.clienteid = cli.id" );
			
   			_fMap[0].SqlColName = "expe.ID";
   			_fMap[1].SqlColName = " expe.Acta";
   			_fMap[2].SqlColName = " expe.expedienteid";
   			_fMap[3].SqlColName = " regRen.Registro";
   			_fMap[4].SqlColName = " ot.OrdenTrabajo";
   			_fMap[5].SqlColName = " mar.Denominacion";
   			_fMap[6].SqlColName = " cla.DescripBreve";
   			_fMap[7].SqlColName = " cla.Nro";
   			_fMap[8].SqlColName = " tram.Descrip";
   			_fMap[9].SqlColName = " tram.Abrev";
   			_fMap[10].SqlColName = " sit.Descrip";
   			_fMap[11].SqlColName = " sit.EnTramite";
   			_fMap[12].SqlColName = " expe.TramiteID";
   			_fMap[13].SqlColName = " expe.TramiteSitID";
   			_fMap[14].SqlColName = " expe.ActaNro";
   			_fMap[15].SqlColName = " expe.ActaAnio";
   			_fMap[16].SqlColName = " expe.OrdenTrabajoID";
   			_fMap[17].SqlColName = " mar.ClienteID";
   			_fMap[18].SqlColName = " expe.AgenteLocalID";
   			_fMap[19].SqlColName = " expe.PresentacionFecha";
   			_fMap[20].SqlColName = " expe.AltaFecha";
   			_fMap[21].SqlColName = " pdd.PropietarioID";
   			_fMap[22].SqlColName = " mar.Propietario";
   			_fMap[23].SqlColName = " mar.ProPais";
   			_fMap[24].SqlColName = " mar.ClaseID";
   			_fMap[25].SqlColName = " ot.Nro";
   			_fMap[26].SqlColName = " ot.Anio";
   			_fMap[27].SqlColName = " regRen.RegistroNro";
   			_fMap[28].SqlColName = " regRen.RegistroAnio";
   			_fMap[29].SqlColName = " expe.MarcaID";
   			_fMap[30].SqlColName = " expe.Label";
   			_fMap[31].SqlColName = " expe.Nuestra";
   			_fMap[32].SqlColName = " expe.PublicPag";
   			_fMap[33].SqlColName = " expe.PublicAnio";
   			_fMap[34].SqlColName = " mar.Nuestra";
   			_fMap[35].SqlColName = " mar.Vigente";
   			_fMap[36].SqlColName = " mar.Vigilada";
   			_fMap[37].SqlColName = " mar.Sustituida";
   			_fMap[38].SqlColName = " mar.StandBy";
   			_fMap[39].SqlColName = " expe.VencimientoFecha";
   			_fMap[40].SqlColName = " regRen_Mar.VencimientoFecha";
   			_fMap[41].SqlColName = " regRen_Mar.RegistroNro";
   			_fMap[42].SqlColName = " regRen_Mar.RegistroAnio";
   			_fMap[43].SqlColName = " regRen_Mar.ConcesionFecha";
   			_fMap[44].SqlColName = " regRen_Mar.Vigente";
   			_fMap[45].SqlColName = " regRen.Vigente";
   			_fMap[46].SqlColName = " ExpePadre.Acta";
   			_fMap[47].SqlColName = " mar.DenominacionClave";
   			_fMap[48].SqlColName = " dbo.MarcaTipo.Abrev";
   			_fMap[49].SqlColName = " mar.ClaseDescripEsp";
   			_fMap[50].SqlColName = " mar.Limitada";
   			_fMap[51].SqlColName = " mar.LogotipoID";
   			_fMap[52].SqlColName = " cli.nombre";
   			_fMap[53].SqlColName = " mar.TipoAtencionxMarca";
   			_fMap[54].SqlColName = " mar.IDTipoAtencionxMarca";

			this.SetDefaultWhere(@"(tram.ProcesoID = 1)" );
		}

	} // end class vExpeMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vExpeMarca

#region vAtencionArea
namespace Berke.DG.Adapters
{
	public class vAtencionAreaAdapter : ViewAdapter{
	
		public vAtencionAreaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"Atencion at
JOIN Area ar
ON (at.AreaID = ar.ID)" );
			
   			_fMap[0].SqlColName = "at.ID";
   			_fMap[1].SqlColName = " at.Nombre";
   			_fMap[2].SqlColName = " at.Obs";
   			_fMap[3].SqlColName = " at.ClienteID";
   			_fMap[4].SqlColName = " at.AreaID";
   			_fMap[5].SqlColName = " ar.Descrip";
   			_fMap[6].SqlColName = " ''";
   			_fMap[7].SqlColName = " at.TarjetaID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAtencionAreaAdapter 


} // namespace Berke.DG.Adapters
#endregion vAtencionArea

#region vConsMarcaLitigios
namespace Berke.DG.Adapters
{
	public class vConsMarcaLitigiosAdapter : ViewAdapter{
	
		public vConsMarcaLitigiosAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"marca m
join expediente e 
on ( m.id = e.marcaid )

join marcatipo mt
on (m.marcatipoid = mt.id)

join clase c
on (m.claseid = c.id)

join tramite tr
on (e.tramiteid = tr.id)

join marcaregren mr
on ( e.marcaregrenid = mr.id)

left join cliente cli
on (m.clienteid = cli.id)


join tramite_sit ts
on ( e.tramitesitid = ts.id)

join situacion sit
on (ts.situacionid = sit.id)

left join OrdenTrabajo ot
  on e.ordentrabajoID = ot.ID

left join propietarioXMarca pm
on (m.id = pm.marcaid)

left join CAgenteLocal Cag
on e.agentelocalid = cag.idagloc" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.denominacion";
   			_fMap[2].SqlColName = " m.claseid";
   			_fMap[3].SqlColName = " m.propietario";
   			_fMap[4].SqlColName = " m.propais";
   			_fMap[5].SqlColName = " m.vigilada";
   			_fMap[6].SqlColName = " m.vigente";
   			_fMap[7].SqlColName = " e.id";
   			_fMap[8].SqlColName = " e.actanro";
   			_fMap[9].SqlColName = " e.actaanio";
   			_fMap[10].SqlColName = " e.acta";
   			_fMap[11].SqlColName = " e.tramiteid";
   			_fMap[12].SqlColName = " e.agenteLocalID";
   			_fMap[13].SqlColName = " e.PresentacionFecha";
   			_fMap[14].SqlColName = " c.nro";
   			_fMap[15].SqlColName = " mr.registronro";
   			_fMap[16].SqlColName = " mr.registroanio";
   			_fMap[17].SqlColName = " mr.vencimientofecha";
   			_fMap[18].SqlColName = " mr.registro";
   			_fMap[19].SqlColName = " mr.concesionfecha";
   			_fMap[20].SqlColName = " tr.Abrev";
   			_fMap[21].SqlColName = " cli.id";
   			_fMap[22].SqlColName = " cli.nombre";
   			_fMap[23].SqlColName = " e.tramitesitid";
   			_fMap[24].SqlColName = " sit.Descrip";
   			_fMap[25].SqlColName = " mt.abrev";
   			_fMap[26].SqlColName = " ''";
   			_fMap[27].SqlColName = " ''";
   			_fMap[28].SqlColName = " ot.OrdenTrabajo";
   			_fMap[29].SqlColName = " Cag.Nombre";
   			_fMap[30].SqlColName = " ''";
   			_fMap[31].SqlColName = " m.TipoAtencionxMarca";
   			_fMap[32].SqlColName = " m.IDTipoAtencionxMarca";

			this.SetDefaultWhere(@"e.tramiteid in (1,2)
and not exists
    (select * 
	 from expediente e2 
	 where e2.tramiteid in (1,2)
           and e2.expedienteid = e.id )" );
		}

	} // end class vConsMarcaLitigiosAdapter 


} // namespace Berke.DG.Adapters
#endregion vConsMarcaLitigios

#region vAtencionesxMarca
namespace Berke.DG.Adapters
{
	public class vAtencionesxMarcaAdapter : ViewAdapter{
	
		public vAtencionesxMarcaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"AtencionxMarca aM
JOIN Atencion a
  ON a.ID = aM.AtencionID
JOIN Area ar
  ON ar.ID = a.AreaID" );
			
   			_fMap[0].SqlColName = "aM.ID";
   			_fMap[1].SqlColName = " aM.MarcaID";
   			_fMap[2].SqlColName = " aM.AtencionID";
   			_fMap[3].SqlColName = " a.Nombre";
   			_fMap[4].SqlColName = " ar.ID";
   			_fMap[5].SqlColName = " ar.Descrip";

			this.SetDefaultWhere(@"" );
		}

	} // end class vAtencionesxMarcaAdapter 


} // namespace Berke.DG.Adapters
#endregion vAtencionesxMarca

#region vOrdenPublicacionLic
namespace Berke.DG.Adapters
{
	public class vOrdenPublicacionLicAdapter : ViewAdapter{
	
		public vOrdenPublicacionLicAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
left join expediente e2
on (e.expedienteid = e2.id)
left join marcaregren mr2
on (e2.marcaregrenid = mr2.id)
join marca m
on (e.marcaid = m.id)
join tramite t
on (e.tramiteid = t.id)
join clase cl 
on (m.claseid = cl.id)
join expediente_situacion es
on (e.id = es.expedienteID)
join tramite_sit ts
on (es.tramitesitID = ts.id)
join situacion sit
on (ts.situacionID = sit.id)
left join expedientecampo ec1
on (ec1.expedienteid = e.id)
and (ec1.campo = 'Licenciatario')
left join expedientecampo ec2
on (ec2.expedienteid = e.id)
and (ec2.campo = 'Direcci√≥n')" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.denominacion";
   			_fMap[2].SqlColName = " e.id";
   			_fMap[3].SqlColName = " e.presentacionfecha";
   			_fMap[4].SqlColName = " e.actanro";
   			_fMap[5].SqlColName = " e.actaanio";
   			_fMap[6].SqlColName = " cl.ID";
   			_fMap[7].SqlColName = " cl.nro";
   			_fMap[8].SqlColName = " m.propietario";
   			_fMap[9].SqlColName = " m.prodir";
   			_fMap[10].SqlColName = " t.id";
   			_fMap[11].SqlColName = " t.descrip";
   			_fMap[12].SqlColName = " t.abrev";
   			_fMap[13].SqlColName = " es.situacionfecha";
   			_fMap[14].SqlColName = " ts.id";
   			_fMap[15].SqlColName = " sit.abrev";
   			_fMap[16].SqlColName = " ec1.valor";
   			_fMap[17].SqlColName = " ec2.valor";
   			_fMap[18].SqlColName = " e2.id";
   			_fMap[19].SqlColName = " mr2.registronro";
   			_fMap[20].SqlColName = " mr2.concesionfecha";
   			_fMap[21].SqlColName = " es.ID";

			this.SetDefaultWhere(@"sit.id = 3
and e.nuestra = 1" );
		}

	} // end class vOrdenPublicacionLicAdapter 


} // namespace Berke.DG.Adapters
#endregion vOrdenPublicacionLic

#region vOrdenPublicacion
namespace Berke.DG.Adapters
{
	public class vOrdenPublicacionAdapter : ViewAdapter{
	
		public vOrdenPublicacionAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
left join expediente e2
on (e.expedienteid = e2.id)
left join marcaregren mr2
on (e2.marcaregrenid = mr2.id)
join marca m
on (e.marcaid = m.id)
join tramite t
on (e.tramiteid = t.id)
join clase cl 
on (m.claseid = cl.id)
join expediente_situacion es
on (e.id = es.expedienteID)
join tramite_sit ts
on (es.tramitesitID = ts.id)
join situacion sit
on (ts.situacionID = sit.id)
join ordentrabajo ot
on (e.ordentrabajoID = ot.id)
left join expedientecampo ec1
on (ec1.expedienteid = e.id)
and (ec1.campo = 'Propietario Anterior')
left join expedientecampo ec2
on (ec2.expedienteid = e.id)
and (ec2.campo = 'Propietario')" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.denominacion";
   			_fMap[2].SqlColName = " e.id";
   			_fMap[3].SqlColName = " e.presentacionfecha";
   			_fMap[4].SqlColName = " e.actanro";
   			_fMap[5].SqlColName = " e.actaanio";
   			_fMap[6].SqlColName = " cl.ID";
   			_fMap[7].SqlColName = " cl.nro";
   			_fMap[8].SqlColName = " m.propietario";
   			_fMap[9].SqlColName = " m.prodir";
   			_fMap[10].SqlColName = " t.id";
   			_fMap[11].SqlColName = " t.descrip";
   			_fMap[12].SqlColName = " t.abrev";
   			_fMap[13].SqlColName = " es.situacionfecha";
   			_fMap[14].SqlColName = " ts.id";
   			_fMap[15].SqlColName = " sit.abrev";
   			_fMap[16].SqlColName = " ec1.valor";
   			_fMap[17].SqlColName = " ec2.valor";
   			_fMap[18].SqlColName = " e2.id";
   			_fMap[19].SqlColName = " mr2.registronro";
   			_fMap[20].SqlColName = " mr2.concesionfecha";
   			_fMap[21].SqlColName = " ot.nro";
   			_fMap[22].SqlColName = " ot.anio";
   			_fMap[23].SqlColName = " es.ID";

			this.SetDefaultWhere(@"sit.id = 3
and e.nuestra = 1" );
		}

	} // end class vOrdenPublicacionAdapter 


} // namespace Berke.DG.Adapters
#endregion vOrdenPublicacion

#region vCorrespondencia
namespace Berke.DG.Adapters
{
	public class vCorrespondenciaAdapter : ViewAdapter{
	
		public vCorrespondenciaAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"dbo.Correspondencia cor 
LEFT OUTER JOIN dbo.Cliente 
  ON cor.ClienteID = dbo.Cliente.ID 
LEFT OUTER JOIN dbo.CorrespondenciaMov mov 
  ON cor.ID = mov.CorrespondenciaID
LEFT JOIN Usuario usu
  ON cor.FuncionarioID = usu.ID" );
			
   			_fMap[0].SqlColName = "cor.ID";
   			_fMap[1].SqlColName = " cor.Entrante";
   			_fMap[2].SqlColName = " cor.Nro";
   			_fMap[3].SqlColName = " cor.Anio";
   			_fMap[4].SqlColName = " cor.FechaAlta";
   			_fMap[5].SqlColName = " cor.FechaCorresp";
   			_fMap[6].SqlColName = " cor.RefCorresp";
   			_fMap[7].SqlColName = " cor.Identidad";
   			_fMap[8].SqlColName = " cor.IdiniRecep";
   			_fMap[9].SqlColName = " cor.Idvia";
   			_fMap[10].SqlColName = " cor.RefCliente";
   			_fMap[11].SqlColName = " cor.PrioridadID";
   			_fMap[12].SqlColName = " cor.Obs";
   			_fMap[13].SqlColName = " mov.ID";
   			_fMap[14].SqlColName = " mov.TrabajoTipoID";
   			_fMap[15].SqlColName = " mov.TrabajoTipo";
   			_fMap[16].SqlColName = " mov.Idarea";
   			_fMap[17].SqlColName = " mov.IdiniDistrib";
   			_fMap[18].SqlColName = " mov.IdiniRespons";
   			_fMap[19].SqlColName = " mov.IdiniProceso";
   			_fMap[20].SqlColName = " mov.FechaAcuse";
   			_fMap[21].SqlColName = " mov.FechaProceso";
   			_fMap[22].SqlColName = " mov.Obs";
   			_fMap[23].SqlColName = " dbo.Cliente.ID";
   			_fMap[24].SqlColName = " dbo.Cliente.Nombre";
   			_fMap[25].SqlColName = " cor.FuncionarioID";
   			_fMap[26].SqlColName = " usu.NombrePila";
   			_fMap[27].SqlColName = " cor.Estado";
   			_fMap[28].SqlColName = " usu.AreaID";
   			_fMap[29].SqlColName = " cor.Facturable";
   			_fMap[30].SqlColName = " cor.Acusado";
   			_fMap[31].SqlColName = " cor.idarea";

			this.SetDefaultWhere(@"" );
		}

	} // end class vCorrespondenciaAdapter 


} // namespace Berke.DG.Adapters
#endregion vCorrespondencia

#region vMergeAvisosDet
namespace Berke.DG.Adapters
{
	public class vMergeAvisosDetAdapter : ViewAdapter{
	
		public vMergeAvisosDetAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"expediente e
join marcaregren mr
on ( e.id = mr.expedienteid )
join marca m
on ( m.id = e.marcaid )
join cliente c
on (m.clienteid= c.id)
join propietarioxmarca pm
on ( pm.marcaid = m.id )
join propietario p
on ( p.id = pm.propietarioid )" );
			
   			_fMap[0].SqlColName = "m.id";
   			_fMap[1].SqlColName = " m.denominacion";
   			_fMap[2].SqlColName = " m.marcatipoid";
   			_fMap[3].SqlColName = " m.claseid";
   			_fMap[4].SqlColName = " e.id";
   			_fMap[5].SqlColName = " mr.registronro";
   			_fMap[6].SqlColName = " mr.registroanio";
   			_fMap[7].SqlColName = " mr.vencimientofecha";
   			_fMap[8].SqlColName = " c.id";
   			_fMap[9].SqlColName = " m.clienteid";
   			_fMap[10].SqlColName = " e.clienteid";
   			_fMap[11].SqlColName = " c.nombre";
   			_fMap[12].SqlColName = " pm.propietarioid";
   			_fMap[13].SqlColName = " p.nombre";
   			_fMap[14].SqlColName = " p.direccion";
   			_fMap[15].SqlColName = " m.ID";
   			_fMap[16].SqlColName = " m.TipoAtencionxMarca";
   			_fMap[17].SqlColName = " m.IDTipoAtencionxMarca";
   			_fMap[18].SqlColName = " c.multiple";

			this.SetDefaultWhere(@"mr.vencimientofecha between @fecdesde and @fechasta
and m.vigilada=1
and mr.vigente=1
and m.id not in ( SELECT distinct m.id FROM marcaregren mr
		  join expediente e
			on ( e.id = mr.expedienteid )

		  join marca m
			on (m.id = e.marcaid)

		  join expediente_instruccion i
			on ( i.expedienteid = e.id )

where mr.vencimientofecha between @fecdesde and @fechasta
and m.vigilada=1
and mr.vigente=1
and (i.instrucciontipoid=1 or i.instrucciontipoid=3 or i.instrucciontipoid=4 or i.instrucciontipoid=5)
)  and not exists (SELECT ex2.ordentrabajoid FROM expediente ex2
		WHERE ex2.expedienteID = e.ID
		AND ex2.tramiteid = 2)" );
		}

	} // end class vMergeAvisosDetAdapter 


} // namespace Berke.DG.Adapters
#endregion vMergeAvisosDet

#region vCtrlGenHDesc
namespace Berke.DG.Adapters
{
	public class vCtrlGenHDescAdapter : ViewAdapter{
	
		public vCtrlGenHDescAdapter( Berke.DG.Base.ViewBase tb,  AccesoDB db ) : base()
		{
			Bind( tb, db, @"CtrlGenHDesc chd
  JOIN TrabajoTipo tt
    ON chd.TipoTrabajoID = tt.ID
  JOIN Tramite tr
    ON tt.ID = tr.TrabajoTipoID
  JOIN Usuario us
    ON chd.FuncionarioID = us.ID
  JOIN CAgenteLocal ca
    ON chd.AgenteLocalID = ca.idagloc
  JOIN Expediente ex
    ON chd.ExpedienteID = ex.ID
  JOIN Marca ma
    ON ex.MarcaID = ma.ID" );
			
   			_fMap[0].SqlColName = "chd.HINro";
   			_fMap[1].SqlColName = " chd.HIAnio";
   			_fMap[2].SqlColName = " chd.RegistroNro";
   			_fMap[3].SqlColName = " chd.ExpedienteID";
   			_fMap[4].SqlColName = " tr.Abrev";
   			_fMap[5].SqlColName = " us.NombrePila";
   			_fMap[6].SqlColName = " ca.Nombre";
   			_fMap[7].SqlColName = " chd.FechaHoraGeneracion";
   			_fMap[8].SqlColName = " ex.ActaNro";
   			_fMap[9].SqlColName = " ex.ActaAnio";
   			_fMap[10].SqlColName = " ma.Denominacion";
   			_fMap[11].SqlColName = " ca.idagloc";
   			_fMap[12].SqlColName = " us.ID";
   			_fMap[13].SqlColName = " tr.ID";

			this.SetDefaultWhere(@"" );
		}

	} // end class vCtrlGenHDescAdapter 


} // namespace Berke.DG.Adapters
#endregion vCtrlGenHDesc

#endregion Adapters