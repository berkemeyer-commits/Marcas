<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<fwk.core>
		<!--Aplicaciones del framework. Se debe especificar la aplicación por defecto
		y el modo de compatibilidad. Si es falso, entonces cada aplicación ejecutará
		en un Application Domain diferente, con su propia configuración. 
		Si el parámetro es verdadero, solo se ejecutará la aplicación por defecto,
		con las mismas reglas que las versiones anterirores de framework (las acciones
		se ejecutan en el mismo marco que el dispatcher)-->
		<applications default="Framework" compatibilityMode="false">
			<application name="Framework">
				<log-providers>
					<log-provider class="Framework.Core.WinEventLog,fwkcore" />
				</log-providers>
				<config-provider class="Framework.Core.FileConfigProvider,fwkcore" />
				<!-- lista de conexiones. cambiar "fwk" por la conexión por defecto -->
				<databases default="fwk">
					<!-- ajustar la siguente linea para que apunte a la base de datos correcta -->
					<connection name="fwk" value="Data Source=localhost;Initial Catalog=fwk;User ID=framework;Password=framework" />
					<!-- aqui se pueden agregar más conexiones -->
				</databases>
				<action-timeout value="10000" />
				<!-- Administradores del sistema. Cambiar el default por el nombre
                     del grupo de quienes pueden administrar -->
				<!-- <admin-group name="my admin group" /> -->
			</application>
		</applications>
		<server>
			<user-provider class="Framework.Core.FwkUser,fwkcore" />
			<date-provider class="Framework.Core.FwkDateProvider,fwkcore" />
			<transaction-log>
				<output-queue>.\private$\mbi_output</output-queue>
			</transaction-log>
			<service-actions></service-actions>
			<!-- Proveedores de salida del dispatcher -->
			<output-providers enabled="false">
				<!-- Un proveedor de salida debe indicar un nombre logico, 
					 una clase que lo implemente, y el listado de eventos 
					 que desea conocer (Start,End,Checkpoint,Error) -->
				<output-provider name="fwkProvider" class="Framework.Core.FwkOutputProvider,fwkcore" eventType="Start,End,Checkpoint,Error">
					<consolidation-provider class="Framework.Core.FwkConsolidationProvider,fwkcore" />
					<log-queue>.\private$\mbi_actions</log-queue>
				</output-provider>
			</output-providers>
		</server>
	</fwk.core>
	<!-- Solo se usa cuando la configuracion usa el provider de XML (FileConfigProvider) -->
	<fwk.config>
		<!-- Configuración compartida por todas las aplicaciones-->
		<global>
			<actions>
				<!-- listado de acciones del sistema, publicadas a través del dispatcher -->
				<!-- por ejemplo:
                <action code="test_action" 
                        handler-class="TestActions.TestAction,TestActions" 
                        request-class="Framework.Core.Request,fwkcommon"
                        response-class="Framework.Core.Response,fwkcommon" 
                        log-header="true" log-request="true" log-response="true" tx-mode="Required" 
                        application="Framework" >
                    <role name="Admin" />
                    <role name="Config" />
                </action>
                --></actions>
		</global>
		<!-- Configuración específica por aplicación-->
		<application.config>
			<application name="Framework">
				<!-- listado de parámetros de configuración -->
				<!-- por ejemplo:
                <param key="mi_parametro" value="un valor" />
                o tambien:
                <param environment="mi_env" module="mi_modulo" submodule="mi_sub" key="mi_fullparam" value="un valor" />
                -->
				<!-- listado de mensajes del sistema -->
				<!-- por ejemplo:
                <message msgid="test_msg" text="Un mensaje de prueba" />
                los mensajes pueden tener strings para reemplazar, usando {n}, donde n >= 0:
                <message msgid="demo_msg" text="Mensaje con valor para reemplazar: {0}" />
                --></application>
		</application.config>
	</fwk.config>
</configuration>
